//---------------------------------------------------------------------
//               Copyright(c) Synopsys, Inc.                           
//     All Rights reserved - Unpublished -rights reserved under        
//     the Copyright laws of the United States of America.             
//                                                                     
//  U.S. Patents: 7,093,156 B1 and 7,406,620 B2 (and more pending).    
//                                                                     
//  This file includes the Confidential information of Synopsys, Inc.  
//  and GLOBALFOUNDRIES.                                               
//  The receiver of this Confidential Information shall not disclose   
//  it to any third party and shall protect its confidentiality by     
//  using the same degree of care, but not less than a reasonable      
//  degree of care, as the receiver uses to protect receiver's own     
//  Confidential Information.                                          
//  Licensee acknowledges and agrees that all output generated for     
//  Licensee by Synopsys, Inc. as described in the pertinent Program   
//  Schedule(s), or generated by Licensee through use of any Compiler  
//  licensed hereunder contains information that complies with the     
//  Virtual Component Identification Physical Tagging Standard (VCID)  
//  as maintained by the Virtual Socket Interface Alliance (VSIA).     
//  Such information may be expressed in GDSII Layer 63 or other such  
//  layer designated by the VSIA, hardware definition languages, or    
//  other formats.  Licensee is not authorized to alter or change any  
//  such information.                                                  
//---------------------------------------------------------------------
//                                                                     
//  Built for linux64 and running on linux64.                          
//                                                                     
//  Software           : Rev: S-2021.09-SP1                            
//  Library Format     : Rev: 1.05.00                                  
//  Compiler Name      : gf22nsd42p11s1drl128sa04p1                    
//  Platform           : Linux3.10.0-957.5.1.el7.x86_64                
//                     : #1 SMP Wed Dec 19 10:46:58 EST 2018x86_64     
//  Date of Generation : Fri May 06 10:36:09 CEST 2022                 
//                                                                     
//---------------------------------------------------------------------
//This file may be generated under license from a third party.The use of a file
//generated under such license is restricted for use only by permitted licensees
//of such party. The file format is the proprietary and copyrighted property of
//such third licensors , and may be subject to restrictions on its use and 
//disclosure. 
// During ATPG, SWT pin needs to be constrained to '0'.
//   --------------------------------------------------------------     
//                       Template Revision : 4.5.4                      
//   --------------------------------------------------------------     
//                 * Synchronous, 2-Port Register File *              
//                           * Fastscan Model *                       
//                THIS IS A SYNCHRONOUS 2-PORT MEMORY MODEL           
//                                                                    
//   Memory Name:SNPS_RF_SP_UHS_1Kx80                                 
//   Memory Size:1024 words x 80 bits                                 
//                                                                    
//                               PORT NAME                            
//                               ---------                            
//               Output Ports                                         
//                                   QB[79:0]                         
//               Input Ports:                                         
//                                   ADRA[9:0]                        
//                                   DA[79:0]                         
//                                   WEA                              
//                                   MEA                              
//                                   CLKA                             
//                                   TEST1A                           
//                                   RMEA                             
//                                   RMA[2:0]                         
//                                   LS                               
//                                   ADRB[9:0]                        
//                                   MEB                              
//                                   CLKB                             
//                                   TEST1B                           
//                                   RMEB                             
//                                   RMB[2:0]                         

model SNPS_RF_SP_UHS_1Kx80_mem_atpg (  QB, ADRA, DA, WEA, MEA, CLKA, TEST1A, 
RMEA, RMA, LS, ADRB, MEB, CLKB, TEST1B, RMEB, RMB ) (



  input (ADRA) (array = 9:0;)
  input (DA) (array = 79:0;)
  input (WEA) ( active = high; )
  input (MEA) ( active = high; )
  input (CLKA) ( clock = rise_edge; )
  input (TEST1A) ( used = false; ) // not supported 
  input (RMEA) ( used = false; ) // not supported 
  input (RMA) (array = 2:0; used = false;)// not supported
  input (LS) ( used = false; ) // not supported 
  input (ADRB) (array = 9:0;)
  input (MEB) ( active = high; )
  input (CLKB) ( clock = rise_edge; )
  input (TEST1B) ( used = false; ) // not supported 
  input (RMEB) ( used = false; ) // not supported 
  input (RMB) (array = 2:0; used = false;)// not supported
intern ( wma_en ) (function = WEA * MEA ; )
intern ( rmb_en ) (function = MEB; )
// This is RAM Model Part A
output ( QB )(
    array = 79:0;
    data_size = 80;
    address_size = 10;
    min_address = 0;
    max_address = 1023;
    read_write_conflict = XW;
    edge_trigger = RW;
    primitive = _cram(,,
    _read{,h,h,h} (,CLKB,rmb_en ,
        ADRB<9>, ADRB<8>, ADRB<7>, ADRB<6>, ADRB<5>, ADRB<4>, ADRB<3>, ADRB<2>, 
ADRB<1>, ADRB<0>,
        QB
      ),
    _write{H,H,H} (CLKA,wma_en,
         ADRA<9>, ADRA<8>, ADRA<7>, ADRA<6>, ADRA<5>, ADRA<4>, ADRA<3>, ADRA<2>, 
ADRA<1>, ADRA<0>,
         DA<79>, DA<78>, DA<77>, DA<76>, DA<75>, DA<74>, DA<73>, DA<72>, DA<71>, 
DA<70>, DA<69>, DA<68>, DA<67>, DA<66>, DA<65>, DA<64>, DA<63>, DA<62>, DA<61>, 
DA<60>, DA<59>, DA<58>, DA<57>, DA<56>, DA<55>, DA<54>, DA<53>, DA<52>, DA<51>, 
DA<50>, DA<49>, DA<48>, DA<47>, DA<46>, DA<45>, DA<44>, DA<43>, DA<42>, DA<41>, 
DA<40>, DA<39>, DA<38>, DA<37>, DA<36>, DA<35>, DA<34>, DA<33>, DA<32>, DA<31>, 
DA<30>, DA<29>, DA<28>, DA<27>, DA<26>, DA<25>, DA<24>, DA<23>, DA<22>, DA<21>, 
DA<20>, DA<19>, DA<18>, DA<17>, DA<16>, DA<15>, DA<14>, DA<13>, DA<12>, DA<11>, 
DA<10>, DA<9>, DA<8>, DA<7>, DA<6>, DA<5>, DA<4>, DA<3>, DA<2>, DA<1>, DA<0>
      ) 
    );
   )
  )
