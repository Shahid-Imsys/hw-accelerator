//---------------------------------------------------------------------
//               Copyright(c) Synopsys, Inc.                           
//     All Rights reserved - Unpublished -rights reserved under        
//     the Copyright laws of the United States of America.             
//                                                                     
//  U.S. Patents: 7,093,156 B1 and 7,406,620 B2 (and more pending).    
//                                                                     
//  This file includes the Confidential information of Synopsys, Inc.  
//  and GLOBALFOUNDRIES.                                               
//  The receiver of this Confidential Information shall not disclose   
//  it to any third party and shall protect its confidentiality by     
//  using the same degree of care, but not less than a reasonable      
//  degree of care, as the receiver uses to protect receiver's own     
//  Confidential Information.                                          
//  Licensee acknowledges and agrees that all output generated for     
//  Licensee by Synopsys, Inc. as described in the pertinent Program   
//  Schedule(s), or generated by Licensee through use of any Compiler  
//  licensed hereunder contains information that complies with the     
//  Virtual Component Identification Physical Tagging Standard (VCID)  
//  as maintained by the Virtual Socket Interface Alliance (VSIA).     
//  Such information may be expressed in GDSII Layer 63 or other such  
//  layer designated by the VSIA, hardware definition languages, or    
//  other formats.  Licensee is not authorized to alter or change any  
//  such information.                                                  
//---------------------------------------------------------------------
//                                                                     
//  Built for linux64 and running on linux64.                          
//                                                                     
//  Software           : Rev: U-2022.12                                
//  Library Format     : Rev: 1.05.00                                  
//  Compiler Name      : gf22nsd42p11s1drl128sa04p1                    
//  Platform           : Linux3.10.0-957.5.1.el7.x86_64                
//                     : #1 SMP Wed Dec 19 10:46:58 EST 2018x86_64     
//  Date of Generation : Fri Dec 09 16:07:41 CET 2022                  
//                                                                     
//---------------------------------------------------------------------
//   --------------------------------------------------------------     
//                       Template Revision : 4.5.4                      
//   --------------------------------------------------------------     
//                 * Synchronous, 2-Port Register File *              
//                    * Verilog Behavioral/RTL Model *                
//                THIS IS A SYNCHRONOUS 2-PORT MEMORY MODEL           
//                                                                    
//   Memory Name:SNPS_RF_DP_HD_256x80                                 
//   Memory Size:256 words x 80 bits                                  
//                                                                    
//                               PORT NAME                            
//                               ---------                            
//               Output Ports                                         
//                                   QB[79:0]                         
//               Input Ports:                                         
//                                   ADRA[7:0]                        
//                                   DA[79:0]                         
//                                   WEA                              
//                                   MEA                              
//                                   CLKA                             
//                                   TEST1A                           
//                                   TEST_RNMA                        
//                                   RMEA                             
//                                   RMA[3:0]                         
//                                   WA[1:0]                          
//                                   WPULSE[2:0]                      
//                                   LS                               
//                                   ADRB[7:0]                        
//                                   MEB                              
//                                   CLKB                             
//                                   TEST1B                           
//                                   RMEB                             
//                                   RMB[3:0]                         

// -------------------------------------------------------------------- 
// This instance is generated with Periphery_Vt = ULTRALOW option.    
// -------------------------------------------------------------------- 
`resetall 




`timescale 1 ns / 1 ps 
`celldefine 
`ifdef verifault // for fault simulation purpose 
`suppress_faults 
`enable_portfaults 
`endif 
`define True    1'b1
`define False   1'b0




module SNPS_RF_DP_HD_256x80 ( QB, ADRA, DA, WEA, MEA, CLKA, TEST1A, TEST_RNMA, RMEA, RMA, WA, WPULSE, LS, ADRB, MEB, CLKB, TEST1B, RMEB, RMB);

output  [79:0] QB;
input  [7:0] ADRA;
input  [79:0] DA;
input WEA;
input MEA;
input CLKA;
input TEST1A;
input TEST_RNMA;
input RMEA;
input  [3:0] RMA;
input  [1:0] WA;
input  [2:0] WPULSE;
input LS;
input  [7:0] ADRB;
input MEB;
input CLKB;
input TEST1B;
input RMEB;
input  [3:0] RMB;


// Local registers, wires, etc

`ifdef MEM_CHECK_OFF
parameter MES_CNTRL = "OFF";
`else
parameter MES_CNTRL = "ON";
`endif // MEM_CHECK_OFF
parameter MemFault_Inj = 0;

`ifndef MES_CNTRL_DEL_BEGIN
  `define MES_CNTRL_DEL_BEGIN 0
`endif

`ifndef MES_CNTRL_DEL_END
  `define MES_CNTRL_DEL_END 0
`endif
parameter MesCntrl_Begin = `MES_CNTRL_DEL_BEGIN;
parameter MesCntrl_End = `MES_CNTRL_DEL_END;


`ifdef VIRAGE_IGNORE_SAME_ADDR_MSG
parameter debug_mode = 0;
`else
parameter debug_mode = 1;
`endif // VIRAGE_IGNORE_SAME_ADDR_MSG

`ifdef VIRAGE_FAST_VERILOG
`else
// Notifiers Declaration
reg notif_adra;
wire [79:0] notif_da;
reg notif_da_79, notif_da_78, notif_da_77, notif_da_76, notif_da_75, notif_da_74, notif_da_73, notif_da_72, notif_da_71, notif_da_70, notif_da_69, notif_da_68, notif_da_67, notif_da_66, notif_da_65, notif_da_64, notif_da_63, notif_da_62, notif_da_61, notif_da_60, notif_da_59, notif_da_58, notif_da_57, notif_da_56, notif_da_55, notif_da_54, notif_da_53, notif_da_52, notif_da_51, notif_da_50, notif_da_49, notif_da_48, notif_da_47, notif_da_46, notif_da_45, notif_da_44, notif_da_43, notif_da_42, notif_da_41, notif_da_40, notif_da_39, notif_da_38, notif_da_37, notif_da_36, notif_da_35, notif_da_34, notif_da_33, notif_da_32, notif_da_31, notif_da_30, notif_da_29, notif_da_28, notif_da_27, notif_da_26, notif_da_25, notif_da_24, notif_da_23, notif_da_22, notif_da_21, notif_da_20, notif_da_19, notif_da_18, notif_da_17, notif_da_16, notif_da_15, notif_da_14, notif_da_13, notif_da_12, notif_da_11, notif_da_10, notif_da_9, notif_da_8, notif_da_7, notif_da_6, notif_da_5, notif_da_4, notif_da_3, notif_da_2, notif_da_1, 
notif_da_0;
reg notif_wea;
reg notif_mea;
reg notif_clka;
reg notif_clkap;
reg notif_clka_CLKB_rise_rise_rec;
reg notif_test1a;
reg notif_test_rnma;
reg notif_rmea;
reg notif_rma;
reg notif_wa;
reg notif_wpulse;
reg notif_ls_a;
reg notif_ls_b;
reg notif_adrb;
reg notif_meb;
reg notif_clkb;
reg notif_clkbp;
reg notif_clkb_CLKA_rise_rise_rec;
reg notif_test1b;
reg notif_rmeb;
reg notif_rmb;
`endif // VIRAGE_FAST_VERILOG
reg  [7 : 0 ] ADRA_buf_L;
reg  [7 : 0 ] ADRA_pre;
reg flag_ADRA_x;
reg  MEA_pre;
reg [79:0] DA_pre;
reg  WEA_pre;
reg  CLKB_tcq;
reg  [7 : 0 ] ADRB_buf_L;
reg  [7 : 0 ] ADRB_pre;
reg flag_ADRB_x;
reg  MEB_pre;




wire [79:0] QB_final;

`ifdef VIRAGE_FAST_VERILOG
wire [79:0] QB_buf;
assign QB[0] = QB_buf[0];
assign QB[1] = QB_buf[1];
assign QB[2] = QB_buf[2];
assign QB[3] = QB_buf[3];
assign QB[4] = QB_buf[4];
assign QB[5] = QB_buf[5];
assign QB[6] = QB_buf[6];
assign QB[7] = QB_buf[7];
assign QB[8] = QB_buf[8];
assign QB[9] = QB_buf[9];
assign QB[10] = QB_buf[10];
assign QB[11] = QB_buf[11];
assign QB[12] = QB_buf[12];
assign QB[13] = QB_buf[13];
assign QB[14] = QB_buf[14];
assign QB[15] = QB_buf[15];
assign QB[16] = QB_buf[16];
assign QB[17] = QB_buf[17];
assign QB[18] = QB_buf[18];
assign QB[19] = QB_buf[19];
assign QB[20] = QB_buf[20];
assign QB[21] = QB_buf[21];
assign QB[22] = QB_buf[22];
assign QB[23] = QB_buf[23];
assign QB[24] = QB_buf[24];
assign QB[25] = QB_buf[25];
assign QB[26] = QB_buf[26];
assign QB[27] = QB_buf[27];
assign QB[28] = QB_buf[28];
assign QB[29] = QB_buf[29];
assign QB[30] = QB_buf[30];
assign QB[31] = QB_buf[31];
assign QB[32] = QB_buf[32];
assign QB[33] = QB_buf[33];
assign QB[34] = QB_buf[34];
assign QB[35] = QB_buf[35];
assign QB[36] = QB_buf[36];
assign QB[37] = QB_buf[37];
assign QB[38] = QB_buf[38];
assign QB[39] = QB_buf[39];
assign QB[40] = QB_buf[40];
assign QB[41] = QB_buf[41];
assign QB[42] = QB_buf[42];
assign QB[43] = QB_buf[43];
assign QB[44] = QB_buf[44];
assign QB[45] = QB_buf[45];
assign QB[46] = QB_buf[46];
assign QB[47] = QB_buf[47];
assign QB[48] = QB_buf[48];
assign QB[49] = QB_buf[49];
assign QB[50] = QB_buf[50];
assign QB[51] = QB_buf[51];
assign QB[52] = QB_buf[52];
assign QB[53] = QB_buf[53];
assign QB[54] = QB_buf[54];
assign QB[55] = QB_buf[55];
assign QB[56] = QB_buf[56];
assign QB[57] = QB_buf[57];
assign QB[58] = QB_buf[58];
assign QB[59] = QB_buf[59];
assign QB[60] = QB_buf[60];
assign QB[61] = QB_buf[61];
assign QB[62] = QB_buf[62];
assign QB[63] = QB_buf[63];
assign QB[64] = QB_buf[64];
assign QB[65] = QB_buf[65];
assign QB[66] = QB_buf[66];
assign QB[67] = QB_buf[67];
assign QB[68] = QB_buf[68];
assign QB[69] = QB_buf[69];
assign QB[70] = QB_buf[70];
assign QB[71] = QB_buf[71];
assign QB[72] = QB_buf[72];
assign QB[73] = QB_buf[73];
assign QB[74] = QB_buf[74];
assign QB[75] = QB_buf[75];
assign QB[76] = QB_buf[76];
assign QB[77] = QB_buf[77];
assign QB[78] = QB_buf[78];
assign QB[79] = QB_buf[79];
wire [7:0] ADRA_buf;
assign  ADRA_buf[0] = (ADRA[0] === 1'bZ) ? 1'bX : ( ADRA[0]);
assign  ADRA_buf[1] = (ADRA[1] === 1'bZ) ? 1'bX : ( ADRA[1]);
assign  ADRA_buf[2] = (ADRA[2] === 1'bZ) ? 1'bX : ( ADRA[2]);
assign  ADRA_buf[3] = (ADRA[3] === 1'bZ) ? 1'bX : ( ADRA[3]);
assign  ADRA_buf[4] = (ADRA[4] === 1'bZ) ? 1'bX : ( ADRA[4]);
assign  ADRA_buf[5] = (ADRA[5] === 1'bZ) ? 1'bX : ( ADRA[5]);
assign  ADRA_buf[6] = (ADRA[6] === 1'bZ) ? 1'bX : ( ADRA[6]);
assign  ADRA_buf[7] = (ADRA[7] === 1'bZ) ? 1'bX : ( ADRA[7]);
wire [79:0] DA_buf;
assign  DA_buf[0] = (DA[0] === 1'bZ) ? 1'bX : ( DA[0]);
assign  DA_buf[1] = (DA[1] === 1'bZ) ? 1'bX : ( DA[1]);
assign  DA_buf[2] = (DA[2] === 1'bZ) ? 1'bX : ( DA[2]);
assign  DA_buf[3] = (DA[3] === 1'bZ) ? 1'bX : ( DA[3]);
assign  DA_buf[4] = (DA[4] === 1'bZ) ? 1'bX : ( DA[4]);
assign  DA_buf[5] = (DA[5] === 1'bZ) ? 1'bX : ( DA[5]);
assign  DA_buf[6] = (DA[6] === 1'bZ) ? 1'bX : ( DA[6]);
assign  DA_buf[7] = (DA[7] === 1'bZ) ? 1'bX : ( DA[7]);
assign  DA_buf[8] = (DA[8] === 1'bZ) ? 1'bX : ( DA[8]);
assign  DA_buf[9] = (DA[9] === 1'bZ) ? 1'bX : ( DA[9]);
assign  DA_buf[10] = (DA[10] === 1'bZ) ? 1'bX : ( DA[10]);
assign  DA_buf[11] = (DA[11] === 1'bZ) ? 1'bX : ( DA[11]);
assign  DA_buf[12] = (DA[12] === 1'bZ) ? 1'bX : ( DA[12]);
assign  DA_buf[13] = (DA[13] === 1'bZ) ? 1'bX : ( DA[13]);
assign  DA_buf[14] = (DA[14] === 1'bZ) ? 1'bX : ( DA[14]);
assign  DA_buf[15] = (DA[15] === 1'bZ) ? 1'bX : ( DA[15]);
assign  DA_buf[16] = (DA[16] === 1'bZ) ? 1'bX : ( DA[16]);
assign  DA_buf[17] = (DA[17] === 1'bZ) ? 1'bX : ( DA[17]);
assign  DA_buf[18] = (DA[18] === 1'bZ) ? 1'bX : ( DA[18]);
assign  DA_buf[19] = (DA[19] === 1'bZ) ? 1'bX : ( DA[19]);
assign  DA_buf[20] = (DA[20] === 1'bZ) ? 1'bX : ( DA[20]);
assign  DA_buf[21] = (DA[21] === 1'bZ) ? 1'bX : ( DA[21]);
assign  DA_buf[22] = (DA[22] === 1'bZ) ? 1'bX : ( DA[22]);
assign  DA_buf[23] = (DA[23] === 1'bZ) ? 1'bX : ( DA[23]);
assign  DA_buf[24] = (DA[24] === 1'bZ) ? 1'bX : ( DA[24]);
assign  DA_buf[25] = (DA[25] === 1'bZ) ? 1'bX : ( DA[25]);
assign  DA_buf[26] = (DA[26] === 1'bZ) ? 1'bX : ( DA[26]);
assign  DA_buf[27] = (DA[27] === 1'bZ) ? 1'bX : ( DA[27]);
assign  DA_buf[28] = (DA[28] === 1'bZ) ? 1'bX : ( DA[28]);
assign  DA_buf[29] = (DA[29] === 1'bZ) ? 1'bX : ( DA[29]);
assign  DA_buf[30] = (DA[30] === 1'bZ) ? 1'bX : ( DA[30]);
assign  DA_buf[31] = (DA[31] === 1'bZ) ? 1'bX : ( DA[31]);
assign  DA_buf[32] = (DA[32] === 1'bZ) ? 1'bX : ( DA[32]);
assign  DA_buf[33] = (DA[33] === 1'bZ) ? 1'bX : ( DA[33]);
assign  DA_buf[34] = (DA[34] === 1'bZ) ? 1'bX : ( DA[34]);
assign  DA_buf[35] = (DA[35] === 1'bZ) ? 1'bX : ( DA[35]);
assign  DA_buf[36] = (DA[36] === 1'bZ) ? 1'bX : ( DA[36]);
assign  DA_buf[37] = (DA[37] === 1'bZ) ? 1'bX : ( DA[37]);
assign  DA_buf[38] = (DA[38] === 1'bZ) ? 1'bX : ( DA[38]);
assign  DA_buf[39] = (DA[39] === 1'bZ) ? 1'bX : ( DA[39]);
assign  DA_buf[40] = (DA[40] === 1'bZ) ? 1'bX : ( DA[40]);
assign  DA_buf[41] = (DA[41] === 1'bZ) ? 1'bX : ( DA[41]);
assign  DA_buf[42] = (DA[42] === 1'bZ) ? 1'bX : ( DA[42]);
assign  DA_buf[43] = (DA[43] === 1'bZ) ? 1'bX : ( DA[43]);
assign  DA_buf[44] = (DA[44] === 1'bZ) ? 1'bX : ( DA[44]);
assign  DA_buf[45] = (DA[45] === 1'bZ) ? 1'bX : ( DA[45]);
assign  DA_buf[46] = (DA[46] === 1'bZ) ? 1'bX : ( DA[46]);
assign  DA_buf[47] = (DA[47] === 1'bZ) ? 1'bX : ( DA[47]);
assign  DA_buf[48] = (DA[48] === 1'bZ) ? 1'bX : ( DA[48]);
assign  DA_buf[49] = (DA[49] === 1'bZ) ? 1'bX : ( DA[49]);
assign  DA_buf[50] = (DA[50] === 1'bZ) ? 1'bX : ( DA[50]);
assign  DA_buf[51] = (DA[51] === 1'bZ) ? 1'bX : ( DA[51]);
assign  DA_buf[52] = (DA[52] === 1'bZ) ? 1'bX : ( DA[52]);
assign  DA_buf[53] = (DA[53] === 1'bZ) ? 1'bX : ( DA[53]);
assign  DA_buf[54] = (DA[54] === 1'bZ) ? 1'bX : ( DA[54]);
assign  DA_buf[55] = (DA[55] === 1'bZ) ? 1'bX : ( DA[55]);
assign  DA_buf[56] = (DA[56] === 1'bZ) ? 1'bX : ( DA[56]);
assign  DA_buf[57] = (DA[57] === 1'bZ) ? 1'bX : ( DA[57]);
assign  DA_buf[58] = (DA[58] === 1'bZ) ? 1'bX : ( DA[58]);
assign  DA_buf[59] = (DA[59] === 1'bZ) ? 1'bX : ( DA[59]);
assign  DA_buf[60] = (DA[60] === 1'bZ) ? 1'bX : ( DA[60]);
assign  DA_buf[61] = (DA[61] === 1'bZ) ? 1'bX : ( DA[61]);
assign  DA_buf[62] = (DA[62] === 1'bZ) ? 1'bX : ( DA[62]);
assign  DA_buf[63] = (DA[63] === 1'bZ) ? 1'bX : ( DA[63]);
assign  DA_buf[64] = (DA[64] === 1'bZ) ? 1'bX : ( DA[64]);
assign  DA_buf[65] = (DA[65] === 1'bZ) ? 1'bX : ( DA[65]);
assign  DA_buf[66] = (DA[66] === 1'bZ) ? 1'bX : ( DA[66]);
assign  DA_buf[67] = (DA[67] === 1'bZ) ? 1'bX : ( DA[67]);
assign  DA_buf[68] = (DA[68] === 1'bZ) ? 1'bX : ( DA[68]);
assign  DA_buf[69] = (DA[69] === 1'bZ) ? 1'bX : ( DA[69]);
assign  DA_buf[70] = (DA[70] === 1'bZ) ? 1'bX : ( DA[70]);
assign  DA_buf[71] = (DA[71] === 1'bZ) ? 1'bX : ( DA[71]);
assign  DA_buf[72] = (DA[72] === 1'bZ) ? 1'bX : ( DA[72]);
assign  DA_buf[73] = (DA[73] === 1'bZ) ? 1'bX : ( DA[73]);
assign  DA_buf[74] = (DA[74] === 1'bZ) ? 1'bX : ( DA[74]);
assign  DA_buf[75] = (DA[75] === 1'bZ) ? 1'bX : ( DA[75]);
assign  DA_buf[76] = (DA[76] === 1'bZ) ? 1'bX : ( DA[76]);
assign  DA_buf[77] = (DA[77] === 1'bZ) ? 1'bX : ( DA[77]);
assign  DA_buf[78] = (DA[78] === 1'bZ) ? 1'bX : ( DA[78]);
assign  DA_buf[79] = (DA[79] === 1'bZ) ? 1'bX : ( DA[79]);
wire WEA_buf;
assign  WEA_buf = (WEA === 1'bZ) ? 1'bX : ( WEA);
wire MEA_buf;
assign  MEA_buf = (MEA === 1'bZ) ? 1'bX : ( MEA);
wire CLKA_buf;
assign  CLKA_buf = (CLKA === 1'bZ) ? 1'bX : ( CLKA);
wire TEST1A_buf;
assign  TEST1A_buf = (TEST1A === 1'bZ) ? 1'bX : ( TEST1A);
wire TEST_RNMA_buf;
assign  TEST_RNMA_buf = (TEST_RNMA === 1'bZ) ? 1'bX : ( TEST_RNMA);
wire RMEA_buf;
assign  RMEA_buf = (RMEA === 1'bZ) ? 1'bX : ( RMEA);
wire [3:0] RMA_buf;
wire [2:0] RMA_int;
assign  RMA_buf[0] = (RMA[0] === 1'bZ) ? 1'bX : ( RMA[0]);
assign  RMA_buf[1] = (RMA[1] === 1'bZ) ? 1'bX : ( RMA[1]);
assign  RMA_buf[2] = (RMA[2] === 1'bZ) ? 1'bX : ( RMA[2]);
assign  RMA_buf[3] = (RMA[3] === 1'bZ) ? 1'bX : ( RMA[3]);
wire [1:0] WA_buf;
assign  WA_buf[0] = (WA[0] === 1'bZ) ? 1'bX : ( WA[0]);
assign  WA_buf[1] = (WA[1] === 1'bZ) ? 1'bX : ( WA[1]);
wire [2:0] WPULSE_buf;
assign  WPULSE_buf[0] = (WPULSE[0] === 1'bZ) ? 1'bX : ( WPULSE[0]);
assign  WPULSE_buf[1] = (WPULSE[1] === 1'bZ) ? 1'bX : ( WPULSE[1]);
assign  WPULSE_buf[2] = (WPULSE[2] === 1'bZ) ? 1'bX : ( WPULSE[2]);
wire LS_buf;
assign  LS_buf = (LS === 1'bZ) ? 1'bX : ( LS);
wire [7:0] ADRB_buf;
assign  ADRB_buf[0] = (ADRB[0] === 1'bZ) ? 1'bX : ( ADRB[0]);
assign  ADRB_buf[1] = (ADRB[1] === 1'bZ) ? 1'bX : ( ADRB[1]);
assign  ADRB_buf[2] = (ADRB[2] === 1'bZ) ? 1'bX : ( ADRB[2]);
assign  ADRB_buf[3] = (ADRB[3] === 1'bZ) ? 1'bX : ( ADRB[3]);
assign  ADRB_buf[4] = (ADRB[4] === 1'bZ) ? 1'bX : ( ADRB[4]);
assign  ADRB_buf[5] = (ADRB[5] === 1'bZ) ? 1'bX : ( ADRB[5]);
assign  ADRB_buf[6] = (ADRB[6] === 1'bZ) ? 1'bX : ( ADRB[6]);
assign  ADRB_buf[7] = (ADRB[7] === 1'bZ) ? 1'bX : ( ADRB[7]);
wire MEB_buf;
assign  MEB_buf = (MEB === 1'bZ) ? 1'bX : ( MEB);
wire CLKB_buf;
assign  CLKB_buf = (CLKB === 1'bZ) ? 1'bX : ( CLKB);
wire TEST1B_buf;
assign  TEST1B_buf = (TEST1B === 1'bZ) ? 1'bX : ( TEST1B);
wire RMEB_buf;
assign  RMEB_buf = (RMEB === 1'bZ) ? 1'bX : ( RMEB);
wire [3:0] RMB_buf;
wire [2:0] RMB_int;
assign  RMB_buf[0] = (RMB[0] === 1'bZ) ? 1'bX : ( RMB[0]);
assign  RMB_buf[1] = (RMB[1] === 1'bZ) ? 1'bX : ( RMB[1]);
assign  RMB_buf[2] = (RMB[2] === 1'bZ) ? 1'bX : ( RMB[2]);
assign  RMB_buf[3] = (RMB[3] === 1'bZ) ? 1'bX : ( RMB[3]);
`else
wire [79:0] QB_buf;
buf (QB[0], QB_buf[0]);
buf (QB_final[0],QB[0]);
buf (QB[1], QB_buf[1]);
buf (QB_final[1],QB[1]);
buf (QB[2], QB_buf[2]);
buf (QB_final[2],QB[2]);
buf (QB[3], QB_buf[3]);
buf (QB_final[3],QB[3]);
buf (QB[4], QB_buf[4]);
buf (QB_final[4],QB[4]);
buf (QB[5], QB_buf[5]);
buf (QB_final[5],QB[5]);
buf (QB[6], QB_buf[6]);
buf (QB_final[6],QB[6]);
buf (QB[7], QB_buf[7]);
buf (QB_final[7],QB[7]);
buf (QB[8], QB_buf[8]);
buf (QB_final[8],QB[8]);
buf (QB[9], QB_buf[9]);
buf (QB_final[9],QB[9]);
buf (QB[10], QB_buf[10]);
buf (QB_final[10],QB[10]);
buf (QB[11], QB_buf[11]);
buf (QB_final[11],QB[11]);
buf (QB[12], QB_buf[12]);
buf (QB_final[12],QB[12]);
buf (QB[13], QB_buf[13]);
buf (QB_final[13],QB[13]);
buf (QB[14], QB_buf[14]);
buf (QB_final[14],QB[14]);
buf (QB[15], QB_buf[15]);
buf (QB_final[15],QB[15]);
buf (QB[16], QB_buf[16]);
buf (QB_final[16],QB[16]);
buf (QB[17], QB_buf[17]);
buf (QB_final[17],QB[17]);
buf (QB[18], QB_buf[18]);
buf (QB_final[18],QB[18]);
buf (QB[19], QB_buf[19]);
buf (QB_final[19],QB[19]);
buf (QB[20], QB_buf[20]);
buf (QB_final[20],QB[20]);
buf (QB[21], QB_buf[21]);
buf (QB_final[21],QB[21]);
buf (QB[22], QB_buf[22]);
buf (QB_final[22],QB[22]);
buf (QB[23], QB_buf[23]);
buf (QB_final[23],QB[23]);
buf (QB[24], QB_buf[24]);
buf (QB_final[24],QB[24]);
buf (QB[25], QB_buf[25]);
buf (QB_final[25],QB[25]);
buf (QB[26], QB_buf[26]);
buf (QB_final[26],QB[26]);
buf (QB[27], QB_buf[27]);
buf (QB_final[27],QB[27]);
buf (QB[28], QB_buf[28]);
buf (QB_final[28],QB[28]);
buf (QB[29], QB_buf[29]);
buf (QB_final[29],QB[29]);
buf (QB[30], QB_buf[30]);
buf (QB_final[30],QB[30]);
buf (QB[31], QB_buf[31]);
buf (QB_final[31],QB[31]);
buf (QB[32], QB_buf[32]);
buf (QB_final[32],QB[32]);
buf (QB[33], QB_buf[33]);
buf (QB_final[33],QB[33]);
buf (QB[34], QB_buf[34]);
buf (QB_final[34],QB[34]);
buf (QB[35], QB_buf[35]);
buf (QB_final[35],QB[35]);
buf (QB[36], QB_buf[36]);
buf (QB_final[36],QB[36]);
buf (QB[37], QB_buf[37]);
buf (QB_final[37],QB[37]);
buf (QB[38], QB_buf[38]);
buf (QB_final[38],QB[38]);
buf (QB[39], QB_buf[39]);
buf (QB_final[39],QB[39]);
buf (QB[40], QB_buf[40]);
buf (QB_final[40],QB[40]);
buf (QB[41], QB_buf[41]);
buf (QB_final[41],QB[41]);
buf (QB[42], QB_buf[42]);
buf (QB_final[42],QB[42]);
buf (QB[43], QB_buf[43]);
buf (QB_final[43],QB[43]);
buf (QB[44], QB_buf[44]);
buf (QB_final[44],QB[44]);
buf (QB[45], QB_buf[45]);
buf (QB_final[45],QB[45]);
buf (QB[46], QB_buf[46]);
buf (QB_final[46],QB[46]);
buf (QB[47], QB_buf[47]);
buf (QB_final[47],QB[47]);
buf (QB[48], QB_buf[48]);
buf (QB_final[48],QB[48]);
buf (QB[49], QB_buf[49]);
buf (QB_final[49],QB[49]);
buf (QB[50], QB_buf[50]);
buf (QB_final[50],QB[50]);
buf (QB[51], QB_buf[51]);
buf (QB_final[51],QB[51]);
buf (QB[52], QB_buf[52]);
buf (QB_final[52],QB[52]);
buf (QB[53], QB_buf[53]);
buf (QB_final[53],QB[53]);
buf (QB[54], QB_buf[54]);
buf (QB_final[54],QB[54]);
buf (QB[55], QB_buf[55]);
buf (QB_final[55],QB[55]);
buf (QB[56], QB_buf[56]);
buf (QB_final[56],QB[56]);
buf (QB[57], QB_buf[57]);
buf (QB_final[57],QB[57]);
buf (QB[58], QB_buf[58]);
buf (QB_final[58],QB[58]);
buf (QB[59], QB_buf[59]);
buf (QB_final[59],QB[59]);
buf (QB[60], QB_buf[60]);
buf (QB_final[60],QB[60]);
buf (QB[61], QB_buf[61]);
buf (QB_final[61],QB[61]);
buf (QB[62], QB_buf[62]);
buf (QB_final[62],QB[62]);
buf (QB[63], QB_buf[63]);
buf (QB_final[63],QB[63]);
buf (QB[64], QB_buf[64]);
buf (QB_final[64],QB[64]);
buf (QB[65], QB_buf[65]);
buf (QB_final[65],QB[65]);
buf (QB[66], QB_buf[66]);
buf (QB_final[66],QB[66]);
buf (QB[67], QB_buf[67]);
buf (QB_final[67],QB[67]);
buf (QB[68], QB_buf[68]);
buf (QB_final[68],QB[68]);
buf (QB[69], QB_buf[69]);
buf (QB_final[69],QB[69]);
buf (QB[70], QB_buf[70]);
buf (QB_final[70],QB[70]);
buf (QB[71], QB_buf[71]);
buf (QB_final[71],QB[71]);
buf (QB[72], QB_buf[72]);
buf (QB_final[72],QB[72]);
buf (QB[73], QB_buf[73]);
buf (QB_final[73],QB[73]);
buf (QB[74], QB_buf[74]);
buf (QB_final[74],QB[74]);
buf (QB[75], QB_buf[75]);
buf (QB_final[75],QB[75]);
buf (QB[76], QB_buf[76]);
buf (QB_final[76],QB[76]);
buf (QB[77], QB_buf[77]);
buf (QB_final[77],QB[77]);
buf (QB[78], QB_buf[78]);
buf (QB_final[78],QB[78]);
buf (QB[79], QB_buf[79]);
buf (QB_final[79],QB[79]);
wire [7:0] ADRA_buf;
wire [7:0] delayed_ADRA;
buf (ADRA_buf[0], delayed_ADRA[0]);
buf (ADRA_buf[1], delayed_ADRA[1]);
buf (ADRA_buf[2], delayed_ADRA[2]);
buf (ADRA_buf[3], delayed_ADRA[3]);
buf (ADRA_buf[4], delayed_ADRA[4]);
buf (ADRA_buf[5], delayed_ADRA[5]);
buf (ADRA_buf[6], delayed_ADRA[6]);
buf (ADRA_buf[7], delayed_ADRA[7]);
wire [79:0] DA_buf;
wire [79:0] delayed_DA;
buf (DA_buf[0], delayed_DA[0]);
buf (DA_buf[1], delayed_DA[1]);
buf (DA_buf[2], delayed_DA[2]);
buf (DA_buf[3], delayed_DA[3]);
buf (DA_buf[4], delayed_DA[4]);
buf (DA_buf[5], delayed_DA[5]);
buf (DA_buf[6], delayed_DA[6]);
buf (DA_buf[7], delayed_DA[7]);
buf (DA_buf[8], delayed_DA[8]);
buf (DA_buf[9], delayed_DA[9]);
buf (DA_buf[10], delayed_DA[10]);
buf (DA_buf[11], delayed_DA[11]);
buf (DA_buf[12], delayed_DA[12]);
buf (DA_buf[13], delayed_DA[13]);
buf (DA_buf[14], delayed_DA[14]);
buf (DA_buf[15], delayed_DA[15]);
buf (DA_buf[16], delayed_DA[16]);
buf (DA_buf[17], delayed_DA[17]);
buf (DA_buf[18], delayed_DA[18]);
buf (DA_buf[19], delayed_DA[19]);
buf (DA_buf[20], delayed_DA[20]);
buf (DA_buf[21], delayed_DA[21]);
buf (DA_buf[22], delayed_DA[22]);
buf (DA_buf[23], delayed_DA[23]);
buf (DA_buf[24], delayed_DA[24]);
buf (DA_buf[25], delayed_DA[25]);
buf (DA_buf[26], delayed_DA[26]);
buf (DA_buf[27], delayed_DA[27]);
buf (DA_buf[28], delayed_DA[28]);
buf (DA_buf[29], delayed_DA[29]);
buf (DA_buf[30], delayed_DA[30]);
buf (DA_buf[31], delayed_DA[31]);
buf (DA_buf[32], delayed_DA[32]);
buf (DA_buf[33], delayed_DA[33]);
buf (DA_buf[34], delayed_DA[34]);
buf (DA_buf[35], delayed_DA[35]);
buf (DA_buf[36], delayed_DA[36]);
buf (DA_buf[37], delayed_DA[37]);
buf (DA_buf[38], delayed_DA[38]);
buf (DA_buf[39], delayed_DA[39]);
buf (DA_buf[40], delayed_DA[40]);
buf (DA_buf[41], delayed_DA[41]);
buf (DA_buf[42], delayed_DA[42]);
buf (DA_buf[43], delayed_DA[43]);
buf (DA_buf[44], delayed_DA[44]);
buf (DA_buf[45], delayed_DA[45]);
buf (DA_buf[46], delayed_DA[46]);
buf (DA_buf[47], delayed_DA[47]);
buf (DA_buf[48], delayed_DA[48]);
buf (DA_buf[49], delayed_DA[49]);
buf (DA_buf[50], delayed_DA[50]);
buf (DA_buf[51], delayed_DA[51]);
buf (DA_buf[52], delayed_DA[52]);
buf (DA_buf[53], delayed_DA[53]);
buf (DA_buf[54], delayed_DA[54]);
buf (DA_buf[55], delayed_DA[55]);
buf (DA_buf[56], delayed_DA[56]);
buf (DA_buf[57], delayed_DA[57]);
buf (DA_buf[58], delayed_DA[58]);
buf (DA_buf[59], delayed_DA[59]);
buf (DA_buf[60], delayed_DA[60]);
buf (DA_buf[61], delayed_DA[61]);
buf (DA_buf[62], delayed_DA[62]);
buf (DA_buf[63], delayed_DA[63]);
buf (DA_buf[64], delayed_DA[64]);
buf (DA_buf[65], delayed_DA[65]);
buf (DA_buf[66], delayed_DA[66]);
buf (DA_buf[67], delayed_DA[67]);
buf (DA_buf[68], delayed_DA[68]);
buf (DA_buf[69], delayed_DA[69]);
buf (DA_buf[70], delayed_DA[70]);
buf (DA_buf[71], delayed_DA[71]);
buf (DA_buf[72], delayed_DA[72]);
buf (DA_buf[73], delayed_DA[73]);
buf (DA_buf[74], delayed_DA[74]);
buf (DA_buf[75], delayed_DA[75]);
buf (DA_buf[76], delayed_DA[76]);
buf (DA_buf[77], delayed_DA[77]);
buf (DA_buf[78], delayed_DA[78]);
buf (DA_buf[79], delayed_DA[79]);
wire delayed_WEA;
buf (WEA_buf, delayed_WEA);
wire delayed_MEA;
buf (MEA_buf, delayed_MEA);
wire delayed_CLKA;
buf (CLKA_buf, delayed_CLKA);
wire delayed_TEST1A;
buf (TEST1A_buf, delayed_TEST1A);
wire delayed_TEST_RNMA;
buf (TEST_RNMA_buf, delayed_TEST_RNMA);
wire delayed_RMEA;
buf (RMEA_buf, delayed_RMEA);
wire [2:0] RMA_int;
wire [3:0] RMA_buf;
wire [3:0] delayed_RMA;
buf (RMA_buf[0], delayed_RMA[0]);
buf (RMA_buf[1], delayed_RMA[1]);
buf (RMA_buf[2], delayed_RMA[2]);
buf (RMA_buf[3], delayed_RMA[3]);
wire [1:0] WA_buf;
wire [1:0] delayed_WA;
buf (WA_buf[0], delayed_WA[0]);
buf (WA_buf[1], delayed_WA[1]);
wire [2:0] WPULSE_buf;
wire [2:0] delayed_WPULSE;
buf (WPULSE_buf[0], delayed_WPULSE[0]);
buf (WPULSE_buf[1], delayed_WPULSE[1]);
buf (WPULSE_buf[2], delayed_WPULSE[2]);
wire delayed_LS;
buf (LS_buf, delayed_LS);
wire [7:0] ADRB_buf;
wire [7:0] delayed_ADRB;
buf (ADRB_buf[0], delayed_ADRB[0]);
buf (ADRB_buf[1], delayed_ADRB[1]);
buf (ADRB_buf[2], delayed_ADRB[2]);
buf (ADRB_buf[3], delayed_ADRB[3]);
buf (ADRB_buf[4], delayed_ADRB[4]);
buf (ADRB_buf[5], delayed_ADRB[5]);
buf (ADRB_buf[6], delayed_ADRB[6]);
buf (ADRB_buf[7], delayed_ADRB[7]);
wire delayed_MEB;
buf (MEB_buf, delayed_MEB);
wire delayed_CLKB;
buf (CLKB_buf, delayed_CLKB);
wire delayed_TEST1B;
buf (TEST1B_buf, delayed_TEST1B);
wire delayed_RMEB;
buf (RMEB_buf, delayed_RMEB);
wire [2:0] RMB_int;
wire [3:0] RMB_buf;
wire [3:0] delayed_RMB;
buf (RMB_buf[0], delayed_RMB[0]);
buf (RMB_buf[1], delayed_RMB[1]);
buf (RMB_buf[2], delayed_RMB[2]);
buf (RMB_buf[3], delayed_RMB[3]);
`endif // VIRAGE_FAST_VERILOG

// -------------------------------------------------------------------
// Tasks
// -------------------------------------------------------------------

`ifndef MEMFAULTINJ
task fault_inject;
input [7 : 0] address;
input [6:0] bit_pos;
input flt_type;
begin
  if (address < 256)
  begin
  if (uut.faultinj_en == 0)
  begin
    if (flt_type == 1)
    begin
      uut.mem_fault_array_sa1[address][bit_pos] = 1'b1 ;
      uut.mem_fault_array_sa0[address][bit_pos] = 1'b1 ;
    end
    else
    begin
      uut.mem_fault_array_sa0[address][bit_pos] = 1'b0 ;
      uut.mem_fault_array_sa1[address][bit_pos] = 1'b0 ;
    end
  end
  end
  else
  begin
    $display("\n%m<<VIRL_MEM_ERR: No fault injection for address out of range.>>(time %0t)", $time);
  end
end
endtask
`endif

reg disp_LS_msgA;
reg disp_LS_msgB;

reg en_msg_cntrl, mes_all_valid_old;
real msg_start_lmt, msg_end_lmt;
reg disp_LS_msgA_old;
reg disp_LS_msgB_old;
initial
begin : reinit_msg_blk
  disp_LS_msgA_old = 1'b1;
  disp_LS_msgB_old = 1'b1;
  if (MesCntrl_Begin < 0)
    msg_start_lmt = 0;
  else
    msg_start_lmt = MesCntrl_Begin;
  if (MesCntrl_End < 0)
    msg_end_lmt = 0;
  else
    msg_end_lmt = MesCntrl_End;
  
  if (msg_end_lmt > msg_start_lmt)
  begin
    if ($realtime > 0 )
    begin
      if (msg_start_lmt > $realtime)
      begin
        en_msg_cntrl = 1'b0;
        en_msg_cntrl <= #(msg_start_lmt - $realtime) 1'b1;
      end
      if (msg_end_lmt > $realtime)
        en_msg_cntrl <= #(msg_end_lmt - $realtime) 1'b0;
      else
        en_msg_cntrl = 1'b0;
    end
    else
    begin
      mes_all_valid_old = 1'b0;
      en_msg_cntrl = 1'b0;
      en_msg_cntrl <= #msg_start_lmt 1'b1;
      en_msg_cntrl <= #msg_end_lmt 1'b0;
    end
  end
  else
  begin
    en_msg_cntrl = 1'b0;
    if ($realtime == 0)
      mes_all_valid_old = 1'b0;
  end
end

`ifdef MES_CNTRL_PIN
always @(`MES_CNTRL_PIN)
begin
  if (msg_start_lmt == 0 && msg_end_lmt == 0)
  begin
    if (`MES_CNTRL_PIN  === `MES_CNTRL_PIN_VAL)
    begin
      en_msg_cntrl = 1;
    end
    else
    begin
      en_msg_cntrl = 0;
    end
  end
end
`endif

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @( en_msg_cntrl )
begin
  if (en_msg_cntrl !== 1'b0 )
  begin
    if (!(en_msg_cntrl === 1'bx && mes_all_valid_old === 1'b1))
    mes_all_valid_old = uut.mes_all_valid;
    assign uut.mes_all_valid = 0;
    disp_LS_msgA_old = disp_LS_msgA;
    assign disp_LS_msgA = 0;
    disp_LS_msgB_old = disp_LS_msgB;
    assign disp_LS_msgB = 0;
  end
  else
  begin
    deassign uut.mes_all_valid ;
    uut.mes_all_valid = mes_all_valid_old;
    deassign disp_LS_msgA;
    disp_LS_msgA = disp_LS_msgA_old;
    deassign disp_LS_msgB;
    disp_LS_msgB = disp_LS_msgB_old;
    `ifdef SNPS_SUPPORT_UPF_SIM
    disp_LS_msgA = 1'b1;
    disp_LS_msgB = 1'b1;
     `endif
  end
end


`ifdef VIRAGE_FAST_VERILOG
`else
// Setup/hold condition for CLK: ENCLK
wire ENCLKA;

assign ENCLKA = (( (TEST1A_buf === 1'b0))?1'b1:1'b0) ;
wire ENCLKA_test1;
assign ENCLKA_test1 = ((  (TEST1A_buf === 1'b1))?1'b1:1'b0) ;
wire ENCLKA_rmezo,ENCLKA_rm0,ENCLKA_rm1,ENCLKA_rm2,ENCLKA_rm3,ENCLKA_rm4,ENCLKA_rm5;
assign ENCLKA_rmezo = (( RMEA_buf !== 1'b1 && ( WA_buf[0] !== 1'b1 && WA_buf[1] !== 1'b0 ) && ( WPULSE_buf[0] !== 1'b1 && WPULSE_buf[1] !== 1'b1 && WPULSE_buf[2] !== 1'b1 ))?1'b1:1'b0);
assign ENCLKA_rm0 = (( RMEA_buf === 1'b1  && (RMA_buf[0] !== 1'b1 && RMA_buf[1] !== 1'b1 && RMA_buf[2] !== 1'b1 && RMA_buf[3] !== 1'b1) && ( WA_buf[0] !== 1'b0 && WA_buf[1] !== 1'b0 ) && ( WPULSE_buf[0] !== 1'b1 && WPULSE_buf[1] !== 1'b1 && WPULSE_buf[2] !== 1'b1 ) )?1'b1:1'b0);
assign ENCLKA_rm1 = (( RMEA_buf === 1'b1  && (RMA_buf[0] !== 1'b0 && RMA_buf[1] !== 1'b1 && RMA_buf[2] !== 1'b1 && RMA_buf[3] !== 1'b1) && ( WA_buf[0] !== 1'b0 && WA_buf[1] !== 1'b0 ) && ( WPULSE_buf[0] !== 1'b1 && WPULSE_buf[1] !== 1'b1 && WPULSE_buf[2] !== 1'b1 ) )?1'b1:1'b0);
assign ENCLKA_rm2 = (( RMEA_buf === 1'b1  && (RMA_buf[0] !== 1'b1 && RMA_buf[1] !== 1'b0 && RMA_buf[2] !== 1'b1 && RMA_buf[3] !== 1'b1) && ( WA_buf[0] !== 1'b1 && WA_buf[1] !== 1'b0 ) && ( WPULSE_buf[0] !== 1'b1 && WPULSE_buf[1] !== 1'b1 && WPULSE_buf[2] !== 1'b1 ) )?1'b1:1'b0);
assign ENCLKA_rm3 = (( RMEA_buf === 1'b1  && (RMA_buf[0] !== 1'b0 && RMA_buf[1] !== 1'b0 && RMA_buf[2] !== 1'b1 && RMA_buf[3] !== 1'b1) && ( WA_buf[0] !== 1'b1 && WA_buf[1] !== 1'b0 ) && ( WPULSE_buf[0] !== 1'b1 && WPULSE_buf[1] !== 1'b1 && WPULSE_buf[2] !== 1'b1 ) )?1'b1:1'b0);
assign ENCLKA_rm4 = (( RMEA_buf === 1'b1  && (RMA_buf[0] !== 1'b1 && RMA_buf[1] !== 1'b1 && RMA_buf[2] !== 1'b0 && RMA_buf[3] !== 1'b1) && ( WA_buf[0] !== 1'b0 && WA_buf[1] !== 1'b1 ) && ( WPULSE_buf[0] !== 1'b1 && WPULSE_buf[1] !== 1'b1 && WPULSE_buf[2] !== 1'b1 ) )?1'b1:1'b0);
assign ENCLKA_rm5 = (( RMEA_buf === 1'b1  && ((RMA_buf[0] !== 1'b0 || RMA_buf[1] !== 1'b0) && RMA_buf[2] !== 1'b0 && RMA_buf[3] !== 1'b1) && ( WA_buf[0] !== 1'b0 && WA_buf[1] !== 1'b1 ) && ( WPULSE_buf[0] !== 1'b1 && WPULSE_buf[1] !== 1'b1 && WPULSE_buf[2] !== 1'b1 ) )?1'b1:1'b0);
// Setup/hold condition for CLK: ENCLK
wire ENCLKB;

assign ENCLKB = (( (TEST1B_buf === 1'b0))?1'b1:1'b0) ;
wire ENCLKB_test1;
assign ENCLKB_test1 = ((  (TEST1B_buf === 1'b1))?1'b1:1'b0) ;
wire ENCLKB_rmezo,ENCLKB_rm0,ENCLKB_rm1,ENCLKB_rm2,ENCLKB_rm3,ENCLKB_rm4,ENCLKB_rm5;
assign ENCLKB_rmezo = (( RMEB_buf !== 1'b1)?1'b1:1'b0);
assign ENCLKB_rm0 = (( RMEB_buf === 1'b1  && (RMB_buf[0] !== 1'b1 && RMB_buf[1] !== 1'b1 && RMB_buf[2] !== 1'b1 && RMB_buf[3] !== 1'b1) )?1'b1:1'b0);
assign ENCLKB_rm1 = (( RMEB_buf === 1'b1  && (RMB_buf[0] !== 1'b0 && RMB_buf[1] !== 1'b1 && RMB_buf[2] !== 1'b1 && RMB_buf[3] !== 1'b1) )?1'b1:1'b0);
assign ENCLKB_rm2 = (( RMEB_buf === 1'b1  && (RMB_buf[0] !== 1'b1 && RMB_buf[1] !== 1'b0 && RMB_buf[2] !== 1'b1 && RMB_buf[3] !== 1'b1) )?1'b1:1'b0);
assign ENCLKB_rm3 = (( RMEB_buf === 1'b1  && (RMB_buf[0] !== 1'b0 && RMB_buf[1] !== 1'b0 && RMB_buf[2] !== 1'b1 && RMB_buf[3] !== 1'b1) )?1'b1:1'b0);
assign ENCLKB_rm4 = (( RMEB_buf === 1'b1  && (RMB_buf[0] !== 1'b1 && RMB_buf[1] !== 1'b1 && RMB_buf[2] !== 1'b0 && RMB_buf[3] !== 1'b1) )?1'b1:1'b0);
assign ENCLKB_rm5 = (( RMEB_buf === 1'b1  && ((RMB_buf[0] !== 1'b0 || RMB_buf[1] !== 1'b0) && RMB_buf[2] !== 1'b0 && RMB_buf[3] !== 1'b1) )?1'b1:1'b0);
`endif // VIRAGE_FAST_VERILOG

`ifdef VIRAGE_FAST_VERILOG
`else
 
 
always @ (QB_final)
 begin   
  if (QB_final !== 80'bx )
       CLKB_tcq = 1'b0;
 end
always @ (negedge CLKB_buf)
 begin
   CLKB_tcq = 1'b0;
 end
wire ADRA_valid;
assign ADRA_valid = ( ( ADRA_pre < 256 )?1'b1:1'b0);


wire ADRB_valid;
assign ADRB_valid = ( ( ADRB_pre < 256 )?1'b1:1'b0);


`endif // VIRAGE_FAST_VERILOG


real t0a_pfirst, t1a_pfirst, t2a_pnow, t2a_nnow, t3a_me;
real t0b_pfirst, t1b_pfirst, t2b_pnow, t2b_nnow, t3b_me;
initial
begin
  t0a_pfirst = 0.0;
  t1a_pfirst = 0.0;
  t2a_pnow = 0.0;
  t2a_nnow = 0.0;
  t3a_me = 0.0;
  t0b_pfirst = 0.0;
  t1b_pfirst = 0.0;
  t2b_pnow = 0.0;
  t2b_nnow = 0.0;
  t3b_me = 0.0;
end

always @(posedge CLKA_buf)
begin
  t0a_pfirst = t1a_pfirst;
  t1a_pfirst = t2a_pnow;
  t2a_pnow = $realtime;
  if ((t1a_pfirst < t3a_me) && (t3a_me < t2a_pnow))
  begin   
    uut.diff_me_tcha = 1'b1;
  end
  if ((t0a_pfirst < t3a_me) && (t3a_me < t2a_pnow))
  begin   
    uut.diff_me_tcca = 1'b1;
  end
    @(negedge CLKA_buf)
    t2a_nnow = $realtime;
    #0.001;
    uut.diff_me_tcha = 1'b0;
    uut.diff_me_tcca = 1'b0;
end

always @(MEA_buf)
begin
  t3a_me = $realtime;
  if ((t2a_pnow < t3a_me) && (t2a_nnow < t3a_me))
  begin   
    uut.diff_me_tcha = 1'b1;
  end
end
always @(posedge CLKB_buf)
begin
  t0b_pfirst = t1b_pfirst;
  t1b_pfirst = t2b_pnow;
  t2b_pnow = $realtime;
  if ((t1b_pfirst < t3b_me) && (t3b_me < t2b_pnow))
  begin   
    uut.diff_me_tchb = 1'b1;
  end
  if ((t0b_pfirst < t3b_me) && (t3b_me < t2b_pnow))
  begin   
    uut.diff_me_tccb = 1'b1;
  end
    @(negedge CLKB_buf)
    t2b_nnow = $realtime;
    #0.001;
    uut.diff_me_tchb = 1'b0;
    uut.diff_me_tccb = 1'b0;
end

always @(MEB_buf)
begin
  t3b_me = $realtime;
  if ((t2b_pnow < t3b_me) && (t2b_nnow < t3b_me))
  begin   
    uut.diff_me_tchb = 1'b1;
  end
end

// Setup/hold conditions for syncronous signals
`ifdef VIRAGE_FAST_VERILOG
`else
// Setup/hold condition for Address: ADRA is : ENADRA
wire ENADRA;
assign ENADRA = (((((MEA_pre !== 1'b0 && WEA_pre !== 1'b0)))    && (LS_buf === 1'b0)) ?1'b1:1'b0);
 
// Setup/hold condition for Memory Enable: MEA is : ENMEA
wire ENMEA;
assign ENMEA = (((((WEA_pre !== 1'b0 && (ADRA_valid || flag_ADRA_x))))   ) ?1'b1:1'b0);

// Setup/hold condition for Write Enable: WEA is : ENWEA
wire ENWEA;
assign ENWEA = (((((MEA_pre !== 1'b0 && (ADRA_valid || flag_ADRA_x) )))    && (LS_buf === 1'b0)) ?1'b1:1'b0);

// Setup/hold condition for Data In: DA is : ENDA
wire ENDA;
assign ENDA = (( ADRA_valid && ((MEA_pre !== 1'b0 && WEA_pre !== 1'b0))    && (LS_buf === 1'b0))?1'b1:1'b0) ;

// Setup/hold condition for test1 Vector: TEST1A is : ENTEST1A
wire ENTEST1A;
assign ENTEST1A = ((MEA_pre !== 1'b0 && WEA_pre !== 1'b0 && ADRA_valid   && (LS_buf === 1'b0))?1'b1:1'b0);
 
// Setup/hold condition for test_rnm Vector: TEST_RNMA is : ENTEST_RNMA
wire ENTEST_RNMA;
assign ENTEST_RNMA = ((MEA_pre !== 1'b0 && WEA_pre !== 1'b0   && (LS_buf === 1'b0))?1'b1:1'b0);

// Setup/hold condition for Read Margin Vector: RMA is : ENRMA
wire ENRMA;
assign ENRMA = ((MEA_pre !== 1'b0 && WEA_pre !== 1'b0 && ADRA_valid && RMEA_buf !== 1'b0  && (LS_buf === 1'b0) )?1'b1:1'b0);
// Setup/hold condition for Read Margin Vector: RMEA is : ENRMEA
wire ENRMEA;
assign ENRMEA = ((MEA_pre !== 1'b0 && WEA_pre !== 1'b0 && ADRA_valid   && (LS_buf === 1'b0))?1'b1:1'b0);
// Setup/hold condition for Light Sleep:  ENLS_A 
wire ENLS_A;
assign ENLS_A  = (( MEA_pre !== 1'b0 && WEA_pre !== 1'b0) ?1'b1:1'b0);
// Setup/hold condition for Write Assist Vector: WA is : ENWA
wire ENWA;
assign ENWA = (((WEA_pre !== 1'b0 && MEA_pre !== 1'b0 && (LS_buf === 1'b0)))?1'b1:1'b0);
// Setup/hold condition for Write Pulse Vector: WPULSE is : ENWPULSE
wire ENWPULSE;
assign ENWPULSE = (((WEA_pre !== 1'b0 && MEA_pre !== 1'b0 && (LS_buf === 1'b0)))?1'b1:1'b0);
// Setup/hold condition for Address: ADRB is : ENADRB
wire ENADRB;
assign ENADRB = (((((MEB_pre !== 1'b0)))  && (LS_buf === 1'b0) ) ?1'b1:1'b0);
 
// Setup/hold condition for Memory Enable: MEB is : ENMEB
wire ENMEB;
assign ENMEB = (( (ADRB_valid || flag_ADRB_x)  ) ?1'b1:1'b0);


// Setup/hold condition for test1 Vector: TEST1B is : ENTEST1B
wire ENTEST1B;
assign ENTEST1B = ((MEB_pre !== 1'b0 && ADRB_valid   && (LS_buf === 1'b0))?1'b1:1'b0);
 

// Setup/hold condition for Read Margin Vector: RMB is : ENRMB
wire ENRMB;
assign ENRMB = ((MEB_pre !== 1'b0 && ADRB_valid && RMEB_buf !== 1'b0  && (LS_buf === 1'b0) )?1'b1:1'b0);
// Setup/hold condition for Read Margin Vector: RMEB is : ENRMEB
wire ENRMEB;
assign ENRMEB = ((MEB_pre !== 1'b0 && ADRB_valid   && (LS_buf === 1'b0))?1'b1:1'b0);
// Setup/hold condition for Light Sleep:  ENLS_B 
wire ENLS_B;
assign ENLS_B  = (( MEB_pre !== 1'b0) ?1'b1:1'b0);

`endif // VIRAGE_FAST_VERILOG

reg MEA_buf_L;
reg WEA_buf_L;
reg MEB_buf_L;

`ifdef VIRAGE_FAST_VERILOG
`else

// Recovery conditions for clock signals



wire ADRA_same;
wire  [7 : 0 ] ADRB_chk;
real CLKA_UTIME;
real CLKB_UTIME;
assign ADRB_chk = ((CLKA_UTIME == CLKB_UTIME)? ADRB_pre : ADRB_buf_L);

assign ADRA_same = (((ADRA_pre == ADRB_chk) && ADRA_valid) || (CLKA_buf === 1'bx || CLKB_buf === 1'bx) || ((ADRA_pre^ADRA_pre) !== 0) || ((ADRB_buf_L^ADRB_buf_L) !== 0)) ? 1'b1:1'b0;


wire WEA_active;
assign WEA_active = ( ( WEA_pre === 1'b0 ) )?1'b0:1'b1;

wire MEA_active;
wire MEB_chk;
assign MEB_chk = ((CLKA_UTIME == CLKB_UTIME)? MEB_pre : MEB_buf_L);
assign MEA_active = ( ( MEA_pre !== 1'b0 ) && ( MEB_chk !== 1'b0 ))?1'b1:1'b0;
wire recrm_def;
assign recrm_def =  RMEA_buf !== 1'b1 && RMEB_buf !== 1'b1 && ( WA_buf[0] !== 1'b1 && WA_buf[1] !== 1'b0 ) && ( WPULSE_buf[0] !== 1'b1 && WPULSE_buf[1] !== 1'b1 && WPULSE_buf[2] !== 1'b1 );

wire   ENCLKBCLKArec;
assign ENCLKBCLKArec = ( ( ADRA_same  && MEA_active && WEA_active  && (LS_buf === 1'b0)  && recrm_def && TEST_RNMA_buf === 1'b0 ) ? 1'b1:1'b0);
wire recrm0;
assign assist_recrm0 = (RMA_buf[0] !== 1'b1 && RMA_buf[1] !== 1'b1 && RMA_buf[2] !== 1'b1 && RMA_buf[3] !== 1'b1) && (RMB_buf[0] !== 1'b1 && RMB_buf[1] !== 1'b1 && RMB_buf[2] !== 1'b1 && RMB_buf[3] !== 1'b1) && ( WA_buf[0] !== 1'b0 && WA_buf[1] !== 1'b0 ) && ( WPULSE_buf[0] !== 1'b1 && WPULSE_buf[1] !== 1'b1 && WPULSE_buf[2] !== 1'b1 ); 
assign rme_recrm0 =  (RMEA_buf !== 1'b0) && (RMEB_buf !== 1'b0); 
assign recrm0 = rme_recrm0 && assist_recrm0; 

wire   ENCLKBCLKArecrm0;
assign ENCLKBCLKArecrm0 = ( ( ADRA_same  && MEA_active && WEA_active  && (LS_buf === 1'b0)  && recrm0 && TEST_RNMA_buf === 1'b0) ? 1'b1:1'b0);
wire recrm1;
assign assist_recrm1 = (RMA_buf[0] !== 1'b0 && RMA_buf[1] !== 1'b1 && RMA_buf[2] !== 1'b1 && RMA_buf[3] !== 1'b1) && (RMB_buf[0] !== 1'b0 && RMB_buf[1] !== 1'b1 && RMB_buf[2] !== 1'b1 && RMB_buf[3] !== 1'b1) && ( WA_buf[0] !== 1'b0 && WA_buf[1] !== 1'b0 ) && ( WPULSE_buf[0] !== 1'b1 && WPULSE_buf[1] !== 1'b1 && WPULSE_buf[2] !== 1'b1 ); 
assign rme_recrm1 =  (RMEA_buf !== 1'b0) && (RMEB_buf !== 1'b0); 
assign recrm1 = rme_recrm1 && assist_recrm1; 

wire   ENCLKBCLKArecrm1;
assign ENCLKBCLKArecrm1 = ( ( ADRA_same  && MEA_active && WEA_active  && (LS_buf === 1'b0)  && recrm1 && TEST_RNMA_buf === 1'b0) ? 1'b1:1'b0);
wire recrm2;
assign assist_recrm2 = (RMA_buf[0] !== 1'b1 && RMA_buf[1] !== 1'b0 && RMA_buf[2] !== 1'b1 && RMA_buf[3] !== 1'b1) && (RMB_buf[0] !== 1'b1 && RMB_buf[1] !== 1'b0 && RMB_buf[2] !== 1'b1 && RMB_buf[3] !== 1'b1) && ( WA_buf[0] !== 1'b1 && WA_buf[1] !== 1'b0 ) && ( WPULSE_buf[0] !== 1'b1 && WPULSE_buf[1] !== 1'b1 && WPULSE_buf[2] !== 1'b1 ); 
assign rme_recrm2 =  (RMEA_buf !== 1'b0) && (RMEB_buf !== 1'b0); 
assign recrm2 = rme_recrm2 && assist_recrm2; 

wire   ENCLKBCLKArecrm2;
assign ENCLKBCLKArecrm2 = ( ( ADRA_same  && MEA_active && WEA_active  && (LS_buf === 1'b0)  && recrm2 && TEST_RNMA_buf === 1'b0) ? 1'b1:1'b0);
wire recrm3;
assign assist_recrm3 = (RMA_buf[0] !== 1'b0 && RMA_buf[1] !== 1'b0 && RMA_buf[2] !== 1'b1 && RMA_buf[3] !== 1'b1) && (RMB_buf[0] !== 1'b0 && RMB_buf[1] !== 1'b0 && RMB_buf[2] !== 1'b1 && RMB_buf[3] !== 1'b1) && ( WA_buf[0] !== 1'b1 && WA_buf[1] !== 1'b0 ) && ( WPULSE_buf[0] !== 1'b1 && WPULSE_buf[1] !== 1'b1 && WPULSE_buf[2] !== 1'b1 ); 
assign rme_recrm3 =  (RMEA_buf !== 1'b0) && (RMEB_buf !== 1'b0); 
assign recrm3 = rme_recrm3 && assist_recrm3; 

wire   ENCLKBCLKArecrm3;
assign ENCLKBCLKArecrm3 = ( ( ADRA_same  && MEA_active && WEA_active  && (LS_buf === 1'b0)  && recrm3 && TEST_RNMA_buf === 1'b0) ? 1'b1:1'b0);
wire recrm4;
assign assist_recrm4 = (RMA_buf[0] !== 1'b1 && RMA_buf[1] !== 1'b1 && RMA_buf[2] !== 1'b0 && RMA_buf[3] !== 1'b1) && (RMB_buf[0] !== 1'b1 && RMB_buf[1] !== 1'b1 && RMB_buf[2] !== 1'b0 && RMB_buf[3] !== 1'b1) && ( WA_buf[0] !== 1'b0 && WA_buf[1] !== 1'b1 ) && ( WPULSE_buf[0] !== 1'b1 && WPULSE_buf[1] !== 1'b1 && WPULSE_buf[2] !== 1'b1 ); 
assign rme_recrm4 =  (RMEA_buf !== 1'b0) && (RMEB_buf !== 1'b0); 
assign recrm4 = rme_recrm4 && assist_recrm4; 

wire   ENCLKBCLKArecrm4;
assign ENCLKBCLKArecrm4 = ( ( ADRA_same  && MEA_active && WEA_active  && (LS_buf === 1'b0)  && recrm4 && TEST_RNMA_buf === 1'b0) ? 1'b1:1'b0);
wire recrm5;
assign assist_recrm5 = ((RMA_buf[0] !== 1'b0 || RMA_buf[1] !== 1'b0) && RMA_buf[2] !== 1'b0 && RMA_buf[3] !== 1'b1) && ((RMB_buf[0] !== 1'b0 || RMB_buf[1] !== 1'b0) && RMB_buf[2] !== 1'b0 && RMB_buf[3] !== 1'b1) && ( WA_buf[0] !== 1'b0 && WA_buf[1] !== 1'b1 ) && ( WPULSE_buf[0] !== 1'b1 && WPULSE_buf[1] !== 1'b1 && WPULSE_buf[2] !== 1'b1 ); 
assign rme_recrm5 =  (RMEA_buf !== 1'b0) && (RMEB_buf !== 1'b0); 
assign recrm5 = rme_recrm5 && assist_recrm5; 

wire   ENCLKBCLKArecrm5;
assign ENCLKBCLKArecrm5 = ( ( ADRA_same  && MEA_active && WEA_active  && (LS_buf === 1'b0)  && recrm5 && TEST_RNMA_buf === 1'b0) ? 1'b1:1'b0);
wire recrm0u;
assign recrm0u = (!recrm0 && !recrm1 && !recrm2 && !recrm3 && !recrm4 && !recrm5 && !recrm_def) ;
wire   ENCLKBCLKArecrm0u;
assign ENCLKBCLKArecrm0u = ( ( ADRA_same  && MEA_active && WEA_active  && (LS_buf === 1'b0) && recrm0u && TEST_RNMA_buf === 1'b0) ? 1'b1:1'b0);

wire ADRB_same;
wire  [7 : 0 ] ADRA_chk;
assign ADRA_chk = ((CLKA_UTIME == CLKB_UTIME)? ADRA_pre : ADRA_buf_L);

assign ADRB_same = (((ADRB_pre == ADRA_chk) && ADRB_valid) || (CLKB_buf === 1'bx || CLKA_buf === 1'bx) || ((ADRB_pre^ADRB_pre) !== 0) || ((ADRA_buf_L^ADRA_buf_L) !== 0)) ? 1'b1:1'b0;


wire _active;
wire WEA_chk;
assign WEA_chk = ((CLKA_UTIME == CLKB_UTIME)? WEA_pre : WEA_buf_L);
assign _active = ( ( WEA_chk === 1'b0 ) )?1'b0:1'b1;

wire MEB_active;
wire MEA_chk;
assign MEA_chk = ((CLKA_UTIME == CLKB_UTIME)? MEA_pre : MEA_buf_L);
assign MEB_active = ( ( MEB_pre !== 1'b0 ) && ( MEA_chk !== 1'b0 ))?1'b1:1'b0;

wire   ENCLKACLKBrec;
assign ENCLKACLKBrec = ( ( ADRB_same  && MEB_active && _active  && (LS_buf === 1'b0)  && recrm_def && TEST_RNMA_buf === 1'b0 ) ? 1'b1:1'b0);

wire   ENCLKACLKBrecrm0;
assign ENCLKACLKBrecrm0 = ( ( ADRB_same  && MEB_active && _active  && (LS_buf === 1'b0)  && recrm0 && TEST_RNMA_buf === 1'b0) ? 1'b1:1'b0);

wire   ENCLKACLKBrecrm1;
assign ENCLKACLKBrecrm1 = ( ( ADRB_same  && MEB_active && _active  && (LS_buf === 1'b0)  && recrm1 && TEST_RNMA_buf === 1'b0) ? 1'b1:1'b0);

wire   ENCLKACLKBrecrm2;
assign ENCLKACLKBrecrm2 = ( ( ADRB_same  && MEB_active && _active  && (LS_buf === 1'b0)  && recrm2 && TEST_RNMA_buf === 1'b0) ? 1'b1:1'b0);

wire   ENCLKACLKBrecrm3;
assign ENCLKACLKBrecrm3 = ( ( ADRB_same  && MEB_active && _active  && (LS_buf === 1'b0)  && recrm3 && TEST_RNMA_buf === 1'b0) ? 1'b1:1'b0);

wire   ENCLKACLKBrecrm4;
assign ENCLKACLKBrecrm4 = ( ( ADRB_same  && MEB_active && _active  && (LS_buf === 1'b0)  && recrm4 && TEST_RNMA_buf === 1'b0) ? 1'b1:1'b0);

wire   ENCLKACLKBrecrm5;
assign ENCLKACLKBrecrm5 = ( ( ADRB_same  && MEB_active && _active  && (LS_buf === 1'b0)  && recrm5 && TEST_RNMA_buf === 1'b0) ? 1'b1:1'b0);
wire   ENCLKACLKBrecrm0u;
assign ENCLKACLKBrecrm0u = ( ( ADRB_same  && MEB_active && _active  && (LS_buf === 1'b0) && recrm0u && TEST_RNMA_buf === 1'b0) ? 1'b1:1'b0);

wire recovery_ab;
assign recovery_ab = ( WEA_buf_L !== 1'b0 );
`endif // VIRAGE_FAST_VERILOG

wire LS_old;
reg tmp_LS_buf;

`ifdef VIRAGE_FAST_VERILOG
`else
specify
 

    specparam

        Tac = 0.088,
        Tcax = 0.082,
        Tdc = -0.004,
        Tcdx = 0.100,
        Twc = 0.055,
        Tcwx = 0.017,
        Tmc = 0.051,
        Tcmx = 0.017,
        Tcsep = 0.570,
        Tcseprm0 = 1.009,
        Tcseprm1 = 0.618,
        Tcseprm2 = 0.582,
        Tcseprm3 = 0.570,
        Tcseprm4 = 0.550,
        Tcseprm5 = 0.531,
        Tcl = 0.072,
        Tcltest1 = 0.346,
        Tch = 0.050,
        Tchtest1 = 0.380,
        Tcc = 0.570,
        Tccrm0 = 1.009,
        Tccrm1 = 0.618,
        Tccrm2 = 0.582,
        Tccrm3 = 0.570,
        Tccrm4 = 0.550,
        Tccrm5 = 0.531,
        Tt1c = 0.049,
        Tct1x = 1.009,
        Ttrnmc = 0.049,
        Tctrnmx = 1.009,
        Trmec = -0.007,
        Tcrmex = 0.024,
        Trmc = -0.007,
        Trm3c = 0.115,
        Tcrmx = 0.024,
        Tcrm3x = 1.009,
        Twac = -0.123,
        Tcwax = 1.009,
        Twpc = -0.262,
        Tcwpx = 1.009,
        Trlsc = 0.039,
        Tflsc = 0.115,
        Tlsx = 0.060,
        Tcq = 0.335,
        Tcqx = 0.095,
        Tcqrm0 = 0.359,
        Tcqrm0x = 0.101,
        Tcqrm1 = 0.346,
        Tcqrm1x = 0.099,
        Tcqrm2 = 0.338,
        Tcqrm2x = 0.097,
        Tcqrm3 = 0.335,
        Tcqrm3x = 0.095,
        Tcqrm4 = 0.330,
        Tcqrm4x = 0.091,
        Tcqrm5 = 0.325,
        Tcqrm5x = 0.086,
        Tcqtest1x = 0.099,
        Tcqtest1 = 0.346;
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[79]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[78]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[77]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[76]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[75]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[79]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[78]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[77]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[76]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[75]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (!RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqrm0, Tcqrm0, Tcqrm0x, Tcqrm0, Tcqrm0x, Tcqrm0 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[79]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[78]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[77]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[76]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[75]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqrm1, Tcqrm1, Tcqrm1x, Tcqrm1, Tcqrm1x, Tcqrm1 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[79]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[78]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[77]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[76]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[75]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (!RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqrm2, Tcqrm2, Tcqrm2x, Tcqrm2, Tcqrm2x, Tcqrm2 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[79]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[78]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[77]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[76]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[75]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (RMB[0] & RMB[1] & !RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqrm3, Tcqrm3, Tcqrm3x, Tcqrm3, Tcqrm3x, Tcqrm3 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[79]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[78]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[77]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[76]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[75]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & (!RMB[0] & !RMB[1] & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqrm4, Tcqrm4, Tcqrm4x, Tcqrm4, Tcqrm4x, Tcqrm4 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[79]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[78]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[77]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[76]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[75]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if (   RMEB & ((RMB[0] | RMB[1]) & RMB[2] & !RMB[3]) & !LS & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqrm5, Tcqrm5, Tcqrm5x, Tcqrm5, Tcqrm5x, Tcqrm5 );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[79]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[78]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[77]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[76]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[75]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[79]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[78]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[77]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[76]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[75]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );



// Timing Checks

  $width (negedge CLKA &&& ENCLKA, Tcl, 0, notif_clka);
  $width (negedge CLKA &&& ENCLKA_test1, Tcltest1, 0, notif_clka);
  $width (posedge CLKA &&& ENCLKA, Tch, 0, notif_clka);
  $width (posedge CLKA &&& ENCLKA_test1, Tchtest1, 0, notif_clka);
  $period (posedge CLKA &&& ENCLKA_rmezo, Tcc, notif_clkap);
  $period (negedge CLKA &&& ENCLKA_rmezo, Tcc, notif_clka);
  $period (posedge CLKA &&& ENCLKA_rm0, Tccrm0, notif_clkap);
  $period (negedge CLKA &&& ENCLKA_rm0, Tccrm0, notif_clka);
  $period (posedge CLKA &&& ENCLKA_rm1, Tccrm1, notif_clkap);
  $period (negedge CLKA &&& ENCLKA_rm1, Tccrm1, notif_clka);
  $period (posedge CLKA &&& ENCLKA_rm2, Tccrm2, notif_clkap);
  $period (negedge CLKA &&& ENCLKA_rm2, Tccrm2, notif_clka);
  $period (posedge CLKA &&& ENCLKA_rm3, Tccrm3, notif_clkap);
  $period (negedge CLKA &&& ENCLKA_rm3, Tccrm3, notif_clka);
  $period (posedge CLKA &&& ENCLKA_rm4, Tccrm4, notif_clkap);
  $period (negedge CLKA &&& ENCLKA_rm4, Tccrm4, notif_clka);
  $period (posedge CLKA &&& ENCLKA_rm5, Tccrm5, notif_clkap);
  $period (negedge CLKA &&& ENCLKA_rm5, Tccrm5, notif_clka);
  $width (negedge CLKB &&& ENCLKB, Tcl, 0, notif_clkb);
  $width (negedge CLKB &&& ENCLKB_test1, Tcltest1, 0, notif_clkb);
  $width (posedge CLKB &&& ENCLKB, Tch, 0, notif_clkb);
  $width (posedge CLKB &&& ENCLKB_test1, Tchtest1, 0, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_rmezo, Tcc, notif_clkbp);
  $period (negedge CLKB &&& ENCLKB_rmezo, Tcc, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_rm0, Tccrm0, notif_clkbp);
  $period (negedge CLKB &&& ENCLKB_rm0, Tccrm0, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_rm1, Tccrm1, notif_clkbp);
  $period (negedge CLKB &&& ENCLKB_rm1, Tccrm1, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_rm2, Tccrm2, notif_clkbp);
  $period (negedge CLKB &&& ENCLKB_rm2, Tccrm2, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_rm3, Tccrm3, notif_clkbp);
  $period (negedge CLKB &&& ENCLKB_rm3, Tccrm3, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_rm4, Tccrm4, notif_clkbp);
  $period (negedge CLKB &&& ENCLKB_rm4, Tccrm4, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_rm5, Tccrm5, notif_clkbp);
  $period (negedge CLKB &&& ENCLKB_rm5, Tccrm5, notif_clkb);

  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[0], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[0] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[0], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[0] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[1], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[1] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[1], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[1] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[2], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[2] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[2], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[2] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[3], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[3] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[3], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[3] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[4], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[4] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[4], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[4] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[5], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[5] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[5], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[5] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[6], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[6] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[6], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[6] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[7], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[7] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[7], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[7] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[0], Tdc, Tcdx, notif_da_0,,, delayed_CLKA, delayed_DA[0] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[0], Tdc, Tcdx, notif_da_0,,, delayed_CLKA, delayed_DA[0] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[1], Tdc, Tcdx, notif_da_1,,, delayed_CLKA, delayed_DA[1] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[1], Tdc, Tcdx, notif_da_1,,, delayed_CLKA, delayed_DA[1] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[2], Tdc, Tcdx, notif_da_2,,, delayed_CLKA, delayed_DA[2] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[2], Tdc, Tcdx, notif_da_2,,, delayed_CLKA, delayed_DA[2] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[3], Tdc, Tcdx, notif_da_3,,, delayed_CLKA, delayed_DA[3] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[3], Tdc, Tcdx, notif_da_3,,, delayed_CLKA, delayed_DA[3] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[4], Tdc, Tcdx, notif_da_4,,, delayed_CLKA, delayed_DA[4] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[4], Tdc, Tcdx, notif_da_4,,, delayed_CLKA, delayed_DA[4] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[5], Tdc, Tcdx, notif_da_5,,, delayed_CLKA, delayed_DA[5] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[5], Tdc, Tcdx, notif_da_5,,, delayed_CLKA, delayed_DA[5] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[6], Tdc, Tcdx, notif_da_6,,, delayed_CLKA, delayed_DA[6] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[6], Tdc, Tcdx, notif_da_6,,, delayed_CLKA, delayed_DA[6] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[7], Tdc, Tcdx, notif_da_7,,, delayed_CLKA, delayed_DA[7] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[7], Tdc, Tcdx, notif_da_7,,, delayed_CLKA, delayed_DA[7] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[8], Tdc, Tcdx, notif_da_8,,, delayed_CLKA, delayed_DA[8] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[8], Tdc, Tcdx, notif_da_8,,, delayed_CLKA, delayed_DA[8] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[9], Tdc, Tcdx, notif_da_9,,, delayed_CLKA, delayed_DA[9] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[9], Tdc, Tcdx, notif_da_9,,, delayed_CLKA, delayed_DA[9] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[10], Tdc, Tcdx, notif_da_10,,, delayed_CLKA, delayed_DA[10] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[10], Tdc, Tcdx, notif_da_10,,, delayed_CLKA, delayed_DA[10] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[11], Tdc, Tcdx, notif_da_11,,, delayed_CLKA, delayed_DA[11] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[11], Tdc, Tcdx, notif_da_11,,, delayed_CLKA, delayed_DA[11] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[12], Tdc, Tcdx, notif_da_12,,, delayed_CLKA, delayed_DA[12] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[12], Tdc, Tcdx, notif_da_12,,, delayed_CLKA, delayed_DA[12] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[13], Tdc, Tcdx, notif_da_13,,, delayed_CLKA, delayed_DA[13] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[13], Tdc, Tcdx, notif_da_13,,, delayed_CLKA, delayed_DA[13] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[14], Tdc, Tcdx, notif_da_14,,, delayed_CLKA, delayed_DA[14] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[14], Tdc, Tcdx, notif_da_14,,, delayed_CLKA, delayed_DA[14] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[15], Tdc, Tcdx, notif_da_15,,, delayed_CLKA, delayed_DA[15] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[15], Tdc, Tcdx, notif_da_15,,, delayed_CLKA, delayed_DA[15] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[16], Tdc, Tcdx, notif_da_16,,, delayed_CLKA, delayed_DA[16] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[16], Tdc, Tcdx, notif_da_16,,, delayed_CLKA, delayed_DA[16] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[17], Tdc, Tcdx, notif_da_17,,, delayed_CLKA, delayed_DA[17] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[17], Tdc, Tcdx, notif_da_17,,, delayed_CLKA, delayed_DA[17] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[18], Tdc, Tcdx, notif_da_18,,, delayed_CLKA, delayed_DA[18] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[18], Tdc, Tcdx, notif_da_18,,, delayed_CLKA, delayed_DA[18] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[19], Tdc, Tcdx, notif_da_19,,, delayed_CLKA, delayed_DA[19] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[19], Tdc, Tcdx, notif_da_19,,, delayed_CLKA, delayed_DA[19] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[20], Tdc, Tcdx, notif_da_20,,, delayed_CLKA, delayed_DA[20] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[20], Tdc, Tcdx, notif_da_20,,, delayed_CLKA, delayed_DA[20] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[21], Tdc, Tcdx, notif_da_21,,, delayed_CLKA, delayed_DA[21] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[21], Tdc, Tcdx, notif_da_21,,, delayed_CLKA, delayed_DA[21] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[22], Tdc, Tcdx, notif_da_22,,, delayed_CLKA, delayed_DA[22] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[22], Tdc, Tcdx, notif_da_22,,, delayed_CLKA, delayed_DA[22] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[23], Tdc, Tcdx, notif_da_23,,, delayed_CLKA, delayed_DA[23] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[23], Tdc, Tcdx, notif_da_23,,, delayed_CLKA, delayed_DA[23] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[24], Tdc, Tcdx, notif_da_24,,, delayed_CLKA, delayed_DA[24] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[24], Tdc, Tcdx, notif_da_24,,, delayed_CLKA, delayed_DA[24] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[25], Tdc, Tcdx, notif_da_25,,, delayed_CLKA, delayed_DA[25] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[25], Tdc, Tcdx, notif_da_25,,, delayed_CLKA, delayed_DA[25] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[26], Tdc, Tcdx, notif_da_26,,, delayed_CLKA, delayed_DA[26] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[26], Tdc, Tcdx, notif_da_26,,, delayed_CLKA, delayed_DA[26] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[27], Tdc, Tcdx, notif_da_27,,, delayed_CLKA, delayed_DA[27] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[27], Tdc, Tcdx, notif_da_27,,, delayed_CLKA, delayed_DA[27] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[28], Tdc, Tcdx, notif_da_28,,, delayed_CLKA, delayed_DA[28] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[28], Tdc, Tcdx, notif_da_28,,, delayed_CLKA, delayed_DA[28] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[29], Tdc, Tcdx, notif_da_29,,, delayed_CLKA, delayed_DA[29] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[29], Tdc, Tcdx, notif_da_29,,, delayed_CLKA, delayed_DA[29] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[30], Tdc, Tcdx, notif_da_30,,, delayed_CLKA, delayed_DA[30] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[30], Tdc, Tcdx, notif_da_30,,, delayed_CLKA, delayed_DA[30] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[31], Tdc, Tcdx, notif_da_31,,, delayed_CLKA, delayed_DA[31] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[31], Tdc, Tcdx, notif_da_31,,, delayed_CLKA, delayed_DA[31] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[32], Tdc, Tcdx, notif_da_32,,, delayed_CLKA, delayed_DA[32] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[32], Tdc, Tcdx, notif_da_32,,, delayed_CLKA, delayed_DA[32] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[33], Tdc, Tcdx, notif_da_33,,, delayed_CLKA, delayed_DA[33] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[33], Tdc, Tcdx, notif_da_33,,, delayed_CLKA, delayed_DA[33] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[34], Tdc, Tcdx, notif_da_34,,, delayed_CLKA, delayed_DA[34] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[34], Tdc, Tcdx, notif_da_34,,, delayed_CLKA, delayed_DA[34] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[35], Tdc, Tcdx, notif_da_35,,, delayed_CLKA, delayed_DA[35] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[35], Tdc, Tcdx, notif_da_35,,, delayed_CLKA, delayed_DA[35] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[36], Tdc, Tcdx, notif_da_36,,, delayed_CLKA, delayed_DA[36] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[36], Tdc, Tcdx, notif_da_36,,, delayed_CLKA, delayed_DA[36] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[37], Tdc, Tcdx, notif_da_37,,, delayed_CLKA, delayed_DA[37] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[37], Tdc, Tcdx, notif_da_37,,, delayed_CLKA, delayed_DA[37] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[38], Tdc, Tcdx, notif_da_38,,, delayed_CLKA, delayed_DA[38] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[38], Tdc, Tcdx, notif_da_38,,, delayed_CLKA, delayed_DA[38] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[39], Tdc, Tcdx, notif_da_39,,, delayed_CLKA, delayed_DA[39] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[39], Tdc, Tcdx, notif_da_39,,, delayed_CLKA, delayed_DA[39] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[40], Tdc, Tcdx, notif_da_40,,, delayed_CLKA, delayed_DA[40] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[40], Tdc, Tcdx, notif_da_40,,, delayed_CLKA, delayed_DA[40] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[41], Tdc, Tcdx, notif_da_41,,, delayed_CLKA, delayed_DA[41] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[41], Tdc, Tcdx, notif_da_41,,, delayed_CLKA, delayed_DA[41] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[42], Tdc, Tcdx, notif_da_42,,, delayed_CLKA, delayed_DA[42] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[42], Tdc, Tcdx, notif_da_42,,, delayed_CLKA, delayed_DA[42] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[43], Tdc, Tcdx, notif_da_43,,, delayed_CLKA, delayed_DA[43] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[43], Tdc, Tcdx, notif_da_43,,, delayed_CLKA, delayed_DA[43] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[44], Tdc, Tcdx, notif_da_44,,, delayed_CLKA, delayed_DA[44] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[44], Tdc, Tcdx, notif_da_44,,, delayed_CLKA, delayed_DA[44] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[45], Tdc, Tcdx, notif_da_45,,, delayed_CLKA, delayed_DA[45] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[45], Tdc, Tcdx, notif_da_45,,, delayed_CLKA, delayed_DA[45] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[46], Tdc, Tcdx, notif_da_46,,, delayed_CLKA, delayed_DA[46] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[46], Tdc, Tcdx, notif_da_46,,, delayed_CLKA, delayed_DA[46] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[47], Tdc, Tcdx, notif_da_47,,, delayed_CLKA, delayed_DA[47] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[47], Tdc, Tcdx, notif_da_47,,, delayed_CLKA, delayed_DA[47] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[48], Tdc, Tcdx, notif_da_48,,, delayed_CLKA, delayed_DA[48] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[48], Tdc, Tcdx, notif_da_48,,, delayed_CLKA, delayed_DA[48] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[49], Tdc, Tcdx, notif_da_49,,, delayed_CLKA, delayed_DA[49] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[49], Tdc, Tcdx, notif_da_49,,, delayed_CLKA, delayed_DA[49] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[50], Tdc, Tcdx, notif_da_50,,, delayed_CLKA, delayed_DA[50] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[50], Tdc, Tcdx, notif_da_50,,, delayed_CLKA, delayed_DA[50] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[51], Tdc, Tcdx, notif_da_51,,, delayed_CLKA, delayed_DA[51] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[51], Tdc, Tcdx, notif_da_51,,, delayed_CLKA, delayed_DA[51] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[52], Tdc, Tcdx, notif_da_52,,, delayed_CLKA, delayed_DA[52] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[52], Tdc, Tcdx, notif_da_52,,, delayed_CLKA, delayed_DA[52] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[53], Tdc, Tcdx, notif_da_53,,, delayed_CLKA, delayed_DA[53] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[53], Tdc, Tcdx, notif_da_53,,, delayed_CLKA, delayed_DA[53] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[54], Tdc, Tcdx, notif_da_54,,, delayed_CLKA, delayed_DA[54] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[54], Tdc, Tcdx, notif_da_54,,, delayed_CLKA, delayed_DA[54] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[55], Tdc, Tcdx, notif_da_55,,, delayed_CLKA, delayed_DA[55] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[55], Tdc, Tcdx, notif_da_55,,, delayed_CLKA, delayed_DA[55] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[56], Tdc, Tcdx, notif_da_56,,, delayed_CLKA, delayed_DA[56] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[56], Tdc, Tcdx, notif_da_56,,, delayed_CLKA, delayed_DA[56] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[57], Tdc, Tcdx, notif_da_57,,, delayed_CLKA, delayed_DA[57] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[57], Tdc, Tcdx, notif_da_57,,, delayed_CLKA, delayed_DA[57] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[58], Tdc, Tcdx, notif_da_58,,, delayed_CLKA, delayed_DA[58] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[58], Tdc, Tcdx, notif_da_58,,, delayed_CLKA, delayed_DA[58] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[59], Tdc, Tcdx, notif_da_59,,, delayed_CLKA, delayed_DA[59] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[59], Tdc, Tcdx, notif_da_59,,, delayed_CLKA, delayed_DA[59] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[60], Tdc, Tcdx, notif_da_60,,, delayed_CLKA, delayed_DA[60] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[60], Tdc, Tcdx, notif_da_60,,, delayed_CLKA, delayed_DA[60] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[61], Tdc, Tcdx, notif_da_61,,, delayed_CLKA, delayed_DA[61] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[61], Tdc, Tcdx, notif_da_61,,, delayed_CLKA, delayed_DA[61] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[62], Tdc, Tcdx, notif_da_62,,, delayed_CLKA, delayed_DA[62] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[62], Tdc, Tcdx, notif_da_62,,, delayed_CLKA, delayed_DA[62] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[63], Tdc, Tcdx, notif_da_63,,, delayed_CLKA, delayed_DA[63] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[63], Tdc, Tcdx, notif_da_63,,, delayed_CLKA, delayed_DA[63] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[64], Tdc, Tcdx, notif_da_64,,, delayed_CLKA, delayed_DA[64] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[64], Tdc, Tcdx, notif_da_64,,, delayed_CLKA, delayed_DA[64] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[65], Tdc, Tcdx, notif_da_65,,, delayed_CLKA, delayed_DA[65] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[65], Tdc, Tcdx, notif_da_65,,, delayed_CLKA, delayed_DA[65] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[66], Tdc, Tcdx, notif_da_66,,, delayed_CLKA, delayed_DA[66] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[66], Tdc, Tcdx, notif_da_66,,, delayed_CLKA, delayed_DA[66] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[67], Tdc, Tcdx, notif_da_67,,, delayed_CLKA, delayed_DA[67] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[67], Tdc, Tcdx, notif_da_67,,, delayed_CLKA, delayed_DA[67] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[68], Tdc, Tcdx, notif_da_68,,, delayed_CLKA, delayed_DA[68] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[68], Tdc, Tcdx, notif_da_68,,, delayed_CLKA, delayed_DA[68] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[69], Tdc, Tcdx, notif_da_69,,, delayed_CLKA, delayed_DA[69] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[69], Tdc, Tcdx, notif_da_69,,, delayed_CLKA, delayed_DA[69] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[70], Tdc, Tcdx, notif_da_70,,, delayed_CLKA, delayed_DA[70] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[70], Tdc, Tcdx, notif_da_70,,, delayed_CLKA, delayed_DA[70] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[71], Tdc, Tcdx, notif_da_71,,, delayed_CLKA, delayed_DA[71] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[71], Tdc, Tcdx, notif_da_71,,, delayed_CLKA, delayed_DA[71] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[72], Tdc, Tcdx, notif_da_72,,, delayed_CLKA, delayed_DA[72] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[72], Tdc, Tcdx, notif_da_72,,, delayed_CLKA, delayed_DA[72] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[73], Tdc, Tcdx, notif_da_73,,, delayed_CLKA, delayed_DA[73] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[73], Tdc, Tcdx, notif_da_73,,, delayed_CLKA, delayed_DA[73] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[74], Tdc, Tcdx, notif_da_74,,, delayed_CLKA, delayed_DA[74] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[74], Tdc, Tcdx, notif_da_74,,, delayed_CLKA, delayed_DA[74] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[75], Tdc, Tcdx, notif_da_75,,, delayed_CLKA, delayed_DA[75] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[75], Tdc, Tcdx, notif_da_75,,, delayed_CLKA, delayed_DA[75] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[76], Tdc, Tcdx, notif_da_76,,, delayed_CLKA, delayed_DA[76] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[76], Tdc, Tcdx, notif_da_76,,, delayed_CLKA, delayed_DA[76] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[77], Tdc, Tcdx, notif_da_77,,, delayed_CLKA, delayed_DA[77] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[77], Tdc, Tcdx, notif_da_77,,, delayed_CLKA, delayed_DA[77] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[78], Tdc, Tcdx, notif_da_78,,, delayed_CLKA, delayed_DA[78] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[78], Tdc, Tcdx, notif_da_78,,, delayed_CLKA, delayed_DA[78] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[79], Tdc, Tcdx, notif_da_79,,, delayed_CLKA, delayed_DA[79] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[79], Tdc, Tcdx, notif_da_79,,, delayed_CLKA, delayed_DA[79] );
  $setuphold (posedge CLKA  &&& ENWEA, posedge WEA,Twc, Tcwx, notif_wea,,, delayed_CLKA, delayed_WEA );
  $setuphold (posedge CLKA  &&& ENWEA, negedge WEA,Twc, Tcwx, notif_wea,,, delayed_CLKA, delayed_WEA );
  $setuphold (posedge CLKA  &&& ENMEA, posedge MEA,Tmc, Tcmx, notif_mea,,, delayed_CLKA, delayed_MEA );
  $setuphold (posedge CLKA  &&& ENMEA, negedge MEA,Tmc, Tcmx, notif_mea,,, delayed_CLKA, delayed_MEA );
  $setuphold (posedge CLKA  &&& ENTEST1A, posedge TEST1A,Tt1c, 0, notif_test1a,,, delayed_CLKA, delayed_TEST1A );
  $setuphold (posedge CLKA  &&& ENTEST1A, negedge TEST1A,Tt1c, 0, notif_test1a,,, delayed_CLKA, delayed_TEST1A );
  $setuphold (negedge CLKA  &&& ENTEST1A, posedge TEST1A,0, Tct1x, notif_test1a,,, delayed_CLKA, delayed_TEST1A );
  $setuphold (negedge CLKA  &&& ENTEST1A, negedge TEST1A,0, Tct1x, notif_test1a,,, delayed_CLKA, delayed_TEST1A );
  $setuphold (posedge CLKA  &&& ENTEST_RNMA, posedge TEST_RNMA,Ttrnmc, Tctrnmx, notif_test_rnma,,, delayed_CLKA, delayed_TEST_RNMA );
  $setuphold (posedge CLKA  &&& ENTEST_RNMA, negedge TEST_RNMA,Ttrnmc, Tctrnmx, notif_test_rnma,,, delayed_CLKA, delayed_TEST_RNMA );
  $setuphold (posedge CLKA  &&& ENRMEA, posedge RMEA,Trmec, Tcrmex, notif_rmea,,, delayed_CLKA, delayed_RMEA );
  $setuphold (posedge CLKA  &&& ENRMEA, negedge RMEA,Trmec, Tcrmex, notif_rmea,,, delayed_CLKA, delayed_RMEA );
  $setuphold (posedge CLKA  &&& ENRMA, posedge RMA[0], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[0] );
  $setuphold (posedge CLKA  &&& ENRMA, negedge RMA[0], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[0] );
  $setuphold (posedge CLKA  &&& ENRMA, posedge RMA[1], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[1] );
  $setuphold (posedge CLKA  &&& ENRMA, negedge RMA[1], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[1] );
  $setuphold (posedge CLKA  &&& ENRMA, posedge RMA[2], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[2] );
  $setuphold (posedge CLKA  &&& ENRMA, negedge RMA[2], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[2] );
  $setuphold (posedge CLKA  &&& ENRMA, posedge RMA[3], Trm3c, Tcrm3x, notif_rma,,, delayed_CLKA, delayed_RMA[3] );
  $setuphold (posedge CLKA  &&& ENRMA, negedge RMA[3], Trm3c, Tcrm3x, notif_rma,,, delayed_CLKA, delayed_RMA[3] );
  $setuphold (posedge CLKA  &&& ENWA, posedge WA[0], Twac, Tcwax, notif_wa,,, delayed_CLKA, delayed_WA[0] );
  $setuphold (posedge CLKA  &&& ENWA, negedge WA[0], Twac, Tcwax, notif_wa,,, delayed_CLKA, delayed_WA[0] );
  $setuphold (posedge CLKA  &&& ENWA, posedge WA[1], Twac, Tcwax, notif_wa,,, delayed_CLKA, delayed_WA[1] );
  $setuphold (posedge CLKA  &&& ENWA, negedge WA[1], Twac, Tcwax, notif_wa,,, delayed_CLKA, delayed_WA[1] );
  $setuphold (posedge CLKA  &&& ENWPULSE, posedge WPULSE[0], Twpc, Tcwpx, notif_wpulse,,, delayed_CLKA, delayed_WPULSE[0] );
  $setuphold (posedge CLKA  &&& ENWPULSE, negedge WPULSE[0], Twpc, Tcwpx, notif_wpulse,,, delayed_CLKA, delayed_WPULSE[0] );
  $setuphold (posedge CLKA  &&& ENWPULSE, posedge WPULSE[1], Twpc, Tcwpx, notif_wpulse,,, delayed_CLKA, delayed_WPULSE[1] );
  $setuphold (posedge CLKA  &&& ENWPULSE, negedge WPULSE[1], Twpc, Tcwpx, notif_wpulse,,, delayed_CLKA, delayed_WPULSE[1] );
  $setuphold (posedge CLKA  &&& ENWPULSE, posedge WPULSE[2], Twpc, Tcwpx, notif_wpulse,,, delayed_CLKA, delayed_WPULSE[2] );
  $setuphold (posedge CLKA  &&& ENWPULSE, negedge WPULSE[2], Twpc, Tcwpx, notif_wpulse,,, delayed_CLKA, delayed_WPULSE[2] );
  $setuphold (posedge CLKA  &&& ENLS_A, posedge LS,Trlsc, Tlsx, notif_ls_a,,, delayed_CLKA, delayed_LS );
  $setuphold (posedge CLKA  &&& ENLS_A, negedge LS,Tflsc, Tlsx, notif_ls_a,,, delayed_CLKA, delayed_LS );
  $setuphold (posedge CLKB  &&& ENLS_B, posedge LS,Trlsc, Tlsx, notif_ls_b,,, delayed_CLKB, delayed_LS );
  $setuphold (posedge CLKB  &&& ENLS_B, negedge LS,Tflsc, Tlsx, notif_ls_b,,, delayed_CLKB, delayed_LS );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[0], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[0] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[0], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[0] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[1], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[1] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[1], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[1] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[2], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[2] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[2], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[2] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[3], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[3] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[3], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[3] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[4], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[4] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[4], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[4] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[5], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[5] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[5], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[5] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[6], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[6] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[6], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[6] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[7], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[7] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[7], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[7] );
  $setuphold (posedge CLKB  &&& ENMEB, posedge MEB,Tmc, Tcmx, notif_meb,,, delayed_CLKB, delayed_MEB );
  $setuphold (posedge CLKB  &&& ENMEB, negedge MEB,Tmc, Tcmx, notif_meb,,, delayed_CLKB, delayed_MEB );
  $setuphold (posedge CLKB  &&& ENTEST1B, posedge TEST1B,Tt1c, 0, notif_test1b,,, delayed_CLKB, delayed_TEST1B );
  $setuphold (posedge CLKB  &&& ENTEST1B, negedge TEST1B,Tt1c, 0, notif_test1b,,, delayed_CLKB, delayed_TEST1B );
  $setuphold (negedge CLKB  &&& ENTEST1B, posedge TEST1B,0, Tct1x, notif_test1b,,, delayed_CLKB, delayed_TEST1B );
  $setuphold (negedge CLKB  &&& ENTEST1B, negedge TEST1B,0, Tct1x, notif_test1b,,, delayed_CLKB, delayed_TEST1B );
  $setuphold (posedge CLKB  &&& ENRMEB, posedge RMEB,Trmec, Tcrmex, notif_rmeb,,, delayed_CLKB, delayed_RMEB );
  $setuphold (posedge CLKB  &&& ENRMEB, negedge RMEB,Trmec, Tcrmex, notif_rmeb,,, delayed_CLKB, delayed_RMEB );
  $setuphold (posedge CLKB  &&& ENRMB, posedge RMB[0], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[0] );
  $setuphold (posedge CLKB  &&& ENRMB, negedge RMB[0], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[0] );
  $setuphold (posedge CLKB  &&& ENRMB, posedge RMB[1], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[1] );
  $setuphold (posedge CLKB  &&& ENRMB, negedge RMB[1], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[1] );
  $setuphold (posedge CLKB  &&& ENRMB, posedge RMB[2], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[2] );
  $setuphold (posedge CLKB  &&& ENRMB, negedge RMB[2], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[2] );
  $setuphold (posedge CLKB  &&& ENRMB, posedge RMB[3], Trm3c, Tcrm3x, notif_rmb,,, delayed_CLKB, delayed_RMB[3] );
  $setuphold (posedge CLKB  &&& ENRMB, negedge RMB[3], Trm3c, Tcrm3x, notif_rmb,,, delayed_CLKB, delayed_RMB[3] );
  $recrem ( posedge CLKA ,posedge CLKB  &&& ENCLKACLKBrec, Tcsep, Tcsep, notif_clka_CLKB_rise_rise_rec,,, delayed_CLKA, delayed_CLKB);
  $recrem ( posedge CLKA ,posedge CLKB  &&& ENCLKACLKBrecrm0, Tcseprm0, Tcseprm0, notif_clka_CLKB_rise_rise_rec,,, delayed_CLKA, delayed_CLKB);
  $recrem ( posedge CLKA ,posedge CLKB  &&& ENCLKACLKBrecrm1, Tcseprm1, Tcseprm1, notif_clka_CLKB_rise_rise_rec,,, delayed_CLKA, delayed_CLKB);
  $recrem ( posedge CLKA ,posedge CLKB  &&& ENCLKACLKBrecrm2, Tcseprm2, Tcseprm2, notif_clka_CLKB_rise_rise_rec,,, delayed_CLKA, delayed_CLKB);
  $recrem ( posedge CLKA ,posedge CLKB  &&& ENCLKACLKBrecrm3, Tcseprm3, Tcseprm3, notif_clka_CLKB_rise_rise_rec,,, delayed_CLKA, delayed_CLKB);
  $recrem ( posedge CLKA ,posedge CLKB  &&& ENCLKACLKBrecrm4, Tcseprm4, Tcseprm4, notif_clka_CLKB_rise_rise_rec,,, delayed_CLKA, delayed_CLKB);
  $recrem ( posedge CLKA ,posedge CLKB  &&& ENCLKACLKBrecrm5, Tcseprm5, Tcseprm5, notif_clka_CLKB_rise_rise_rec,,, delayed_CLKA, delayed_CLKB);
  $recrem ( posedge CLKA ,posedge CLKB  &&& ENCLKACLKBrecrm0u, Tcseprm0, Tcseprm0, notif_clka_CLKB_rise_rise_rec,,, delayed_CLKA, delayed_CLKB);
  $recrem ( posedge CLKB ,posedge CLKA  &&& ENCLKBCLKArec, Tcsep, Tcsep, notif_clkb_CLKA_rise_rise_rec,,, delayed_CLKB, delayed_CLKA);
  $recrem ( posedge CLKB ,posedge CLKA  &&& ENCLKBCLKArecrm0, Tcseprm0, Tcseprm0, notif_clkb_CLKA_rise_rise_rec,,, delayed_CLKB, delayed_CLKA);
  $recrem ( posedge CLKB ,posedge CLKA  &&& ENCLKBCLKArecrm1, Tcseprm1, Tcseprm1, notif_clkb_CLKA_rise_rise_rec,,, delayed_CLKB, delayed_CLKA);
  $recrem ( posedge CLKB ,posedge CLKA  &&& ENCLKBCLKArecrm2, Tcseprm2, Tcseprm2, notif_clkb_CLKA_rise_rise_rec,,, delayed_CLKB, delayed_CLKA);
  $recrem ( posedge CLKB ,posedge CLKA  &&& ENCLKBCLKArecrm3, Tcseprm3, Tcseprm3, notif_clkb_CLKA_rise_rise_rec,,, delayed_CLKB, delayed_CLKA);
  $recrem ( posedge CLKB ,posedge CLKA  &&& ENCLKBCLKArecrm4, Tcseprm4, Tcseprm4, notif_clkb_CLKA_rise_rise_rec,,, delayed_CLKB, delayed_CLKA);
  $recrem ( posedge CLKB ,posedge CLKA  &&& ENCLKBCLKArecrm5, Tcseprm5, Tcseprm5, notif_clkb_CLKA_rise_rise_rec,,, delayed_CLKB, delayed_CLKA);
  $recrem ( posedge CLKB ,posedge CLKA  &&& ENCLKBCLKArecrm0u, Tcseprm0, Tcseprm0, notif_clkb_CLKA_rise_rise_rec,,, delayed_CLKB, delayed_CLKA);

endspecify
`endif // VIRAGE_FAST_VERILOG
wire CLKA_mem;
wire CLKB_mem;
wire test1_ls_pwr, mux_ls;

assign test1_ls_pwr = ((uut.TEST1Alatched === 1'b1 && uut.MEAlatched === 1'b1 && uut.WEAlatched === 1'b1 ) || (uut.TEST1Blatched === 1'b1 && uut.MEBlatched === 1'b1 )) && LS_buf;

assign mux_ls = (test1_ls_pwr === 1'b1) ? LS_old : ((test1_ls_pwr === 1'b0) ? LS_buf : 1'bX);









`ifdef VIRAGE_FAST_VERILOG

generic_behav_SNPS_RF_DP_HD_256x80 #(MES_CNTRL, debug_mode, MemFault_Inj) uut (  .QB(QB_buf), .ADRA(ADRA_pre), .DA(DA_pre), .WEA(WEA_pre), .MEA(MEA_pre), .CLKA(CLKA_mem), .TEST1A(TEST1A_buf), .TEST_RNMA(TEST_RNMA_buf), .RMEA(RMEA_buf), .RMA(RMA_int), .WA(WA_buf), .WPULSE(WPULSE_buf), .LS(LS_buf), .ADRB(ADRB_pre), .MEB(MEB_pre), .CLKB(CLKB_mem), .TEST1B(TEST1B_buf), .RMEB(RMEB_buf), .RMB(RMB_int) );

`else

generic_behav_SNPS_RF_DP_HD_256x80 #(MES_CNTRL, debug_mode, MemFault_Inj) uut (  .QB(QB_buf), .ADRA(ADRA_pre), .DA(DA_pre), .WEA(WEA_pre), .MEA(MEA_pre), .CLKA(CLKA_mem), .TEST1A(TEST1A_buf), .TEST_RNMA(TEST_RNMA_buf), .RMEA(RMEA_buf), .RMA(RMA_int), .WA(WA_buf), .WPULSE(WPULSE_buf), .LS(LS_buf), .ADRB(ADRB_pre), .MEB(MEB_pre), .CLKB(CLKB_mem), .TEST1B(TEST1B_buf), .RMEB(RMEB_buf), .RMB(RMB_int), .CLKB_tcq (CLKB_tcq),.notif_adra(notif_adra), .notif_da(notif_da), .notif_wea(notif_wea), .notif_mea(notif_mea), .notif_clka(notif_clka), .notif_clkap(notif_clkap), .notif_clka_CLKB_rise_rise_rec(notif_clka_CLKB_rise_rise_rec), .notif_test1a(notif_test1a), .notif_test_rnma(notif_test_rnma), .notif_rmea(notif_rmea), .notif_rma(notif_rma), .notif_wa(notif_wa), .notif_wpulse(notif_wpulse), .notif_ls_a(notif_ls_a), .notif_ls_b(notif_ls_b), .notif_adrb(notif_adrb), .notif_meb(notif_meb), .notif_clkb(notif_clkb), .notif_clkbp(notif_clkbp), .notif_clkb_CLKA_rise_rise_rec(notif_clkb_CLKA_rise_rise_rec), 
.notif_test1b(notif_test1b), .notif_rmeb(notif_rmeb), .notif_rmb(notif_rmb) );

`endif // VIRAGE_FAST_VERILOG


always @( ADRA_buf or negedge CLKA_buf)
 begin
  #0;
   if ( CLKA_buf == 1'b0)
   begin
     ADRA_pre = ADRA_buf;
   end
   if ( ^ADRA_buf === 1'bx )
   begin
     flag_ADRA_x = 1'b1;
   end
   else
   begin
     flag_ADRA_x = 1'b0;
   end
 end

always @( MEA_buf or negedge CLKA_buf)
  begin
  #0;
    if ( CLKA_buf == 1'b0) MEA_pre = MEA_buf;
  end

always @( DA_buf or negedge CLKA_buf)
  begin
  #0;
    if ( CLKA_buf == 1'b0) DA_pre = DA_buf;
  end

always @( WEA_buf or negedge CLKA_buf)
  begin
  #0;
    if ( CLKA_buf == 1'b0) WEA_pre = WEA_buf;
  end


assign RMA_int = ((RMEA_buf===1'b1)?RMA_buf[2:0]:((RMEA_buf===1'b0)?3'b011:3'bx));


always @( posedge CLKA_buf)
begin
    MEA_buf_L = MEA_pre;
    WEA_buf_L = WEA_pre;
  `ifdef VIRAGE_FAST_VERILOG
  `else

    CLKA_UTIME = $realtime;
  if (LS_buf ===  1'b1   || TEST_RNMA_buf ===  1'b1)
  begin
    MEA_buf_L = 1'b0;
  end
  ADRA_buf_L = ADRA_pre;
    #0;

    if (CLKA_UTIME == CLKB_UTIME)
    begin
    #0;
      if (((ADRA_buf_L === ADRB_buf_L) && ADRA_valid) || (CLKA_buf === 1'bx || CLKB_buf === 1'bx) || ((ADRA_buf_L^ADRA_buf_L) !== 0) || ((ADRB_buf_L^ADRB_buf_L) !== 0))
      begin
         if ((MEA_buf_L !== 1'b0 && MEB_buf_L !== 1'b0) && (recovery_ab == 1'b1))
         begin

           if((MES_CNTRL=="ON" || MES_CNTRL=="ERR")&& $realtime != 0 && uut.mes_all_valid == 1'b1)
           begin
             $display("\n VIRL_MEM_ERR:Entered recovery block (posedge CLKA,posedge CLKB) (time %t), instance=%m", $time);
           end // end of if(MES_CNTRL=="ON" && $realtime != 0 

           if(notif_clkb_CLKA_rise_rise_rec === 1'bx)
             notif_clkb_CLKA_rise_rise_rec = 1'b0;
           else
             notif_clkb_CLKA_rise_rise_rec = !notif_clkb_CLKA_rise_rise_rec;
         end 
      end
    end //end of if (uut.CLKA_UTIME == uut.CLKB_UTIME)

  `endif // VIRAGE_FAST_VERILOG

end  // end of always @( posedge CLKA_buf)

always @( ADRB_buf or negedge CLKB_buf)
 begin
  #0;
   if ( CLKB_buf == 1'b0)
   begin
     ADRB_pre = ADRB_buf;
   end
   if ( ^ADRB_buf === 1'bx )
   begin
     flag_ADRB_x = 1'b1;
   end
   else
   begin
     flag_ADRB_x = 1'b0;
   end
 end

always @( MEB_buf or negedge CLKB_buf)
  begin
  #0;
    if ( CLKB_buf == 1'b0) MEB_pre = MEB_buf;
  end



assign RMB_int = ((RMEB_buf===1'b1)?RMB_buf[2:0]:((RMEB_buf===1'b0)?3'b011:3'bx));

always @( posedge CLKB_buf)
begin
    MEB_buf_L = MEB_pre;
  `ifdef VIRAGE_FAST_VERILOG
  `else

    CLKB_tcq = 1'b1;
    CLKB_UTIME = $realtime;
  if (LS_buf ===  1'b1  )
  begin
    MEB_buf_L = 1'b0;
  end
  ADRB_buf_L = ADRB_pre;
    #0;

    if (CLKB_UTIME == CLKA_UTIME)
    begin
    #0;
      if (((ADRB_buf_L === ADRA_buf_L) && ADRB_valid) || (CLKB_buf === 1'bx || CLKA_buf === 1'bx) || ((ADRB_buf_L^ADRB_buf_L) !== 0) || ((ADRA_buf_L^ADRA_buf_L) !== 0))
      begin
         if ((MEB_buf_L !== 1'b0 && MEA_buf_L !== 1'b0) && (recovery_ab == 1'b1))
         begin

           if((MES_CNTRL=="ON" || MES_CNTRL=="ERR")&& $realtime != 0 && uut.mes_all_valid == 1'b1)
           begin
             $display("\n VIRL_MEM_ERR:Entered recovery block (posedge CLKB,posedge CLKA) (time %t), instance=%m", $time);
           end // end of if(MES_CNTRL=="ON" && $realtime != 0 

           if(notif_clka_CLKB_rise_rise_rec === 1'bx)
             notif_clka_CLKB_rise_rise_rec = 1'b0;
           else
             notif_clka_CLKB_rise_rise_rec = !notif_clka_CLKB_rise_rise_rec;
         end 
      end
    end //end of if (uut.CLKB_UTIME == uut.CLKA_UTIME)

  `endif // VIRAGE_FAST_VERILOG

end  // end of always @( posedge CLKB_buf)



`ifdef VIRAGE_FAST_VERILOG
`else
assign notif_da = {notif_da_79, notif_da_78, notif_da_77, notif_da_76, notif_da_75, notif_da_74, notif_da_73, notif_da_72, notif_da_71, notif_da_70, notif_da_69, notif_da_68, notif_da_67, notif_da_66, notif_da_65, notif_da_64, notif_da_63, notif_da_62, notif_da_61, notif_da_60, notif_da_59, notif_da_58, notif_da_57, notif_da_56, notif_da_55, notif_da_54, notif_da_53, notif_da_52, notif_da_51, notif_da_50, notif_da_49, notif_da_48, notif_da_47, notif_da_46, notif_da_45, notif_da_44, notif_da_43, notif_da_42, notif_da_41, notif_da_40, notif_da_39, notif_da_38, notif_da_37, notif_da_36, notif_da_35, notif_da_34, notif_da_33, notif_da_32, notif_da_31, notif_da_30, notif_da_29, notif_da_28, notif_da_27, notif_da_26, notif_da_25, notif_da_24, notif_da_23, notif_da_22, notif_da_21, notif_da_20, notif_da_19, notif_da_18, notif_da_17, notif_da_16, notif_da_15, notif_da_14, notif_da_13, notif_da_12, notif_da_11, notif_da_10, notif_da_9, notif_da_8, notif_da_7, notif_da_6, notif_da_5, notif_da_4, notif_da_3, notif_da_2, 
notif_da_1, notif_da_0};

`endif // endif of VIRAGE_FAST_VERILOG

initial
begin
disp_LS_msgA = 1'b1;
disp_LS_msgB = 1'b1;
end


// Display the warning when LS is 1.

always @ ( negedge LS_buf )
begin
  disp_LS_msgA = 1'b1;
  disp_LS_msgA_old = 1'b1;
end

always @ (posedge LS_buf or posedge CLKA_buf)
begin : blk_ls_0
  if (LS_buf === 1'b1 && MEA_pre !== 1'b0)
  begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && disp_LS_msgA === 1'b1 )
    begin
      $display("<<VIRL_MEM_WARNING: Port A : No Operation as Memory is in Light Sleep mode.>> time=%0t instance=%m", $time);
      disp_LS_msgA = 1'b0;
    end
  end // if LS = 1
end // end of always block blk_ls_0


// Display the warning when LS is 1.

always @ ( negedge LS_buf )
begin
  disp_LS_msgB = 1'b1;
  disp_LS_msgB_old = 1'b1;
end

always @ (posedge LS_buf or posedge CLKB_buf)
begin : blk_ls_1
  if (LS_buf === 1'b1 && MEB_pre !== 1'b0)
  begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && disp_LS_msgB === 1'b1 )
    begin
      $display("<<VIRL_MEM_WARNING: Port B : No Operation as Memory is in Light Sleep mode.>> time=%0t instance=%m", $time);
      disp_LS_msgB = 1'b0;
    end
  end // if LS = 1
end // end of always block blk_ls_1


reg del_CLKA_buf, del_CLKB_buf;
always @(CLKA_mem)
begin
  if (CLKA_mem === 1'b1)
  begin
    del_CLKA_buf = CLKA_mem && MEA_pre && WEA_pre;
    if (TEST1A_buf === 1'b0)
      #0.335 del_CLKA_buf = 1'b0;
  end
  else
  begin
    del_CLKA_buf = CLKA_mem;
  end
end
always @(CLKB_mem)
begin
  if (CLKB_mem === 1'b1)
  begin
    del_CLKB_buf = CLKB_mem && MEB_pre;
    if (TEST1B_buf === 1'b0)
      #0.335 del_CLKB_buf = 1'b0;
  end
  else
  begin
    del_CLKB_buf = CLKB_mem;
  end
end
always @(LS_buf)
begin
  tmp_LS_buf <= LS_buf;
end
assign LS_old = ((del_CLKA_buf === 1'b0 && del_CLKB_buf === 1'b0) || (LS_buf === 1'b0)) ? tmp_LS_buf : LS_old;
assign CLKA_mem = CLKA_buf;
assign CLKB_mem = CLKB_buf;

always @(RMA_buf[3])
begin
  if(RMA_buf[3] === 1'bx)
  begin
    if( (MES_CNTRL=="ON"|| MES_CNTRL=="WARN") && $realtime != 0 && uut.mes_all_valid)
    begin
      $display("<<VIRL_MEM_WARNING: RMA[3] is unknown>> at time=%t; instance=%m (SNPS_RF_DP_HD_256x80_core)",$realtime);
    end
  end
end
always @(RMB_buf[3])
begin
  if(RMB_buf[3] === 1'bx)
  begin
    if( (MES_CNTRL=="ON"|| MES_CNTRL=="WARN") && $realtime != 0 && uut.mes_all_valid)
    begin
      $display("<<VIRL_MEM_WARNING: RMB[3] is unknown>> at time=%t; instance=%m (SNPS_RF_DP_HD_256x80_core)",$realtime);
    end
  end
end

endmodule
`endcelldefine 
`ifdef verifault 
`disable_portfaults 
`nosuppress_faults 
`endif 


`ifdef VIRAGE_FAST_VERILOG

module generic_behav_SNPS_RF_DP_HD_256x80 (  QB, ADRA, DA, WEA, MEA, CLKA, TEST1A, TEST_RNMA, RMEA, RMA, WA, WPULSE, LS, ADRB, MEB, CLKB, TEST1B, RMEB, RMB );

`else

module generic_behav_SNPS_RF_DP_HD_256x80 (  QB, ADRA, DA, WEA, MEA, CLKA, TEST1A, TEST_RNMA, RMEA, RMA, WA, WPULSE, LS, ADRB, MEB, CLKB, TEST1B, RMEB, RMB, CLKB_tcq,notif_adra, notif_da, notif_wea, notif_mea, notif_clka, notif_clkap, notif_clka_CLKB_rise_rise_rec, notif_test1a, notif_test_rnma, notif_rmea, notif_rma, notif_wa, notif_wpulse, notif_ls_a, notif_ls_b, notif_adrb, notif_meb, notif_clkb, notif_clkbp, notif_clkb_CLKA_rise_rise_rec, notif_test1b, notif_rmeb, notif_rmb );

`endif //VIRAGE_FAST_VERILOG

parameter MES_CNTRL = "ON";
parameter debug_mode = 1;
parameter MemFault_Inj = 0;

parameter words = 256, bits = 80, addrbits = 8, timingmode = 1, rmbits=3, wabits=2, wpulsebits=3;

output [bits-1:0] QB;
input [addrbits-1:0] ADRA;
input [bits-1:0] DA;
input WEA;
input MEA;
input CLKA;
input TEST1A;
input TEST_RNMA;
input RMEA;
input [rmbits-1:0] RMA;
input [wabits-1:0] WA;
input [wpulsebits-1:0] WPULSE;
input LS;
input [addrbits-1:0] ADRB;
input MEB;
input CLKB;
input TEST1B;
input RMEB;
input [rmbits-1:0] RMB;


`ifdef VIRAGE_FAST_VERILOG
`else
input CLKB_tcq;
input [79:0] notif_da;
input notif_adra, notif_wea, notif_mea, notif_clka, notif_clkap, notif_clka_CLKB_rise_rise_rec, notif_test1a, notif_test_rnma, notif_rmea, notif_rma, notif_wa, notif_wpulse, notif_ls_a, notif_ls_b, notif_adrb, notif_meb, notif_clkb, notif_clkbp, notif_clkb_CLKA_rise_rise_rec, notif_test1b, notif_rmeb, notif_rmb;

`endif // VIRAGE_FAST_VERILOG

parameter DataX = { bits { 1'bx } };
parameter DataZ = { bits { 1'bz } };


reg mes_all_valid;
reg  [bits-1:0] mem_core_array [0:words -1];
wire  [bits-1:0]  QB_temp;
reg  [bits-1:0]  QB;
reg  [bits-1:0]  QB_local;
reg  [bits-1:0]  QB_local_inj;

reg
        flaga_we_ok,
        flaga_d_ok,
        flaga_adr_ok,
        flaga_range_ok;
reg     flaga_clk_valid;
reg     flaga_adr_x;

reg  [addrbits-1:0] ADRAlatched;
reg  [addrbits-1:0] ADRA_old;
reg  [bits-1:0] DAlatched;
reg  [bits-1:0] DA_old;
reg WEAlatched;
reg WEA_old;
reg  [ wabits -1:0] WAlatched;
reg  [ wabits -1:0] WA_old;
reg  [ wpulsebits -1:0] WPULSElatched;
reg  [ wpulsebits -1:0] WPULSE_old;
reg  TEST1Alatched;
reg  TEST1A_old;
reg  TEST_RNMAlatched;
reg  TEST_RNMA_old;
reg  LSlatchedA;
reg  LS_oldA;
reg diff_me_tcha, diff_me_tcca;
reg  MEAlatched;
reg  MEA_old;
reg  MEA_chk;
real CLKA_TIME;
reg
        flagb_read_ok,
        flagb_rm_ok,
        flagb_adr_ok,
        flagb_range_ok;
reg     flagb_clk_valid;
reg     flagb_adr_x;

event   event_on_B_port;

reg  [addrbits-1:0] ADRBlatched;
reg  [addrbits-1:0] ADRB_old;
reg  TEST1Blatched;
reg  TEST1B_old;
reg  LSlatchedB;
reg  LS_oldB;
reg diff_me_tchb, diff_me_tccb;
reg  MEBlatched;
reg  MEB_old;
reg  MEB_chk;
reg [bits-1:0] bit_corrupt;
reg [bits-1:0] memdata_bef_wrt;
reg flag_simul_clk;
real CLKB_TIME;

`ifdef VIRAGE_FAST_VERILOG
`else

real CLKB_tcqtime;

always @(negedge CLKB_tcq) begin
   CLKB_tcqtime = $realtime;
end
`endif // VIRAGE_FAST_VERILOG

integer i;
reg  [bits-1:0] mem_fault_array_XOR [0:words -1];
reg  [bits-1:0] mem_fault_array_sa0 [0:words -1];
reg  [bits-1:0] mem_fault_array_sa1 [0:words -1];
reg faultinj_en;
initial 
  begin : reinit_fault_blk
    faultinj_en = 1'b0;
`ifdef MEMFAULTINJ
    faultinj_en = 1'b1;
`else
    if (MemFault_Inj == 1)
      faultinj_en = 1'b1;
`endif
    for (i=0; i< words ; i=i+1)
    begin
      if (faultinj_en == 1)
        mem_fault_array_XOR[i]=0;
      else
      begin
        mem_fault_array_sa0[i]={bits{1'b1}};
        mem_fault_array_sa1[i]=0;
      end
    end
    if (faultinj_en == 1)
    begin
      if ($test$plusargs("asap_error"))
        mem_fault_array_XOR[1] = 1'b1 << (bits - 1);
    end
  end



initial
begin
  mes_all_valid = 0;
  MEA_chk = 1'b0;
  MEB_chk = 1'b0;
  diff_me_tcha = 1'b0;
  diff_me_tcca = 1'b0;
  diff_me_tchb = 1'b0;
  diff_me_tccb = 1'b0;
end

function is_adr_Valid;  // 1-bit return value
 input [addrbits-1:0] addr_to_check;
 reg     ret_value;
 begin
  ret_value = `True;
   if ((^addr_to_check) === 1'bx ) begin
    flaga_adr_x = `True;
    flagb_adr_x = `True;
    ret_value = `False;
   end
   is_adr_Valid = ret_value;
end
endfunction

// -------------------------------------------------------------------
// Common tasks
// -------------------------------------------------------------------

// Task to report unknown messages
task report_unknown;
input [8*9:1] signal;
begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid )
    begin
      $display("<<VIRL_MEM_ERR:%0s unknown>> at time=%t; instance=%m (RAMS1H)",signal,$realtime);
    end
end
endtask



task corrupt_all_loc;
 input flag_range_ok;
 integer row_index;
 begin
                                     // do not corrupt entire memory if write to
                                    // out of range address, for all other cases
                                    // flag_range_ok is true, therefore corruption
                                    // will occur as before
  if( flag_range_ok == `True)
   begin
    for( row_index = 0; row_index < words; row_index = row_index + 1) begin
     mem_core_array[ row_index] = DataX;
    end
   end
 end
endtask

task corrupt_cur_loc;
 input[addrbits-1:0] loc_to_corrupt;
begin
  if (is_adr_Valid (loc_to_corrupt))
  begin
  mem_core_array[loc_to_corrupt] = DataX;
  end // if of is_adr_Valid (Adr_to_corrupt)
  else
  begin
      corrupt_all_loc(`True);
  end // else of if is_adr_Valid (loc_to_corrupt)
end
endtask

always @( negedge CLKA or WEA )
begin
  if ( CLKA == 1'b0 )
  begin
    WEA_old <= WEA;
  end
end
always @( negedge CLKA or ADRA )
begin
  if ( CLKA == 1'b0 )
  begin
    ADRA_old <= ADRA;
  end
end
always @( negedge CLKA or DA )
begin
  if ( CLKA == 1'b0 )
  begin
    DA_old <= DA;
  end
end
always @( negedge CLKA or MEA or LS_oldA )
begin
  if ( CLKA == 1'b0 )
  begin
    if ( LS_oldA === 1'b1 && MEA !== 1'bx)
      MEA_old <= 1'b0;
    else
      MEA_old <= MEA;
  end
end
always @( negedge CLKA or TEST1A )
begin
  if ( CLKA == 1'b0 )
  begin
    TEST1A_old <= TEST1A;
  end
end
always @( negedge CLKA or WA )
begin
  if ( CLKA == 1'b0 )
  begin
    WA_old <= WA;
  end
end
always @( negedge CLKA or WPULSE )
begin
  if ( CLKA == 1'b0 )
  begin
    WPULSE_old <= WPULSE;
  end
end
always @( negedge CLKA or TEST_RNMA )
begin
  if ( CLKA == 1'b0 )
  begin
    TEST_RNMA_old <= TEST_RNMA;
  end
end
always @( negedge CLKA or LS )
begin
  if ( CLKA == 1'b0 )
  begin
    LS_oldA <= LS;
  end
end

reg disp_msg_wa;
reg disp_msg_wpulse;
initial begin
  disp_msg_wa = 1'b1;
  disp_msg_wpulse = 1'b1;
end
always @(WA_old or RMA)
begin
  disp_msg_wa = 1'b1;
end
always @(WPULSE_old or RMA)
begin
  disp_msg_wpulse = 1'b1;
end
wire disp_msg_wr;
assign disp_msg_wr = disp_msg_wa | disp_msg_wpulse;


// Perform Assist pins recommended value check against database value.
task checkassist_write;
begin
  casex ({RMEA,RMA})
     4'b1000 :
                          begin
                            if ((WAlatched !== 2'b11) && disp_msg_wa === 1'b1)
                            begin
                              if ((MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
                              begin
                                $display("<<VIRL_MEM_WARNING:WA = %b is not recommended value in RM0 mode. >> at time=%t; instance=%m",WAlatched,$realtime);
                                 disp_msg_wa = 1'b0;
                              end
                            end
                            if ((WPULSElatched !== 3'b000) && disp_msg_wpulse === 1'b1)
                            begin
                              if ((MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
                              begin
                                $display("<<VIRL_MEM_WARNING:WPULSE = %b is not recommended value in RM0 mode. >> at time=%t; instance=%m",WPULSElatched,$realtime);
                                 disp_msg_wpulse = 1'b0;
                              end
                            end
                          end

     4'b1001 :
                          begin
                            if ((WAlatched !== 2'b11) && disp_msg_wa === 1'b1)
                            begin
                              if ((MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
                              begin
                                $display("<<VIRL_MEM_WARNING:WA = %b is not recommended value in RM1 mode. >> at time=%t; instance=%m",WAlatched,$realtime);
                                 disp_msg_wa = 1'b0;
                              end
                            end
                            if ((WPULSElatched !== 3'b000) && disp_msg_wpulse === 1'b1)
                            begin
                              if ((MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
                              begin
                                $display("<<VIRL_MEM_WARNING:WPULSE = %b is not recommended value in RM1 mode. >> at time=%t; instance=%m",WPULSElatched,$realtime);
                                 disp_msg_wpulse = 1'b0;
                              end
                            end
                          end

     4'b1010 :
                          begin
                            if ((WAlatched !== 2'b10) && disp_msg_wa === 1'b1)
                            begin
                              if ((MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
                              begin
                                $display("<<VIRL_MEM_WARNING:WA = %b is not recommended value in RM2 mode. >> at time=%t; instance=%m",WAlatched,$realtime);
                                 disp_msg_wa = 1'b0;
                              end
                            end
                            if ((WPULSElatched !== 3'b000) && disp_msg_wpulse === 1'b1)
                            begin
                              if ((MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
                              begin
                                $display("<<VIRL_MEM_WARNING:WPULSE = %b is not recommended value in RM2 mode. >> at time=%t; instance=%m",WPULSElatched,$realtime);
                                 disp_msg_wpulse = 1'b0;
                              end
                            end
                          end

     4'b1011 :
                          begin
                            if ((WAlatched !== 2'b10) && disp_msg_wa === 1'b1)
                            begin
                              if ((MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
                              begin
                                $display("<<VIRL_MEM_WARNING:WA = %b is not recommended value in RM3 mode. >> at time=%t; instance=%m",WAlatched,$realtime);
                                 disp_msg_wa = 1'b0;
                              end
                            end
                            if ((WPULSElatched !== 3'b000) && disp_msg_wpulse === 1'b1)
                            begin
                              if ((MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
                              begin
                                $display("<<VIRL_MEM_WARNING:WPULSE = %b is not recommended value in RM3 mode. >> at time=%t; instance=%m",WPULSElatched,$realtime);
                                 disp_msg_wpulse = 1'b0;
                              end
                            end
                          end

     4'b1100 :
                          begin
                            if ((WAlatched !== 2'b01) && disp_msg_wa === 1'b1)
                            begin
                              if ((MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
                              begin
                                $display("<<VIRL_MEM_WARNING:WA = %b is not recommended value in RM4 mode. >> at time=%t; instance=%m",WAlatched,$realtime);
                                 disp_msg_wa = 1'b0;
                              end
                            end
                            if ((WPULSElatched !== 3'b000) && disp_msg_wpulse === 1'b1)
                            begin
                              if ((MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
                              begin
                                $display("<<VIRL_MEM_WARNING:WPULSE = %b is not recommended value in RM4 mode. >> at time=%t; instance=%m",WPULSElatched,$realtime);
                                 disp_msg_wpulse = 1'b0;
                              end
                            end
                          end

     4'b1111 , 4'b1110 , 4'b1101 :
                          begin
                            if ((WAlatched !== 2'b01) && disp_msg_wa === 1'b1)
                            begin
                              if ((MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
                              begin
                                $display("<<VIRL_MEM_WARNING:WA = %b is not recommended value in RM5 mode. >> at time=%t; instance=%m",WAlatched,$realtime);
                                 disp_msg_wa = 1'b0;
                              end
                            end
                            if ((WPULSElatched !== 3'b000) && disp_msg_wpulse === 1'b1)
                            begin
                              if ((MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
                              begin
                                $display("<<VIRL_MEM_WARNING:WPULSE = %b is not recommended value in RM5 mode. >> at time=%t; instance=%m",WPULSElatched,$realtime);
                                 disp_msg_wpulse = 1'b0;
                              end
                            end
                          end

     4'b0xxx :
                          begin
                            if ((WAlatched !== 2'b10) && disp_msg_wa === 1'b1)
                            begin
                              if ((MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
                              begin
                                $display("<<VIRL_MEM_WARNING:WA = %b is not recommended value. >> at time=%t; instance=%m",WAlatched,$realtime);
                                 disp_msg_wa = 1'b0;
                              end
                            end
                            if ((WPULSElatched !== 3'b000) && disp_msg_wpulse === 1'b1)
                            begin
                              if ((MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
                              begin
                                $display("<<VIRL_MEM_WARNING:WPULSE = %b is not recommended value. >> at time=%t; instance=%m",WPULSElatched,$realtime);
                                 disp_msg_wpulse = 1'b0;
                              end
                            end
                          end

  endcase
end
endtask



// Perform Sanity Check on Port A, Corrupt memory if required

task checkSanityOnAport;
begin

 #0;                // let CLOCK and NOTIFIER stuff execute first
 case ( {flaga_adr_ok, flaga_we_ok, flaga_d_ok} ) // only 1 and 0

  3'b111   : ;                                                // everything ok!!!

  3'b101,
  3'b100   : corrupt_cur_loc(ADRAlatched);          // WE is unstable

  3'b110   : if (WEAlatched !== 1'b0)
              corrupt_cur_loc(ADRAlatched);         // Data is unstable
  3'b000,
  3'b001   : corrupt_all_loc(flaga_range_ok);            // ADR and WE unstable
  3'b010,
  3'b011   : if (WEAlatched !== 1'b0)    // ADR unstable, WE stable
              corrupt_all_loc(flaga_range_ok);
 endcase
end
endtask

// PORT A FUNCTIONALITY (Handle violation behavior)


initial
 begin : reinit_uut_blkA
  flaga_adr_ok  = `True;
  flaga_range_ok = `True;
  flaga_we_ok   = `True;
  flaga_d_ok    = `True;
  flaga_clk_valid = `True;
  flaga_adr_x = `False;
 end
`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_dont_reinit *)
`endif
initial
begin
  mes_all_valid = 1'b0;
  QB_local <= 80'bx;
end


`ifdef VIRAGE_FAST_VERILOG
`else

always @(notif_wea)            // PORT A WE violation
 begin
 
    flaga_we_ok = `False;
    checkSanityOnAport;
 end
always @(notif_clka)            // PORT A CLK violation
 begin

if (diff_me_tcha === 1'b1 || MEA !== 1'b0)
begin
  if ( $realtime == CLKB_TIME )
   MEB_chk = MEB_old;
  else
   MEB_chk = MEBlatched;

  if ( CLKB_tcq == 1'b1 && MEB_chk === 1'b1 )
   begin
    disable OUTPUT_1;
    flagb_read_ok = `False;
    -> event_on_B_port;
   end
  flaga_adr_ok = `False;
  flaga_we_ok  = `False;
   corrupt_all_loc(`True);
end 
 end

always @(notif_clkap)            // PORT A CLK violation
 begin

if (diff_me_tcca === 1'b1 || MEA !== 1'b0)
begin
  if ( $realtime == CLKB_TIME )
   MEB_chk = MEB_old;
  else
   MEB_chk = MEBlatched;

  if ( CLKB_tcq == 1'b1 && MEB_chk === 1'b1 )
   begin
    disable OUTPUT_1;
    flagb_read_ok = `False;
    -> event_on_B_port;
   end
  flaga_adr_ok = `False;
  flaga_we_ok  = `False;
  corrupt_all_loc(`True);
  end 
 end


always @(notif_mea)            // PORT A ME violation
 begin
 
  if ( $realtime == CLKB_TIME )
   MEB_chk = MEB_old;
  else
   MEB_chk = MEBlatched;
  if (MEB_chk === 1'b1 && (CLKB_tcq == 1'b1 || (CLKB_tcqtime == $realtime)))
   begin
    disable OUTPUT_1;
    flagb_read_ok = `False;
    -> event_on_B_port;
   end
  flaga_adr_ok = `False;
  corrupt_all_loc(`True);
end


always @(notif_adra)     // PORT A ADR violation
 begin

    if (MEBlatched === 1'b1 && WEAlatched === 1'b1 && (CLKB_tcq == 1'b1 || (CLKB_tcqtime == $realtime)))
     begin
      disable OUTPUT_1;
      flagb_read_ok = `False;
      -> event_on_B_port;
     end
    flaga_adr_ok = `False;
    corrupt_all_loc(`True);
 end // end of always block blk_notif_addr_0

genvar nk;
generate for (nk=0; nk<80; nk=nk+1)
begin : ENDA_blk

reg [79:0]  tmp_DA;

always @(notif_da[nk])
begin
    mem_core_array[ADRA_old][nk] = 1'bX;
end // end of always block blk_notif_di_0
end
endgenerate

always @(notif_test1a)               //PORT A TEST1 violation
 begin
    flaga_d_ok  = `False;
    checkSanityOnAport;
 end // end of always block blk_notif_test1_0

always @(notif_test_rnma)               //PORT A TEST_RNM violation
 begin
     corrupt_all_loc(`True);
 end // end of always block blk_notif_test_rnm_0

always @(notif_ls_a)           
begin
  corrupt_all_loc(`True);
end


always @(notif_rma)               //PORT A RM violation
 begin
    flaga_d_ok  = `False;
    checkSanityOnAport;
 end
always @(notif_rmea)               //PORT A RME violation
 begin
    flaga_d_ok  = `False;
    checkSanityOnAport;
 end



always @(notif_clka_CLKB_rise_rise_rec)
 begin

      flag_simul_clk = 1'b1;
      -> event_on_B_port;
 end

// WA violation, WPULSE violation; CEM
always @(notif_wa or notif_wpulse)
begin : blk_notif_wa_wp_0
  flaga_we_ok = `False;
  corrupt_all_loc(`True);
end // end of always block blk_notif_wa_wp_0

`endif // VIRAGE_FAST_VERILOG


always @(negedge CLKA)          // reset for next cycle
 begin
  if ( CLKA !== 1'bx ) begin
   #0.001;
   flaga_range_ok  = `True;
   flaga_clk_valid = `True;
   flaga_adr_x = `False;
   flaga_adr_ok  = `True;
    flaga_we_ok   = `True;
    flaga_d_ok    = `True;
  end
  else
  begin
    if (MEA !== 1'b0)
    begin
    report_unknown("CLKA");
    flaga_clk_valid = `False;
    corrupt_all_loc(`True);
    end
  end
end

// PORT A FUNCTIONALITY (Handle normal read/write)



always @(posedge CLKA)
begin
  memdata_bef_wrt = DataX;
  if (CLKA === 1'bx)
  begin
    #0;
    if (diff_me_tcha === 1'b1 || MEA !== 1'b0)
    begin
      report_unknown("CLKA");
      flaga_clk_valid = `False;
      corrupt_all_loc(`True);
    end // end of if diff_me_tch
  end // end of if (CLKA === 1'bx)

  CLKA_TIME = $realtime;
  MEAlatched = MEA_old;
  WEAlatched = WEA_old;
  WAlatched = WA_old;
  WPULSElatched = WPULSE_old;
  TEST1Alatched = TEST1A_old;
  TEST_RNMAlatched = TEST_RNMA_old;
  ADRAlatched = ADRA_old;
  DAlatched = DA_old;
  LSlatchedA = LS_oldA;
  if ((LSlatchedA === 1'b1 && MEAlatched !== 1'bx) || TEST_RNMAlatched ===  1'b1)
  begin
    MEAlatched = 1'b0;
  end
  if ((LSlatchedA === 1'bX) && (MEAlatched !== 1'b0 && WEAlatched !== 1'b0 ))
  begin
    report_unknown("LS");
    corrupt_all_loc(`True);
    QB_local = 80'bx;
  end
  else
  begin

    if ((^DAlatched === 1'bx) && MEAlatched == 1'b1)
    begin
      if (DAlatched === 80'bx)
      begin
        flaga_d_ok  = `False;
      end
      if (WEAlatched !== 1'b0)
      begin
        report_unknown("DA");
      end  
    end

  if (CLKA === 1'bx && (diff_me_tcha === 1'b1 || MEA !== 1'b0))
  begin
    report_unknown("CLKA");
    corrupt_all_loc(flaga_range_ok);
  end
  else if (flaga_clk_valid)
  begin
    if (MEAlatched !== 1'b0)
    begin
      if (TEST1Alatched === 1'bx)
      begin
        report_unknown("TEST1A");
        if (WEAlatched === 1'b1)
        begin
          flaga_d_ok = `False;
        end
      end
      if (TEST_RNMAlatched === 1'bx && WEAlatched !== 1'b0)
      begin
        report_unknown("TEST_RNMA");
        flaga_we_ok = `False;
        corrupt_all_loc(`True);
      end
      if ((^WAlatched === 1'bX) && (WEAlatched !== 1'b0))
      begin
        corrupt_all_loc(`True);
        flaga_we_ok = `False;
        report_unknown("WA");
      end
      if ((^WPULSElatched === 1'bX) && (WEAlatched !== 1'b0))
      begin
        corrupt_all_loc(`True);
        flaga_we_ok = `False;
        report_unknown("WPULSE");
      end
      if (WEAlatched === 1'bx)
      begin
        report_unknown("WEA");
        flaga_we_ok  = `False;
      end
      if (MEAlatched !== 1'b1)
        flaga_we_ok = `False;       // don't know if cycle is On or Off
      if (is_adr_Valid(ADRAlatched) != `True ) 
      begin
        if ( flaga_adr_x ) 
        begin
          report_unknown("ADRA");
        end
        flaga_adr_ok = `False;
        if( !(flaga_adr_x) )
        begin
          if(( MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid == 1'b1)
            $display("<<VIRL_MEM_WARNING:address ADRA is out of range>>, RANGE:0 to 255 time=%0t instance=%m\n",$time);
          flaga_range_ok = `False;
        end
      end
      if ( MEAlatched === 1'bx )
      begin
        report_unknown("MEA");
        corrupt_all_loc(flaga_range_ok);
      end
      else
      begin
        if (WEAlatched == 1'b1)
        begin
          if (RMEA === 1'bX)
          begin
            flaga_d_ok = `False;
            report_unknown("RMEA");
          end
           if (^RMA === 1'bx)
           begin
             flaga_d_ok = `False;
             if (RMEA !== 1'bx)
             begin
               report_unknown("RMA");
             end
           end
        end
         if (flaga_we_ok && flaga_adr_ok && flaga_d_ok && (WEAlatched == 1'b1))
         begin
           memdata_bef_wrt = mem_core_array[ADRAlatched] ;
         end
         if (flaga_we_ok && flaga_adr_ok && flaga_d_ok && (WEAlatched == 1'b1) && TEST_RNMAlatched === 1'b0)
         begin
           if (CLKB === 1'b1 && TEST1Blatched === 1'b1 )
           begin
             if ((MEAlatched === MEBlatched) && (ADRAlatched === ADRBlatched))
             begin
               if(CLKA_TIME!=CLKB_TIME)
                 flagb_read_ok <= #0.001 `False;
             end
           end
           if (disp_msg_wr) checkassist_write;
           mem_core_array[ADRAlatched] = DAlatched;  // write data in
           if (mes_all_valid == 0) mes_all_valid = 1;
	 end
         else
         begin
           checkSanityOnAport;
         end
  `ifdef VIRAGE_FAST_VERILOG
//-- Simultaneous Contention case
        #0.0;
        if(CLKA_TIME==CLKB_TIME)
        begin
          if((ADRAlatched===ADRBlatched) && ((MEAlatched && MEBlatched) || (WEAlatched && ((MEAlatched===1'bx && MEBlatched) || (MEAlatched && MEBlatched===1'bx)))))
          begin
            if(WEAlatched!==1'b0)
            begin
              if(MEBlatched)
              begin
                if((MES_CNTRL=="ON" || MES_CNTRL=="ERR")&& debug_mode == 1 && mes_all_valid == 1) 
                begin
                  $display("<<VIRL_MEM_ERR: Simultaneous access to the same address on B-port(READ) and A-port(WRITE)>> time = %t, instance = %m (RAMS1H)",$realtime);
                end // end of if(MES_CNTRL=="ON")
                flag_simul_clk = 1'b1;
                if (flagb_read_ok && !TEST1Blatched)
                begin
                  -> event_on_B_port;
                end
              end
            end
      end
    end
  `endif // VIRAGE_FAST_VERILOG 

       end
     end
   end
 end
end





always @ (TEST1A)
begin
  if ( CLKA === 1'b1 && MEA_old === 1'b1 && (LSlatchedA === 1'b0)  )
  begin
    if (WEA_old === 1'b1 )
    begin
      flaga_we_ok = 1'b0;
      corrupt_cur_loc(ADRAlatched);
    end
    QB_local = 80'bx;
    flagb_read_ok = `False;
    flagb_read_ok <= #0.002 `True;
  end
  if ( TEST1A == 1'b1)
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid == 1'b1)
    begin
   $display("<<VIRL_MEM_WARNING: Tcc value in the RAM model is for TEST1A=1'b0,but input value is TEST1A=1'b1>> (time %0t) instance=%m\n\n", $time);
    end
end
always @(TEST_RNMA)
begin
  if (TEST1Alatched === 1'b1 && MEAlatched === 1'b1 && WEAlatched === 1'b1 && CLKA === 1'b1)
  begin
    flaga_d_ok  = `False;
    checkSanityOnAport;
  end
end


always @ (TEST1A)
begin
  if ( TEST1A == 1'b1)
  begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid == 1'b1)
    begin
    $display("<<VIRL_MEM_WARNING: Tcc value in the RAM model is for TEST1A=1'b0, but input value is TEST1A=1'b1 >>(time %0t) instance=%m", $time);
    end
  end
end // end of TEST1A


always @(negedge CLKB)
begin
 flag_simul_clk <= #0.002 1'b0;
end
always @(negedge CLKA)
begin
  if(CLKB != 1'b1)
  flag_simul_clk <= #0.002 1'b0;
end


always @( negedge CLKB or ADRB )
begin
  if ( CLKB == 1'b0 )
  begin
    ADRB_old <= ADRB;
  end
end
always @( negedge CLKB or MEB or LS_oldB )
begin
  if ( CLKB == 1'b0 )
  begin
    if ( LS_oldB === 1'b1 && MEB !== 1'bx)
      MEB_old <= 1'b0;
    else
      MEB_old <= MEB;
  end
end
always @( negedge CLKB or TEST1B )
begin
  if ( CLKB == 1'b0 )
  begin
    TEST1B_old <= TEST1B;
  end
end
always @( negedge CLKB or LS )
begin
  if ( CLKB == 1'b0 )
  begin
    LS_oldB <= LS;
  end
end

// PORT B FUNCTIONALITY (Handle violation behavior)


initial
 begin : reinit_uut_blkB
  flagb_adr_ok  = `True;
  flagb_range_ok = `True;
  flagb_read_ok = `True;
  flagb_rm_ok = `True;
  flagb_clk_valid = `True;
  flagb_adr_x = `False;
 end


`ifdef VIRAGE_FAST_VERILOG
`else

always @(notif_clkb)            // PORT B CLK violation
 begin

if (diff_me_tchb === 1'b1 || MEB !== 1'b0)
begin
  if ( $realtime == CLKA_TIME )
   MEA_chk = MEA_old;
  else
   MEA_chk = MEAlatched;
  disable OUTPUT_1;
  flagb_adr_ok = `False;
  flagb_read_ok = `False;     // irrespective of WE
  -> event_on_B_port;
end 
 end

always @(notif_clkbp)            // PORT B CLK violation
 begin

if (diff_me_tccb === 1'b1 || MEB !== 1'b0)
begin
  if ( $realtime == CLKA_TIME )
   MEA_chk = MEA_old;
  else
   MEA_chk = MEAlatched;
  disable OUTPUT_1;
  flagb_adr_ok = `False;
  flagb_read_ok = `False;     // irrespective of WE
  -> event_on_B_port;
  end 
 end


always @(notif_meb)            // PORT B ME violation
 begin
 
  flagb_adr_ok = `False;
  flagb_read_ok = `False;     // irrespective of WE
  disable OUTPUT_1;
  -> event_on_B_port;
end


always @(notif_adrb)     // PORT B ADR violation
 begin

    flagb_adr_ok = `False;
    flagb_read_ok = `False; // irrespective of WE
    disable OUTPUT_1;
    -> event_on_B_port;
 end // end of always block blk_notif_addr_1


always @(notif_test1b)               //PORT B TEST1 violation
 begin
    disable OUTPUT_1;
    flagb_read_ok = `False;
    -> event_on_B_port;
 end // end of always block blk_notif_test1_1

always @(notif_ls_b)           
begin
    disable OUTPUT_1;
  flagb_read_ok = `False;
  -> event_on_B_port;
end
always @(notif_rmb)               //PORT B RM violation
 begin
    disable OUTPUT_1;
    flagb_read_ok = `False;
    -> event_on_B_port;
 end // end of always block blk_notif_rm_1
always @(notif_rmeb)               //PORT B RME violation
 begin
    disable OUTPUT_1;
    flagb_read_ok = `False;
    -> event_on_B_port;
 end // end of always block blk_notif_rmen_1





always @(notif_clkb_CLKA_rise_rise_rec)
 begin

      flag_simul_clk = 1'b1;
      -> event_on_B_port;
 end

`endif // VIRAGE_FAST_VERILOG


always @(negedge CLKB)          // reset for next cycle
 begin
 #0.001;
  if ( CLKB !== 1'bx ) begin
   #0.001;
   flagb_range_ok  = `True;
   flagb_read_ok = `True;
   flagb_rm_ok = `True;
   flagb_clk_valid = `True;
   flagb_adr_x = `False;
   flagb_adr_ok  = `True;
   TEST1Blatched = 1'b0;
  end
  else
  begin
    if (MEB !== 1'b0)
    begin
    report_unknown("CLKB");
    flagb_clk_valid = `False;
    QB_local =  DataX;
    end
  end
end

// PORT B FUNCTIONALITY (Handle normal read/write)



always @(posedge CLKB)
begin
  if (CLKB === 1'bx)
  begin
    #0;
    if (diff_me_tchb === 1'b1 || MEB !== 1'b0)
    begin
      report_unknown("CLKB");
      flagb_clk_valid = `False;
      QB_local =  DataX;
    end // end of if diff_me_tch
  end // end of if (CLKB === 1'bx)

  CLKB_TIME = $realtime;
  MEBlatched = MEB_old;
  TEST1Blatched = TEST1B_old;
  ADRBlatched = ADRB_old;
  LSlatchedB = LS_oldB;
  if (LSlatchedB === 1'b1 && MEBlatched !== 1'bx)
  begin
    MEBlatched = 1'b0;
  end
  if ((LSlatchedB === 1'bX) && (MEBlatched !== 1'b0))
  begin
    report_unknown("LS");
    corrupt_all_loc(`True);
    QB_local = 80'bx;
  end
  else
  begin

  if (!flagb_clk_valid) begin
    QB_local =  DataX;
  end 
  else
  begin
    if (MEBlatched !== 1'b0)
    begin
      if (TEST1Blatched === 1'bx)
      begin
        report_unknown("TEST1B");
        QB_local = 80'bx;
        flagb_read_ok = `False;
      end
      if (is_adr_Valid(ADRBlatched) != `True ) 
      begin
        if ( flagb_adr_x ) 
        begin
          report_unknown("ADRB");
        end
        flagb_adr_ok = `False;
        if( !(flagb_adr_x) )
        begin
          if(( MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid == 1'b1)
            $display("<<VIRL_MEM_WARNING:address ADRB is out of range>>, RANGE:0 to 255 time=%0t instance=%m\n",$time);
          flagb_range_ok = `False;
        end
      end
      if ( MEBlatched === 1'bx )
      begin
        report_unknown("MEB");
          QB_local =  DataX;
      end
      else
      begin
  `ifdef VIRAGE_FAST_VERILOG
//-- Simultaneous Contention case
        #0.0;
        if(CLKB_TIME==CLKA_TIME)
        begin
          if((ADRBlatched===ADRAlatched) && ((MEBlatched && MEAlatched) || (WEAlatched && ((MEBlatched===1'bx && MEAlatched) || (MEBlatched && MEAlatched===1'bx)))))
          begin
            if(WEAlatched!==1'b0)
            begin
              if(MEBlatched)
              begin
                if((MES_CNTRL=="ON" || MES_CNTRL=="ERR")&& debug_mode == 1 && mes_all_valid == 1) 
                begin
                  $display("<<VIRL_MEM_ERR: Simultaneous access to the same address on B-port(READ) and A-port(WRITE)>> time = %t, instance = %m (RAMS1H)",$realtime);
                end // end of if(MES_CNTRL=="ON")
                flag_simul_clk = 1'b1;
                if (flagb_read_ok && !TEST1Blatched)
                begin
                  -> event_on_B_port;
                end
              end
            end
            else if(WEAlatched != 1)
            begin
              -> event_on_B_port;
            end 
      end
    end
  `endif // VIRAGE_FAST_VERILOG 

        if (TEST1Blatched == 1 )
        begin
          #0.001;
          flagb_read_ok = `False;
          -> event_on_B_port;
          @(negedge CLKB)
          if ((MEAlatched === MEBlatched) && (ADRAlatched === ADRBlatched) && WEAlatched === 1'b1 && CLKA_TIME == $realtime)
          begin
          flagb_read_ok = `False;
          QB_local <= DataX;
          end
        begin
         #0; -> event_on_B_port;
        end
	  flag_simul_clk <= #0.002 1'b0;
        end
        else
// Read
    `ifdef VIRAGE_FAST_VERILOG
       if(!(((CLKB_TIME==CLKA_TIME)) && ((ADRBlatched===ADRAlatched) && ((MEBlatched && MEAlatched) || (WEAlatched && ((MEBlatched===1'bx && MEAlatched) || (MEBlatched && MEAlatched===1'bx)))))))
         -> event_on_B_port;
    `else
        -> event_on_B_port;
    `endif
       end
     end
   end
 end
end


// START OF PORT B READ-OUT BLOCK 

always @(event_on_B_port)
begin
  #0; // let CLOCK and NOTIFIER module execute first
  if (^RMB === 1'bx) begin
    flagb_rm_ok = `False;
    if (RMEB !== 1'bx)
      report_unknown("RMB");
    else
      report_unknown("RMEB");
  end
  `ifdef VIRAGE_FAST_VERILOG
  `else
     QB_local = DataX;
     #0.001
  `endif // VIRAGE_FAST_VERILOG
  if (flagb_adr_ok && (ADRBlatched <= words -1) && flagb_read_ok && flagb_rm_ok) 
  begin : OUTPUT_1
    if ((MEAlatched === MEBlatched) && (ADRAlatched === ADRBlatched) && WEAlatched === 1'b1 && (flag_simul_clk === 1'b1))
    begin
      bit_corrupt = memdata_bef_wrt ^ DAlatched;
      if (TEST1Blatched === 1'b1 )
      begin 
        QB_local = (DataX & bit_corrupt)^memdata_bef_wrt;
        if ( CLKB === 1'b1)
        begin
          QB_local =   DataX;
        end
        flag_simul_clk <= @(negedge CLKB) 1'b0;
      end
      else
      begin
        QB_local = (DataX & bit_corrupt)^memdata_bef_wrt;
        flag_simul_clk <= 1'b0;
      end 
      if (faultinj_en == 1)
      begin
        QB_local <= QB_local^mem_fault_array_XOR[ADRBlatched];
      end
      else
      begin
        QB_local <= ((QB_local&mem_fault_array_sa0[ADRBlatched])|mem_fault_array_sa1[ADRBlatched]);
      end
    end
    else
    begin
    if (flagb_read_ok)
    begin
      if (faultinj_en == 1)
      begin
        
            QB_local = mem_core_array[ADRBlatched]^mem_fault_array_XOR[ADRBlatched];

      end
      else
      begin
        
            QB_local = ((mem_core_array[ADRBlatched]&mem_fault_array_sa0[ADRBlatched])|mem_fault_array_sa1[ADRBlatched]);

      end
    end
    if (mes_all_valid == 0) mes_all_valid = 1;
    end // end of else of Simul block
  end // end of if (flagb_adr_ok && (ADRBlatched))
  else
  begin
    if (flag_simul_clk === 1'b0 || TEST1Blatched === 1'b1 || (ADRBlatched > words -1))
      QB_local <=   DataX;
      flagb_read_ok = `True;
        if (TEST1Blatched === 1'b0 )
          flag_simul_clk <= #0.002 1'b0;
  end
  flagb_rm_ok = `True;
end // end of always @(event_on_B_port

// END OF PORT B READ-OUT BLOCK



assign QB_temp = QB_local;

// Final Output Update
always @ ( QB_temp )
begin : blk_output_1
     QB <= QB_temp;
end // end of always block blk_output_1


// START OF PORT B OUTPUT ENABLE BLOCK



always @ (TEST1B)
begin
  if ( CLKB === 1'b1 && MEB_old === 1'b1 && (LSlatchedB === 1'b0)  )
  begin
    QB_local = 80'bx;
    flagb_read_ok = `False;
  end
  if ( TEST1B == 1'b1)
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid == 1'b1)
    begin
   $display("<<VIRL_MEM_WARNING: Tcc value in the RAM model is for TEST1B=1'b0,but input value is TEST1B=1'b1>> (time %0t) instance=%m\n\n", $time);
    end
end


always @ (TEST1B)
begin
  if ( TEST1B == 1'b1)
  begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid == 1'b1)
    begin
    $display("<<VIRL_MEM_WARNING: Tcc value in the RAM model is for TEST1B=1'b0, but input value is TEST1B=1'b1 >>(time %0t) instance=%m", $time);
    end
  end
end // end of TEST1B


endmodule
