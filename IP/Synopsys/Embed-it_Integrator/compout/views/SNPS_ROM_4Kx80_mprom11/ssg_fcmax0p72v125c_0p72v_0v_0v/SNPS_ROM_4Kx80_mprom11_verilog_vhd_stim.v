//---------------------------------------------------------------------
//               Copyright(c) Synopsys, Inc.                           
//     All Rights reserved - Unpublished -rights reserved under        
//     the Copyright laws of the United States of America.             
//                                                                     
//  U.S. Patents: 7,093,156 B1 and 7,406,620 B2 (and more pending).    
//                                                                     
//  This file includes the Confidential information of Synopsys, Inc.  
//  and GLOBALFOUNDRIES.                                               
//  The receiver of this Confidential Information shall not disclose   
//  it to any third party and shall protect its confidentiality by     
//  using the same degree of care, but not less than a reasonable      
//  degree of care, as the receiver uses to protect receiver's own     
//  Confidential Information.                                          
//  Licensee acknowledges and agrees that all output generated for     
//  Licensee by Synopsys, Inc. as described in the pertinent Program   
//  Schedule(s), or generated by Licensee through use of any Compiler  
//  licensed hereunder contains information that complies with the     
//  Virtual Component Identification Physical Tagging Standard (VCID)  
//  as maintained by the Virtual Socket Interface Alliance (VSIA).     
//  Such information may be expressed in GDSII Layer 63 or other such  
//  layer designated by the VSIA, hardware definition languages, or    
//  other formats.  Licensee is not authorized to alter or change any  
//  such information.                                                  
//---------------------------------------------------------------------
//                                                                     
//  Built for linux64 and running on linux64.                          
//                                                                     
//  Software           : Rev: U-2022.12                                
//  Library Format     : Rev: 1.05.00                                  
//  Compiler Name      : gf22nsd41p10s1dvl01msa03                      
//  Platform           : Linux3.10.0-957.5.1.el7.x86_64                
//                     : #1 SMP Wed Dec 19 10:46:58 EST 2018x86_64     
//  Date of Generation : Fri Dec 09 14:06:55 CET 2022                  
//                                                                     
//---------------------------------------------------------------------
//   --------------------------------------------------------------     
//                       Template Revision : 3.1.0                      
//   --------------------------------------------------------------     

//                      * Synchronous, 1-Port ROM *                   
//             * Verilog Testbench ( Functional & Timing ) *          
// * Verilog Testbench for comparison of Behavioral verilog & Behavioral VHDL models * 
//                THIS IS A SYNCHRONOUS 1-PORT MEMORY MODEL           
//                                                                    
//   Memory Name:SNPS_ROM_4Kx80_mprom11                               
//   Memory Size:4096 words x 80 bits                                 
//                                                                    
//                               PORT NAME                            
//                               ---------                            
//               Output Ports                                         
//                                   Q[79:0]                          
//               Input Ports:                                         
//                                   ADR[11:0]                        
//                                   ME                               
//                                   CLK                              
//                                   LS                               
//                                   TEST1                            
//                                   RM[3:0]                          
//                                   RME                              
// -------------------------------------------------------------------- 

`timescale 1 ns / 1 ps 
module test;

wire [79:0] Q;
wire [79:0] Q_BEHAV;
reg [11:0] ADR;
reg ME;
reg CLK;
reg LS;
reg TEST1;
reg [3:0] RM;
reg RME;
SNPS_ROM_4Kx80_mprom11_behav  top_behav (  .Q( Q_BEHAV), .ADR( ADR), .ME( ME), .CLK( CLK), .LS( LS), .TEST1( TEST1), .RM( RM), .RME( RME) );
SNPS_ROM_4Kx80_mprom11  top_struct (  .Q( Q), .ADR( ADR), .ME( ME), .CLK( CLK), .LS( LS), .TEST1( TEST1), .RM( RM), .RME( RME) );

reg synthflagrtl;
reg flagrtl;

initial begin
  ADR = 0;
  ME = 0;
//  #0;
  CLK = 0;
  LS = 0;
  TEST1 = 0;
  RM = 0;
  RME = 0;
  `ifdef VIRAGE_MONITOR_SIGNALS
     $monitor ( "Time = %t Q=%h ADR=%h ME=%h CLK=%h LS=%h TEST1=%h RM=%h RME=%h ", $realtime, Q, ADR, ME, CLK, LS, TEST1, RM, RME);
  `endif
    //$vcdplusfile("SNPS_ROM_4Kx80_mprom11.vpd");
    //$vcdpluson;
    //$dumpfile("SNPS_ROM_4Kx80_mprom11.vcd");
    //$dumpvars();
  //$shm_open("waves.shm"); 
  //$shm_probe("AC"); 
    //$sdf_annotate( "SNPS_ROM_4Kx80_mprom11.sdf");
end
reg [10*10:1] param_name;
real param_val_tcc;
integer vec;
integer j;
integer test_status;

`ifdef epicsim
always @(CLK or Q_BEHAV)
begin
 $fdisplay(fptro,"%0t      %h",$realtime,Q_BEHAV);
end
`endif

integer i,m;
integer no_clk;
reg restart_clk;
integer simul_clk;
reg dis_compare;
reg [79:0] OP_Q;

initial
  OP_Q = 80'b0;

task compare_Q;
  output [79:0] OP_Q;
  input [79:0] Q;
  input [79:0] Q_BEHAV;

    if ( Q === 80'bz && Q_BEHAV === 80'bz )
      OP_Q = 80'b0;
    else if ( Q === 80'bx && Q_BEHAV === 80'bx  )
      OP_Q = 80'b0;
    else begin
      for ( i = 0; i <= 79; i = i + 1 ) begin
         OP_Q[i] = (((Q_BEHAV[i] === 1'bx && Q[i] === 1'bx) || ( Q_BEHAV[i] === 1'bz && Q[i] === 1'bz))?0:(Q_BEHAV[i] ^ Q[i]));
      end
    end
endtask

always @( Q or Q_BEHAV ) begin
  #0;
    if ( (|( Q ^ Q )) == 0 && (|( Q_BEHAV ^ Q_BEHAV )) == 0 ) begin
     OP_Q = 80'b0;
     #0.001 compare_Q ( OP_Q, Q, Q_BEHAV );
    end
    else if ( Q === 80'bz && Q_BEHAV === 80'bz )
      OP_Q = 80'b0;
     else if ( dis_compare ) begin 
       if ( Q_BEHAV === 80'bx  ) 
         OP_Q = 80'b0;
     end
    else if ( Q === 80'bx && Q_BEHAV === 80'bx  )
      OP_Q = 80'b0;
    else begin
      OP_Q = 80'b0;
      #0.001 compare_Q ( OP_Q, Q, Q_BEHAV );
    end
end

always @(OP_Q) begin
   if ( OP_Q !== 80'b0 ) begin
     test_status = test_status + 1;
     $display( $realtime, , "ERROR_MODEL: Q = %h, Q_BEHAV = %h", Q, Q_BEHAV );
   end
   else begin
     $display( $realtime, , "OP_Q = %h", OP_Q );
   end
end
integer test_num;
integer err_cnt;

integer cnt_net;
reg [79:0] Q_netprev;
always @( Q )
begin
  if ( Q !== Q_netprev )
  begin
    cnt_net = cnt_net + 1;
    Q_netprev = Q; 
  end
  if ( cnt_net === 0 )
  begin
    test_status = test_status + 1;
    $display( $realtime, , "ERROR_MODEL Netlist Output remain X throughout: Q = %h, Q_BEHAV = %h", Q, Q_BEHAV );
  end
end


`define True    1'b1
`define False   1'b0
wire [3:0] RM_int;
assign RM_int = ((RME===1'b1)?RM:((RME===1'b0)?4'b0011:4'bx));





reg [79:0] Q_prev;
reg same_data_read;


task rmdel_tcq;
begin
  if (RME === 1'b1)
  begin
    if(RM === 4'd0)
        #1.422;
    else if(RM === 4'd1)
        #1.408;
    else if(RM === 4'd2)
        #1.038;
    else if(RM === 4'd3)
        #1.027;
    else if(RM === 4'd4)
        #1.001;
    else if(RM === 4'd5)
        #0.991;
    else if(RM === 4'd6)
        #0.991;
    else if(RM === 4'd7)
        #0.991;
    else
        #1.422;
  end
  else
    #1.027;
end
endtask


task read_mem;
input [11:0] addr_incr; //address increments by this value
input [11:0] read_address; //if null,entire memory is read.
input [79:0] read_data; //if null,read_data=0 in case of single location,else read_data=mem(read_address).
integer k;
integer j;
reg [79:0]  i;
begin
  err_cnt = 0;
  if ( read_data == "" )
    i = 0;
  else
    i = read_data;
  @(negedge CLK)
  begin
    ME = 1'b1;
  end
  if ( addr_incr == "" )
  begin
    @(negedge CLK);
    ADR = read_address;
    @(posedge CLK);
    rmdel_tcq;
    if (Q_BEHAV !== i || Q_BEHAV === 80'bx)
    begin
      err_cnt = err_cnt + 1;
      test_status = test_status + 1;
      $display ("\n ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = %h at time %t  ", ADR, Q_BEHAV, i, $time);
      $display ("\n@%t            FAIL\n", $time);
    end
  end
  else
  begin
    k = addr_incr;
    for ( j=0; j<= 4095; j= j+k)
    begin
      @(negedge CLK);
      ADR = j;
    @(posedge CLK);
      rmdel_tcq;
      if( Q_BEHAV !== test.top_behav.uut.mem_core_array[ADR] || Q_BEHAV === 80'bx)
      begin
        err_cnt = err_cnt + 1;
        test_status = test_status + 1;
        $display ("\n ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = %h at time %t  ", ADR, Q_BEHAV, test.top_behav.uut.mem_core_array[ADR], $time);
        $display ("\n@%t            FAIL\n", $time);
      end
    end
  end
end
endtask





task read_mem_zerohold;
input [11:0] incr_addr;
integer j;
begin  
  err_cnt = 0;
  @(negedge CLK);
  ME = 1'b1;
  ADR = 0;
  for ( j=1; j<= 4095; j= j+incr_addr)
  begin
    @(posedge CLK);
    ADR = j;
    #1.027;
     if( Q_BEHAV !== test.top_behav.uut.mem_core_array[ADR - 1] || Q_BEHAV === 80'bx)
     begin
       err_cnt = err_cnt + 1;
       test_status = test_status + 1;
       $display ("\n ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = %h at time %t  ", ADR-1, Q_BEHAV, test.top_behav.uut.mem_core_array[ADR-1], $time);
       $display ("\n@%t            FAIL\n", $time);
     end
  end 
end 
endtask  



task read_mem_test1;
input [11:0] incr_addr_test1_read;
integer j;
begin  
  err_cnt = 0;
  @(posedge CLK);
  dis_compare = `True;
  @(negedge CLK);
   Q_prev = Q_BEHAV;
   ME = 1'b0;
  for ( j=0; j<= 4095; j= j+incr_addr_test1_read)
  begin
    @(posedge CLK);
    dis_compare = `True;
    @(negedge CLK);
    dis_compare = `False;
    ME = 1'b1;
    ADR = j;
    @(posedge CLK);
    dis_compare = `True;
      #0.168;
      if((Q_BEHAV !== 80'bx) && (Q_BEHAV !== Q_prev))
      begin
        err_cnt = err_cnt + 1;
        test_status = test_status + 1;
        $display ("\n ERROR_MODEL:  Q_BEHAV is not unknown but = %h at time %t  ", Q_BEHAV, $time);
        $display ("\n@%t            FAIL\n", $time);
      end
    @(negedge CLK)
    begin
    dis_compare = `False;
      #0.21;
       if( Q_BEHAV !== test.top_behav.uut.mem_core_array[ADR] || Q_BEHAV === 80'bx)
       begin
         err_cnt = err_cnt + 1;
         test_status = test_status + 1;
         $display ("\n ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = %h at time %t  ", ADR, Q_BEHAV, test.top_behav.uut.mem_core_array[ADR], $time);
         $display ("\n@%t            FAIL\n", $time);
       end
      Q_prev = Q_BEHAV;
    end  
  end 
end 
endtask  




task enablesignals;
input [8*13:1] signal;   // signal
input [8*15:1] param_name; // timing_parameter name
input [64:1] param;     // delay
input oper1;            // setup/hold
input oper2;            // constraint/violation
real paramr;
begin
  paramr = $bitstoreal(param);
  @(negedge CLK);
  begin
    if ((signal == "ME" || signal == "ME_X" || signal == "ME_LS_H") && oper1 == 0 )
      ME = 1'b0;
    else
      ME = 1'b1;
    if (signal == "ADR" && oper1 == 0 )
      ADR = 12'd4095;
    else 
      ADR = 0;
    if (signal == "TEST1" && oper1 == 0 )
      TEST1 <= #1.452 1'b1;
    else if ( signal == "TEST1" )
      TEST1 <= #1.452 1'b0;
    if (signal == "RM" )
    begin
      RM = 0;
      RME = 1;
    end
    if (signal == "RME" )
      RME = 0;
    if (signal == "LS"  || signal == "ME_LS_H")
      LS = 1'b1;
    if (signal == "ME_X")
    begin
      ADR = 12'bx;
    end
    if ( oper1 == 0 ) 
    begin
      if ( oper2 == 0 )
        #(70 - paramr);
      else
        #((70 - paramr)+0.001);
      if (signal == "ME" || signal == "ME_X" || signal == "ME_LS_H")
        ME = ~ME;
      else if (signal == "ADR")
        ADR = 0;
      else if (signal == "TEST1")
        TEST1 = ~TEST1;
      else if (signal == "RM")
      begin
        if (param_name == "Trmc")
        RM[2:0] = ~RM[2:0];
        else if (param_name == "Trm3c")
          RM[3] = ~RM[3];
      end
      else if (signal == "RME")
        RME = ~RME;
      else if (signal == "LS")
        LS = ~LS;
    end
  end
  if ( oper1 == 1 )
  begin
    @(negedge CLK);
    if (signal == "TEST1")
      @(posedge CLK);
    if ( oper2 == 0 )
      #( 70 + paramr);
    else
      #(70 + paramr-0.001);
    if (signal == "ME" || signal == "ME_X" || signal == "ME_LS_H")
      ME = ~ME;
    else if (signal == "ADR" && ADR === 0)
      ADR = 12'd4095;
    else if (signal == "ADR")
      ADR = ~ADR;
    else if (signal == "TEST1")
      TEST1 = ~TEST1;
    else if (signal == "RM")
    begin
      if (param_name == "Tcrmx")
      RM[2:0] = ~RM[2:0];
      else if (param_name == "Tcrm3x")
        RM[3] = ~RM[3];
    end
    else if (signal == "RME")
      RME = ~RME;
    else if (signal == "LS")
      LS = ~LS;
    if ( paramr > 1.026 )
    if (signal == "RM")
     #(1.421 + 0.001 - 0.270);
    else
     #0.001;
    else 
     #(1.026 - paramr + 0.001 + 0.001);
    if (TEST1 === 1'b1)
      #0.21;
  end
  if (signal == "ME_X")
  begin
    ADR <= @(negedge CLK) 12'd0;
  end
end
endtask
 
task setuphold;
input [8*13:1] signal; // name of signal under test
input [8*10:1] param_name; // timing parameter name
input [64:1] param_val; //del
input oper1;       //setup/hold
input oper2;       //constraint/violation
input [1:0] outstat;     //no X/X/new data/prev data
integer stat;
begin
  err_cnt = 0;
  enablesignals(signal,param_name,param_val,oper1,oper2);
   if (signal == "ME_X")
     signal = "ME";
  if ( oper1 == 0 )
  begin    // setup
      @(posedge CLK);
       if (RME === 1'b0)
         #1.027;
       else
       begin
         rmdel_tcq;
       end
  end
  if ( signal == "RME" && (oper1 == 1) )
  begin
    rmdel_tcq;
  end
  if (signal == "ME_LS_H")
  begin
    signal = "ME";
    LS <= @(negedge CLK) 1'b0;
  end
  if ( signal == "RM" && oper1 == 1 )
    #1.422;
  if ( outstat == 2'b00 )
  begin
    if (Q_BEHAV !== 80'bx) stat = 0;
    else stat = 1;
  end
  else if ( outstat == 2'b01 )
  begin
    if (Q_BEHAV === 80'bx) stat = 0;
    else stat = 1;
  end
  else if ( outstat == 2'b10 ) 
  begin
    if (Q_BEHAV === 80'd0) stat = 0;
    else stat = 1;
  end
  if (stat == 0)
  begin
    $display ("\n@%t            The Parameter %s is modelled effectively", $time, param_name);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1 ;
    $display ("\n@%t               ERROR_MODEL: The Parameter %s is not modelled effectively ", $time, param_name);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLK);
  if ( signal == "ME" && oper1 == 1 )
    ME = 1'b1;
  if ( signal == "TEST1" && oper1 == 1 ) 
    TEST1  <= #1.452 1'b0;
  if (signal == "RM" )
    RME = 1'b0;
    @(negedge CLK);
end
endtask
 
task syncevent;
input [8*13:1] signal; // name of signal under test
input [1:0] outstat;     //no X/X/new data/prev data
integer stat;
begin
  err_cnt = 0;
  @(negedge CLK)
  begin
    if (signal == "TEST1" )
      TEST1 <= #1.452 1'b1;
    if (signal == "RM" )
    begin
      RM = 0;
      RME = 1'b1;
    end
    if (signal == "RME" )
      RME = 0;
  end
  @(posedge CLK);
  if ( signal == "TEST1" )
    @(negedge CLK);
  if (signal == "ME")
    ME = ~ME;
  else if (signal == "ADR" && ADR === 0)
    ADR = 12'd4095;
  else if (signal == "ADR")
    ADR = ~ADR;
  else if (signal == "TEST1")
    TEST1 = ~TEST1;
  else if (signal == "RM")
    RM = ~RM;
  else if (signal == "RME")
    RME = ~RME;
  #1.027;
  if ( outstat == 2'b00 )
  begin
    if (Q_BEHAV !== 80'bx) stat = 0;
    else stat = 1;
  end
  else if ( outstat == 2'b01 )
  begin
    if (Q_BEHAV === 80'bx) stat = 0;
    else stat = 1;
  end
  else if ( outstat == 2'b10 )
  begin
    if (Q_BEHAV === 80'd0) stat = 0;
    else stat = 1;
  end
  if (stat == 0)
  begin
    $display ("\n@%t            Synchronous CLK & %s events modelled effectively", $time, signal);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1 ;
    $display ("\n@%t            ERROR_MODEL: Synchronous CLK & %s events not modelled effectively", $time, signal);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLK);
  if ( signal == "ME" )
    ME = 1'b1;
  if ( signal == "RM" )
    RME = 1'b0;
end
endtask


task create_pattern;
input integer pat;
input [8*15:1] viol; // Tch,Tcl,Tccn,Tccp
begin
  @(negedge CLK);
  no_clk = 1;
  if (pat === 1)
  begin
    $display (" %t Pattern %d ME = 1 CLK 0->1->0->1->0 checking for %s", $time, pat, viol);
    ME = 1'b1;
    #70;
    CLK = 1'b1;
    #70; 
    CLK = 1'b0;
    if (viol == "Tch")
    begin
      #70; 
      CLK = 1'b1;
      #0.162; //tch-tpr
      CLK = ~CLK;
    end
    if (viol == "Tcx")
    begin
      #70; 
      CLK = 1'bX;
      #70; 
      CLK = 1'b0;
    end
    if (viol == "Tcl")
    begin
      #0.319; //tcl-tpr
      CLK = ~CLK;
    end
    if (viol == "Tccn_rmezo" || viol == "Tccn_rm0" || viol == "Tccn_rm1" || viol == "Tccn_rm2" || viol == "Tccn_rm3" || viol == "Tccn_rm4" || viol == "Tccn_rm5")
    begin
      #0.320; //tcl
      CLK = ~CLK;
      #(param_val_tcc - 0.320 - 0.001);
      CLK = ~CLK;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #70; 
      CLK = 1'b1;
      #0.163; //tch
      CLK = ~CLK;
      #(param_val_tcc - 0.163 - 0.001);
      CLK = ~CLK;
    end
  end
  if (pat === 2)
  begin
    $display (" %t Pattern %d ME = 1 CLK 0->1 ME = 0 CLK->0->1->0 checking for %s", $time, pat, viol);
    ME = 1'b1;
    #70; 
    CLK = 1'b1;
    #0.059000000000000004;
    ME = 1'b0;
    #70; 
    CLK = 1'b0;
    if (viol == "Tch")
    begin
      #70; 
      CLK = 1'b1;
      #0.162; //tch-tpr
      CLK = ~CLK;
    end
    if (viol == "Tcx")
    begin
      #70; 
      CLK = 1'bX;
      #70; 
      CLK = 1'b0;
    end
    if (viol == "Tcl")
    begin
      #0.319; //tcl-tpr
      CLK = ~CLK;
    end
    if (viol == "Tccn_rmezo" || viol == "Tccn_rm0" || viol == "Tccn_rm1" || viol == "Tccn_rm2" || viol == "Tccn_rm3" || viol == "Tccn_rm4" || viol == "Tccn_rm5")
    begin
      #0.320; //tcl
      CLK = ~CLK;
      #(param_val_tcc - 0.320 - 0.001);
      CLK = ~CLK;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #70; 
      CLK = 1'b1;
      #0.163; //tch
      CLK = ~CLK;
      #(param_val_tcc - 0.163 - 0.001);
      CLK = ~CLK;
    end
  end
  if (pat === 3)
  begin
    $display (" %t Pattern %d ME = 0 CLK 0->1->0 ME = 1 CLK=0->1->0 checking for %s", $time, pat, viol);
    ME = 1'b0;
    #70; 
    CLK = 1'b1;
    #70; 
    CLK = 1'b0;
    #0.001;
    ME = 1'b1;
    if (viol == "Tch")
    begin
      #70; 
      CLK = 1'b1;
      #0.162; //tch-tpr
      CLK = ~CLK;
    end
    if (viol == "Tcx")
    begin
      #70; 
      CLK = 1'bX;
      #70; 
      CLK = 1'b0;
    end
    if (viol == "Tcl")
    begin
      #0.318; //tch-tpr
      CLK = ~CLK;
    end
    if (viol == "Tccn_rmezo" || viol == "Tccn_rm0" || viol == "Tccn_rm1" || viol == "Tccn_rm2" || viol == "Tccn_rm3" || viol == "Tccn_rm4" || viol == "Tccn_rm5")
    begin
      #0.319; //tcl-tpr
      CLK = ~CLK;
      #(param_val_tcc - 0.320 - 0.001);
      CLK = ~CLK;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #70; 
      CLK = 1'b1;
      #0.163; //tch
      CLK = ~CLK;
      #(param_val_tcc - 0.163 - 0.001);
      CLK = ~CLK;
    end
    #70;
    ME = 1'b0;
  end
  if (pat === 4)
  begin
    $display (" %t Pattern %d ME = 0 CLK 0->1 ME = 0->1->0 CLK=1->0->1->0 checking for %s", $time, pat, viol);
    ME = 1'b0;
    #70; 
    CLK = 1'b1;
    #0.059000000000000004;
    ME = 1'b1;
    #70; 
    ME = 1'b0;
    #10; 
    CLK = 1'b0;
    if (viol == "Tch")
    begin
      #70; 
      CLK = 1'b1;
      #0.162; //tch-tpr
      CLK = ~CLK;
    end
    if (viol == "Tcx")
    begin
      #70; 
      CLK = 1'bX;
      #70; 
      CLK = 1'b0;
    end
    if (viol == "Tcl")
    begin
      #0.319; //tcl-tpr
      CLK = ~CLK;
    end
    if (viol == "Tccn_rmezo" || viol == "Tccn_rm0" || viol == "Tccn_rm1" || viol == "Tccn_rm2" || viol == "Tccn_rm3" || viol == "Tccn_rm4" || viol == "Tccn_rm5")
    begin
      #0.320; //tcl
      CLK = ~CLK;
      #(param_val_tcc - 0.320 - 0.001);
      CLK = ~CLK;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #70; 
      CLK = 1'b1;
      #0.163; //tch
      CLK = ~CLK;
      #(param_val_tcc - 0.163 - 0.001);
      CLK = ~CLK;
    end
  end
  if (pat === 5)
  begin
    $display (" %t Pattern %d ME = 0 CLK 0->1->0 ME = 0->1->0 CLK=0->1->0 checking for %s", $time, pat, viol);
    ME = 1'b0;
    #70; 
    CLK = 1'b1;
    #70; 
    CLK = 1'b0;   
    if (viol == "Tcl")
    begin
      #0.319; //tcl-tpr
      CLK = ~CLK;
    end
    #70; 
    ME = 1'b1;
    #70; 
    ME = 1'b0;
    if (viol == "Tch")
    begin
      #70; 
      CLK = 1'b1;
      #0.162; //tch-tpr
      CLK = ~CLK;
    end
    if (viol == "Tcx")
    begin
      #70; 
      CLK = 1'bX;
      #70; 
      CLK = 1'b0;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #70; 
      CLK = 1'b1;
      #0.163; //tch
      CLK = ~CLK;
      #(param_val_tcc - 0.163 - 0.001);
      CLK = ~CLK;
    end
  end
  if (pat === 6)
  begin
    $display (" %t Pattern %d ME = 0 CLK 0->1->0 CLK=0->1 ME = 0->1->0 CLK=1->0 checking for %s", $time, pat, viol);
    ME = 1'b0;
    #70; 
    CLK = 1'b1;
    #70; 
    CLK = 1'b0;
    if (viol == "Tch")
    begin
      #70;
      CLK = 1'b1;
      #0.059000000000000004;
      ME = 1'b1;
      #0.001;
      ME = 1'b0;
      #(0.163 - 0.061000000000000006);
      CLK = ~CLK;
    end
  end
  if (pat === 7)
  begin
    $display (" %t Pattern %d ME = 0 CLK 0->1->0->1->0 checking for %s", $time, pat, viol);
    ME = 1'b0;
    #70; 
    CLK = 1'b1;
    #70; 
    CLK = 1'b0;
    if (viol == "Tch")
    begin
      #70;
      CLK = 1'b1;
      #0.162; //tch-tpr
      CLK = ~CLK;
    end
    if (viol == "Tcx")
    begin
      #70; 
      CLK = 1'bX;
      #70; 
      CLK = 1'b0;
    end
    if (viol == "Tcl")
    begin
      ME = 1'b1;
      #70; 
      CLK = 1'b1;
      #70; 
      CLK = 1'b0;
      #70; 
      ME = 1'b0;
      #70; 
      CLK = 1'b1;
      #70; 
      CLK = 1'b0;
      #0.319; //tcl-tpr
      CLK = ~CLK;
    end
    if (viol == "Tccn_rmezo" || viol == "Tccn_rm0" || viol == "Tccn_rm1" || viol == "Tccn_rm2" || viol == "Tccn_rm3" || viol == "Tccn_rm4" || viol == "Tccn_rm5")
    begin
      #0.320; //tcl
      CLK = ~CLK;
      #(param_val_tcc - 0.320 - 0.001);
      CLK = ~CLK;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #70; 
      CLK = 1'b1;
      #0.163; //tch
      CLK = ~CLK;
      #(param_val_tcc - 0.163 - 0.001);
      CLK = ~CLK;
    end
    #70;
    ME = 1'b1;
  end
  if (pat === 8)
  begin
    $display (" %t Pattern %d ME = 0 CLK 0->1->0 CLK=0->1 ME = 0->1 CLK=1->0->1 checking for %s", $time, pat, viol);
    ME = 1'b0;
    #70; 
    CLK = 1'b1;
    #70; 
    CLK = 1'b0;
    if (viol == "Tccn_rmezo" || viol == "Tccn_rm0" || viol == "Tccn_rm1" || viol == "Tccn_rm2" || viol == "Tccn_rm3" || viol == "Tccn_rm4" || viol == "Tccn_rm5")
    begin
      #0.320; //tcl
      CLK = ~CLK;
      #0.059000000000000004
      ME = 1'b1;
      #(0.163 - 0.058);
      CLK = ~CLK;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #70; 
      CLK = 1'b1;
      #0.059000000000000004
      ME = 1'b1;
      #(0.163 - 0.058);
      CLK = ~CLK;
      #0.320; //tcl
      CLK = ~CLK;
    end
  end
end
endtask

task check_output;
input integer q_stat; // 0->Output is X, 1-> Output is not X
input [8*15:1] viol; // Tch,Tcl,Tccn,Tccp
begin
 fork
   begin
    rmdel_tcq;
    if (q_stat == 0)
    begin
      if (Q_BEHAV !== 80'bx)
      begin
        $display( "%t Timing parameter(viol) is %s ", $time, viol);
        test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
      end   
      else
      begin
        $display( "%t Timing parameter(viol) is %s ", $time, viol);
        $display("\n\n@%t           Clock  is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
      end 
    end 
    else
    begin
      if (Q_BEHAV === 80'bx)
      begin
        $display( "%t Timing parameter(viol) is %s ", $time, viol);
        test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
      end   
      else
      begin
        $display( "%t Timing parameter(viol) is %s ", $time, viol);
        $display("\n\n@%t           Clock  is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
      end 
    end
   end
 join
  restart_clk = 1'b1;
  @(negedge CLK)
    ME = 1'b1;
  @(negedge CLK)
    ME = 1'b0;
end
endtask

    
always 
begin

 if (restart_clk)
 begin
  #70; 
  CLK = 1'b0;
  no_clk = 0;
  #70; 
  restart_clk = 1'b0;
 end
 else
 begin
   #70 ;
   if(!no_clk)
     CLK = ~CLK;
 end
end

//initialize all variables to 0
//then call read task


initial 
begin
  no_clk = 0;
  restart_clk = 1'b0;
  simul_clk = 0;
  `ifdef VIRAGE_FAST_VERILOG
    flagrtl = 1;
  `else
    `ifdef rtlmodel
      flagrtl = 1;
    `else
      flagrtl = 0;
    `endif
  `endif
  dis_compare = `False;
  TEST1 = 1'b0;
  ME   = 1'b0;
  OP_Q = 80'b0;
  ADR = 4095;
  RM   = 0;
  RM[0] = 1'b1;
  RM[1] = 1'b1;
  RM[2] = 1'b0;
  RM[3] = 1'b0;
  @(negedge CLK);
  ME   = 1'b1;
  @(negedge CLK);
  ME   = 1'b0;
  @(negedge CLK);
  ME   = 1'b1;
  @(negedge CLK);
  ME   = 1'b0;
  @(negedge CLK);
  ME   = 1'b1;
  test_status = 0;

  $display ("\n#######################################################################");
  test_num = 1;
  $display( "\n\n@%t TEST: %d --- Memory read through port A  --- \n\n", $time, test_num);
  read_mem(1,"","");
  if ( err_cnt != 0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Memory read through port A  Unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Memory read through port A  Successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #10;

  $display ("\n#######################################################################");
  test_num = 2;
  $display( "\n\n@%t TEST: %d --- Memory read During Light Sleep Mode --- \n\n", $time, test_num);
  @(negedge CLK);
   LS = 1'b0;
  @(negedge CLK);
   ADR = 12'd3;
  @(negedge CLK);
  @(negedge CLK);
   LS = 1'b1;
  @(negedge CLK);
  @(negedge CLK);
   RM[3] = ~RM[3];
  @(negedge CLK);
   RM[3] = ~RM[3];
  @(negedge CLK);
   RM = 4'b0011;
  @(negedge CLK);
  @(negedge CLK);
   read_mem("",12'd1,test.top_behav.uut.mem_core_array[3]);
   read_mem("",12'd5,test.top_behav.uut.mem_core_array[3]);
    if ( err_cnt != 0 )
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Output does not retain last state, Operation Unsuccessful Light Sleep Mode\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           Output retain last state, Operation Successful Light Sleep Mode \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  @(negedge CLK);
  $display( "\n@%t --- Disable Light Sleep Mode Pin and read back the memory contents --- \n", $time);
  @(negedge CLK);
   ME = 1'b1;
  @(posedge CLK);
  #10;
   LS = 1'b0;
  @(negedge CLK);
  read_mem(1,"","");
  if ( err_cnt != 0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Memory read through port A Unsuccessful after Light Sleep Mode disabled\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Memory read through port A Successful after Light Sleep Mode disabled \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLK);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 3;
  $display( "\n\n@%t TEST: %d --- Memory read through port A  --- \n\n", $time, test_num);
  read_mem(1,"","");
  if ( err_cnt != 0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Memory read through port A  Unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Memory read through port A  Successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLK);

`ifdef zerohold
 $display ("\n#######################################################################");
  test_num = 4;
  $display( "\n\n@%t TEST: %d --- Memory read through port A with Zero Hold time ADR with CLK --- \n\n", $time, test_num);
  read_mem_zerohold(1);
  if ( err_cnt != 0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Memory read through port A with Zero Hold time Unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Memory read through port A with Zero Hold time Successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #10;

 $display ("\n#######################################################################");
  test_num = 5;
  $display( "\n\n@%t TEST: %d --- Test for ME with Zero Hold time with CLK --- \n\n", $time, test_num);
  @(negedge CLK);
  ME = 1'b1;
  ADR = 0;
  @(negedge CLK);
  ME = 1'b1;
  ADR = 1;
  @(posedge CLK);
  ME = 1'b0;
  #1.027;
  if (Q_BEHAV !== 80'd1 || Q_BEHAV === 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Test for ME with Zero Hold time Unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Test for ME with Zero Hold time Successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #10;
  ME = 1'b1;

$display ("\n#######################################################################");
  test_num = 6;
  $display( "\n\n@%t TEST: %d --- Test for LS with Zero Hold time with CLK --- \n\n", $time, test_num);

  @(negedge CLK);
  ADR = 12'd0;
   read_mem("",12'd0,test.top_behav.uut.mem_core_array[ADR]);
  @(negedge CLK);
  ADR = 12'd1;
   read_mem("",12'd1,test.top_behav.uut.mem_core_array[ADR]);

  @(negedge CLK);
  ME = 1'b0;

  @(negedge CLK);
  ME = 1'b1;
  ADR = 12'd1;

  @(negedge CLK);
  LS = 1'b1;
  ADR = 12'd0;

  @(posedge CLK);
  LS = 1'b0;
  #1.027;
  $display( "\n@%t - LS active prevent read location 0 so Q = 1, actual QB = %h --- \n", $time, Q_BEHAV);
  if (Q_BEHAV === 80'd0)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Test for LS with Zero Hold time in Read Mode Unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Test for LS with Zero Hold time in Read Mode Successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end

  @(negedge CLK);
  ADR = 12'd2;

  @(posedge CLK);
  LS = 1'b1;
  #1.027;
  $display( "\n@%t - LS non-active allow read location 2 so Q = 2, actual QB = %h --- \n", $time, Q_BEHAV);
  if (Q_BEHAV === 80'd2)
  begin
    $display("\n\n@%t           Test for LS with Zero Hold time in Read Mode Successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Test for LS with Zero Hold time in Read Mode Unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end

  @(negedge CLK);
  LS = 1'b0;

`endif


  $display ("\n#######################################################################");
  test_num = 7;
  $display( "\n\n@%t TEST: %d --- Test for TEST1 Function --- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 1;
  end   
  @(negedge CLK)
    ME = 1'b0;
  @(negedge CLK)
  begin
    ADR = 0;
    #1.452;
    TEST1 = 1'b1;
  end   
  read_mem_test1(1);
  if ( err_cnt != 0 ) 
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: TEST1 Function Unsuccessful \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
  else
    begin
      $display("\n\n@%t           TEST1 Function Successful  \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end   
  @(negedge CLK)
  #1.452;
  TEST1 = 1'b0;
  #10;


  $display ("\n#######################################################################");
  test_num = 8;
  $display( "\n\n@%t TEST: %d ---  TEST1 Test in Read mode With LS --- \n\n", $time, test_num);

  @(negedge CLK);
  ME = 1'b0;

  #1.452;
  TEST1 = 1'b1;
  @(negedge CLK);
  ADR = 0;
  #10;
  ME = 1'b1;
  @(posedge CLK) 
  begin
    #0.164;
    $display("@%t    LS = 1'b1 at Posedge of CLK When TEST1 high", $time);
    LS = 1'b1;
  end
  @(negedge CLK)
  begin
    ADR = 1;
    #1.027;
    Q_prev = Q_BEHAV;
  end
  @(negedge CLK);
  @(negedge CLK);
   RM[3] = ~RM[3];
  @(negedge CLK);
   RM[3] = ~RM[3];
  @(negedge CLK);
   RM = 4'b0011;
  @(negedge CLK);
  @(negedge CLK);
    LS = 1'b0;
    #1.027;
  if (Q_prev === Q_BEHAV)
  begin
    $display("\n\n@%t           When TEST1 is active, LS is high at posedge of CLK and data observed at previous negedge of CLK Operation successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: When TEST1 is active, LS is high at posedge of CLK or data not observed at previous negedge of CLK Operation unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLK);
  #0.21;
  Q_prev = Q_BEHAV;

  @(negedge CLK)
  #1.452;
  TEST1 = 1'b0;
  @(negedge CLK);
  ME = 1'b1;
  @(negedge CLK);



  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 9;
  $display( "\n\n@%t TEST: %d --- Test for ME  --- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;
  end
  @(posedge CLK)
  begin
    #1.027;
     if ( Q_BEHAV === test.top_behav.uut.mem_core_array[ADR] && Q_BEHAV !== 80'bx)
     begin
       $display("\n\n@%t           ME Function Successful  \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
     end
     else
     begin
       test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: ME Function Unsuccessful \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
     end
  end
@(negedge CLK)
  begin
    ME = 1'b0;
    ADR = 1;
  end
  @(posedge CLK)
  begin
    #1.027;
     if ( Q_BEHAV === test.top_behav.uut.mem_core_array[0] && Q_BEHAV !== 80'bx)
     begin
       $display("\n\n@%t           ME Function Successful  \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
     end
     else
     begin
       test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: ME Function Unsuccessful \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
     end
  end
  @(negedge CLK)
  begin
    ME = 1'b0;
    ADR = 4094;
  end
  @(posedge CLK)
  begin
    #1.027;
     if ( Q_BEHAV === test.top_behav.uut.mem_core_array[0] && Q_BEHAV !== 80'bx)
     begin
       $display("\n\n@%t           ME Function Successful  \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
     end
     else
     begin
       test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: ME Function Unsuccessful \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
     end
  end
@(negedge CLK)
  begin    
    ME = 1'b0; 
    ADR = 4095;
  end      
  @(posedge CLK)
  begin    
    #1.027;  
     if ( Q_BEHAV === test.top_behav.uut.mem_core_array[0] && Q_BEHAV !== 80'bx)
     begin 
       $display("\n\n@%t           ME Function Successful  \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
     end    
     else
     begin
       test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: ME Function Unsuccessful \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
     end
  end      
  @(negedge CLK);
    ME = 1'b1;

  $display ("\n#######################################################################");
  test_num = 10;
  $display( "\n\n@%t TEST: %d ---  Test for all RM settings with RME = 1'b0 --- \n\n", $time, test_num);
  @(negedge CLK);
  RME = 1'b0;
  ADR = 0;
  ADR = 1;
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd0 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
  RM = 4'd0;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",12'b0,test.top_behav.uut.mem_core_array[ADR]);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",12'b1,test.top_behav.uut.mem_core_array[ADR]);
 read_mem(4095,"","");
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd1 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
  RM = 4'd1;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",12'b0,test.top_behav.uut.mem_core_array[ADR]);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",12'b1,test.top_behav.uut.mem_core_array[ADR]);
 read_mem(4095,"","");
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd2 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
  RM = 4'd2;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",12'b0,test.top_behav.uut.mem_core_array[ADR]);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",12'b1,test.top_behav.uut.mem_core_array[ADR]);
 read_mem(4095,"","");
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd3 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
  RM = 4'd3;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",12'b0,test.top_behav.uut.mem_core_array[ADR]);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",12'b1,test.top_behav.uut.mem_core_array[ADR]);
 read_mem(4095,"","");
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd4 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
  RM = 4'd4;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",12'b0,test.top_behav.uut.mem_core_array[ADR]);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",12'b1,test.top_behav.uut.mem_core_array[ADR]);
 read_mem(4095,"","");
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd5 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
  RM = 4'd5;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",12'b0,test.top_behav.uut.mem_core_array[ADR]);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",12'b1,test.top_behav.uut.mem_core_array[ADR]);
 read_mem(4095,"","");
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd6 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
  RM = 4'd6;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",12'b0,test.top_behav.uut.mem_core_array[ADR]);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",12'b1,test.top_behav.uut.mem_core_array[ADR]);
 read_mem(4095,"","");
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd7 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
  RM = 4'd7;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",12'b0,test.top_behav.uut.mem_core_array[ADR]);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",12'b1,test.top_behav.uut.mem_core_array[ADR]);
 read_mem(4095,"","");
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd8 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
  RM = 4'd8;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",12'b0,test.top_behav.uut.mem_core_array[ADR]);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",12'b1,test.top_behav.uut.mem_core_array[ADR]);
 read_mem(4095,"","");
  @(negedge CLK);
  RM = 4'b0011;
  #150;

  $display ("\n#######################################################################");
  test_num = 11;
  $display( "\n\n@%t TEST: %d ---  Test for all RM settings with RME = 1'b1 --- \n\n", $time, test_num);
  @(negedge CLK);
  RME = 1'b1;
  ADR = 0;
  ADR = 1;
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd0 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
  RM = 4'd0;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",12'b0,test.top_behav.uut.mem_core_array[ADR]);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",12'b1,test.top_behav.uut.mem_core_array[ADR]);
 read_mem(4095,"","");
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd1 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
  RM = 4'd1;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",12'b0,test.top_behav.uut.mem_core_array[ADR]);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",12'b1,test.top_behav.uut.mem_core_array[ADR]);
 read_mem(4095,"","");
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd2 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
  RM = 4'd2;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",12'b0,test.top_behav.uut.mem_core_array[ADR]);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",12'b1,test.top_behav.uut.mem_core_array[ADR]);
 read_mem(4095,"","");
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd3 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
  RM = 4'd3;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",12'b0,test.top_behav.uut.mem_core_array[ADR]);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",12'b1,test.top_behav.uut.mem_core_array[ADR]);
 read_mem(4095,"","");
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd4 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
  RM = 4'd4;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",12'b0,test.top_behav.uut.mem_core_array[ADR]);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",12'b1,test.top_behav.uut.mem_core_array[ADR]);
 read_mem(4095,"","");
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd5 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
  RM = 4'd5;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",12'b0,test.top_behav.uut.mem_core_array[ADR]);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",12'b1,test.top_behav.uut.mem_core_array[ADR]);
 read_mem(4095,"","");
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd6 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
  RM = 4'd6;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",12'b0,test.top_behav.uut.mem_core_array[ADR]);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",12'b1,test.top_behav.uut.mem_core_array[ADR]);
 read_mem(4095,"","");
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd7 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
  RM = 4'd7;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",12'b0,test.top_behav.uut.mem_core_array[ADR]);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",12'b1,test.top_behav.uut.mem_core_array[ADR]);
 read_mem(4095,"","");
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd8 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
  RM = 4'd8;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",12'b0,test.top_behav.uut.mem_core_array[ADR]);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",12'b1,test.top_behav.uut.mem_core_array[ADR]);
 read_mem(4095,"","");
  @(negedge CLK);
  RM = 4'b0011;
  @(negedge CLK);
  RME = 1'b0;
  #150;

  $display ("\n#######################################################################");
  test_num = 12;
  $display( "\n\n@%t TEST: %d --- Memory read when RM 3 bit is toggled to 1 --- \n\n", $time, test_num);
  @(negedge CLK);
   LS = 1'b0;
  @(negedge CLK);
   ADR = 1'b1;
  @(negedge CLK);
   RM[3] = 1'b0;
  @(negedge CLK);
   RM[3] = 1'b1;
  $display( "\n@%t --- Reading memory when RM 3 bit toggled to 1 --- \n", $time);
    read_mem("",12'd1,test.top_behav.uut.mem_core_array[ADR]);
  @(negedge CLK);
   RM[3] = 1'b0;
if (flagrtl)
begin
  $display ("\n#######################################################################");
  test_num = 13;
  $display( "\n\n@%t TEST: %d --- X handling of ADR --- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 12'bx1;
  end
  @(posedge CLK);
  #1.027;
  if ( Q_BEHAV === 80'bx)
  begin  
    $display("\n\n@%t           Invalid Address outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time); 
  end
  else
  begin 
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid Address does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end   
  #10;
  ADR = 12'd0;
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 14;
  $display( "\n\n@%t TEST: %d --- X handling of LS in Read --- \n\n", $time, test_num);
  @(negedge CLK);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;
    LS = 1'bx;
  end
  @(posedge CLK);
    #1.027
    if (Q_BEHAV !== 80'bx)
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid LS does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           Invalid LS outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  @(negedge CLK);
    LS = 1'b0;
  @(negedge CLK);
  @(negedge CLK);
    ADR = 0;
`ifndef VIRAGE_SUPPORT_FFV_SIM
  $display ("\n#######################################################################");
  test_num = 15;
  $display( "\n\n@%t TEST: %d --- Z handling of ADR --- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 12'bZ1;
  end
  @(posedge CLK);
  #1.027;
  if ( Q_BEHAV === 80'bx)
  begin  
    $display("\n\n@%t           Invalid Address outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time); 
  end
  else
  begin 
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid Address does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end   
  #10;
  ADR = 12'd0;
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 16;
  $display( "\n\n@%t TEST: %d --- Z handling of LS in Read --- \n\n", $time, test_num);
  @(negedge CLK);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;
    LS = 1'bZ;
  end
  @(posedge CLK);
    #1.027
    if (Q_BEHAV !== 80'bx)
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid LS does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           Invalid LS outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  @(negedge CLK);
    LS = 1'b0;
  @(negedge CLK);
  @(negedge CLK);
    ADR = 0;
`endif
end
if (flagrtl)
begin
  $display ("\n#######################################################################");
  test_num = 17;
  $display( "\n\n@%t TEST: %d --- X handling of ME --- \n\n", $time, test_num);
  @(negedge CLK)
  begin  
    ME = 1'bx;
  end
  @(posedge CLK);
  #1.027;
  if ( Q_BEHAV === 80'bx)
  begin  
    $display("\n\n@%t           Invalid ME outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end   
  else
  begin  
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid ME does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end    
  @(negedge CLK);
  ME = 1'b1;
  @(negedge CLK);
  ADR = 12'd0;
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 18;
  $display( "\n\n@%t TEST: %d --- X handling of ME when LS is high --- \n\n", $time, test_num);
  @(negedge CLK)
    LS = 1'b1;
  @(negedge CLK)
  begin  
    ME = 1'bx;
  end
  @(posedge CLK);
  #1.027;
  if ( Q_BEHAV === 80'bx)
  begin  
    $display("\n\n@%t           Invalid ME outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end   
  else
  begin  
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid ME does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end    
  @(negedge CLK);
  LS = 1'b0;
  ME = 1'b1;
  @(negedge CLK);
  ADR = 12'd0;
  @(negedge CLK);

 
  $display ("\n#######################################################################");
  test_num = 19;
  $display( "\n\n@%t TEST: %d --- X handling of RME --- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;
    RME = 1'bx;
  end
  @(posedge CLK);
  #1.027;
  if ( Q_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RME does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid RME outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #5;
  RME = 1'b0;
  @(negedge CLK);
  read_mem(1,"","");
  #10;
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 20;
  $display( "\n\n@%t TEST: %d --- X handling of RME when LS is high --- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    LS = 1'b1;
    ME = 1'b1;
    ADR = 0;
    RME = 1'bx;
  end
  @(posedge CLK);
  #1.027;
  if ( Q_BEHAV === 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RME outputs X when LS is high\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid RME does not output X when LS is high \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #5;
  RME = 1'b0;
  @(negedge CLK);
  LS = 1'b0;
  read_mem(1,"","");
  #10;
  @(negedge CLK);



  $display ("\n#######################################################################");
  test_num = 21;
  $display( "\n\n@%t TEST: %d --- X handling of TEST1 --- \n\n", $time, test_num);
  @(negedge CLK)
  #1.452;
  TEST1 = 1'bx;
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;
  end
  @(posedge CLK);
  #1.027;
  if ( Q_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Invalid TEST1 outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid TEST1 does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLK)
  #1.452;
  TEST1 = 1'b0;
  @(negedge CLK);
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 22;
  $display( "\n\n@%t TEST: %d --- X handling of RM --- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;
    RME = 1'b1;
    RM = 4'bx;
  end
  @(posedge CLK);
  #1.422;
  if ( Q_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RM does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid RM outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #5;
  @(negedge CLK);
  RM = 4'b0011;
  @(negedge CLK);
    RME = 1'b0;


  $display ("\n#######################################################################");
  test_num = 23;
  $display( "\n\n@%t TEST: %d --- X handling of CLK --- \n\n", $time, test_num);
  $display( "\n\n@%t TEST: %d --------- 0 to X transition of CLK ---------- \n\n", $time, test_num);
  @(negedge CLK);
  ME = 1'b1;
  #30;
  CLK = 1'bx;
  #1.027;
  if (Q_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Invalid(0->X) CLK outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid(0->X) CLK does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #5;
  CLK = 1'b0;

  $display( "\n\n@%t TEST: %d --------- 1 to X transition of CLK ---------- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    #30;
    CLK = 1'b1;
    #0.163;
    CLK = 1'bx;
  end
  #1.027;
  if (Q_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Invalid(1->X) Clock outputs X  \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end   
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid(1->X) Clock does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end   
  #5;
  CLK = 1'b0;
 
  $display( "\n\n@%t TEST: %d --------- X to 1 transition of CLK ---------- \n\n", $time, test_num);
  @(negedge CLK);
  @(negedge CLK)
  begin
    #20;
    CLK = 1'bx;
    #5;
    CLK = 1'b1;
  end
  #1.027;
  if (Q_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           X->1 transition of Clock outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end    
  else
  begin   
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: X->1 transition of Clock does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end    
  #5;
  CLK = 1'b0;


`ifndef VIRAGE_SUPPORT_FFV_SIM
  $display ("\n#######################################################################");
  test_num = 24;
  $display( "\n\n@%t TEST: %d --- Z handling of ME --- \n\n", $time, test_num);
  @(negedge CLK)
  begin  
    ME = 1'bZ;
  end
  @(posedge CLK);
  #1.027;
  if ( Q_BEHAV === 80'bx)
  begin  
    $display("\n\n@%t           Invalid ME outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end   
  else
  begin  
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid ME does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end    
  @(negedge CLK);
  ME = 1'b1;
  @(negedge CLK);
  ADR = 12'd0;
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 25;
  $display( "\n\n@%t TEST: %d --- Z handling of ME when LS is high --- \n\n", $time, test_num);
  @(negedge CLK)
    LS = 1'b1;
  @(negedge CLK)
  begin  
    ME = 1'bZ;
  end
  @(posedge CLK);
  #1.027;
  if ( Q_BEHAV === 80'bx)
  begin  
    $display("\n\n@%t           Invalid ME outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end   
  else
  begin  
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid ME does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end    
  @(negedge CLK);
  LS = 1'b0;
  ME = 1'b1;
  @(negedge CLK);
  ADR = 12'd0;
  @(negedge CLK);

 
  $display ("\n#######################################################################");
  test_num = 26;
  $display( "\n\n@%t TEST: %d --- Z handling of RME --- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;
    RME = 1'bZ;
  end
  @(posedge CLK);
  #1.027;
  if ( Q_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RME does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid RME outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #5;
  RME = 1'b0;
  @(negedge CLK);
  read_mem(1,"","");
  #10;
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 27;
  $display( "\n\n@%t TEST: %d --- Z handling of RME when LS is high --- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    LS = 1'b1;
    ME = 1'b1;
    ADR = 0;
    RME = 1'bZ;
  end
  @(posedge CLK);
  #1.027;
  if ( Q_BEHAV === 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RME outputs X when LS is high\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid RME does not output X when LS is high \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #5;
  RME = 1'b0;
  @(negedge CLK);
  LS = 1'b0;
  read_mem(1,"","");
  #10;
  @(negedge CLK);



  $display ("\n#######################################################################");
  test_num = 28;
  $display( "\n\n@%t TEST: %d --- Z handling of TEST1 --- \n\n", $time, test_num);
  @(negedge CLK)
  #1.452;
  TEST1 = 1'bZ;
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;
  end
  @(posedge CLK);
  #1.027;
  if ( Q_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Invalid TEST1 outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid TEST1 does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLK)
  #1.452;
  TEST1 = 1'b0;
  @(negedge CLK);
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 29;
  $display( "\n\n@%t TEST: %d --- Z handling of RM --- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;
    RME = 1'b1;
    RM = 4'bZ;
  end
  @(posedge CLK);
  #1.422;
  if ( Q_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RM does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid RM outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #5;
  @(negedge CLK);
  RM = 4'b0011;
  @(negedge CLK);
    RME = 1'b0;


  $display ("\n#######################################################################");
  test_num = 30;
  $display( "\n\n@%t TEST: %d --- Z handling of CLK --- \n\n", $time, test_num);
  $display( "\n\n@%t TEST: %d --------- 0 to Z transition of CLK ---------- \n\n", $time, test_num);
  @(negedge CLK);
  ME = 1'b1;
  #30;
  CLK = 1'bZ;
  #1.027;
  if (Q_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Invalid(0->X) CLK outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid(0->X) CLK does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #5;
  CLK = 1'b0;

  $display( "\n\n@%t TEST: %d --------- 1 to Z transition of CLK ---------- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    #30;
    CLK = 1'b1;
    #0.163;
    CLK = 1'bZ;
  end
  #1.027;
  if (Q_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Invalid(1->X) Clock outputs X  \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end   
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid(1->X) Clock does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end   
  #5;
  CLK = 1'b0;
 
  $display( "\n\n@%t TEST: %d --------- Z to 1 transition of CLK ---------- \n\n", $time, test_num);
  @(negedge CLK);
  @(negedge CLK)
  begin
    #20;
    CLK = 1'bZ;
    #5;
    CLK = 1'b1;
  end
  #1.027;
  if (Q_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           X->1 transition of Clock outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end    
  else
  begin   
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: X->1 transition of Clock does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end    
  #5;
  CLK = 1'b0;


`endif
end





  $display( "\n\n@%t TEST:  --------- Timing tests start ---------- \n\n", $time);

  $display ("\n#######################################################################");
  test_num = 31;
  $display( "\n\n@%t TEST: %d --- Going to check Parameters Tcq and Tcqx  --- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 1;
    RME = 0;
  end  
  @(negedge CLK);
  Q_prev = Q_BEHAV;
  ADR = 0;
  same_data_read = 1'b0;
  @(negedge CLK);
  if (Q_BEHAV === Q_prev)
   same_data_read = 1'b1;
  ADR = 1;
  @(posedge CLK)
  begin
    #0.697;
    if (Q_BEHAV !== 80'bx && same_data_read !== 1'b1)
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: The Parameter Tcqx is incorrect or not modelled effectively\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
    else
    begin
      $display("\n\n@%t           The Parameter Tcqx is modelled effectively \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end 
    #0.33000000000000007;
    if (Q_BEHAV !== Q_prev )
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: The Parameter Tcq is incorrect or not modelled effectively\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           The Parameter Tcq is modelled effectively \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLK);
  @(negedge CLK);
    RME = 1;

  @(negedge CLK)
  $display ("\n#######################################################################");
  test_num = 32;
  $display( "\n\n@%t TEST: %d --- Going to check Parameters Tcqrm0 and Tcqrm0x  --- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    RME = 1'b1;
    RM = 4'd0;
    ME = 1'b1;
    ADR = 1;
  end  
  @(negedge CLK);
  Q_prev = Q_BEHAV;
  ADR = 0;
  same_data_read = 1'b0;
  @(negedge CLK);
  if (Q_BEHAV === Q_prev)
   same_data_read = 1'b1;
  ADR = 1;
  @(posedge CLK)
  begin
    #0.967;
    if (Q_BEHAV !== 80'bx && same_data_read !== 1'b1)
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: The Parameter Tcqrm0x is incorrect or not modelled effectively\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
    else
    begin
      $display("\n\n@%t           The Parameter Tcqrm0x is modelled effectively \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end 
    #0.45500000000000007;
    if (Q_BEHAV !== Q_prev )
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: The Parameter Tcqrm0 is incorrect or not modelled effectively\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           The Parameter Tcqrm0 is modelled effectively \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLK);
    RME = 1'b0;
    RM = 4'b0;
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 33;
  $display( "\n\n@%t TEST: %d --- Going to check Parameters Tcqrm1 and Tcqrm1x  --- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    RME = 1'b1;
    RM = 4'd1;
    ME = 1'b1;
    ADR = 1;
  end  
  @(negedge CLK);
  Q_prev = Q_BEHAV;
  ADR = 0;
  same_data_read = 1'b0;
  @(negedge CLK);
  if (Q_BEHAV === Q_prev)
   same_data_read = 1'b1;
  ADR = 1;
  @(posedge CLK)
  begin
    #0.717;
    if (Q_BEHAV !== 80'bx && same_data_read !== 1'b1)
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: The Parameter Tcqrm1x is incorrect or not modelled effectively\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
    else
    begin
      $display("\n\n@%t           The Parameter Tcqrm1x is modelled effectively \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end 
    #0.6910000000000001;
    if (Q_BEHAV !== Q_prev )
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: The Parameter Tcqrm1 is incorrect or not modelled effectively\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           The Parameter Tcqrm1 is modelled effectively \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLK);
    RME = 1'b0;
    RM = 4'b0;
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 34;
  $display( "\n\n@%t TEST: %d --- Going to check Parameters Tcqrm2 and Tcqrm2x  --- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    RME = 1'b1;
    RM = 4'd2;
    ME = 1'b1;
    ADR = 1;
  end  
  @(negedge CLK);
  Q_prev = Q_BEHAV;
  ADR = 0;
  same_data_read = 1'b0;
  @(negedge CLK);
  if (Q_BEHAV === Q_prev)
   same_data_read = 1'b1;
  ADR = 1;
  @(posedge CLK)
  begin
    #0.71;
    if (Q_BEHAV !== 80'bx && same_data_read !== 1'b1)
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: The Parameter Tcqrm2x is incorrect or not modelled effectively\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
    else
    begin
      $display("\n\n@%t           The Parameter Tcqrm2x is modelled effectively \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end 
    #0.32799999999999996;
    if (Q_BEHAV !== Q_prev )
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: The Parameter Tcqrm2 is incorrect or not modelled effectively\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           The Parameter Tcqrm2 is modelled effectively \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLK);
    RME = 1'b0;
    RM = 4'b0;
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 35;
  $display( "\n\n@%t TEST: %d --- Going to check Parameters Tcqrm3 and Tcqrm3x  --- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    RME = 1'b1;
    RM = 4'd3;
    ME = 1'b1;
    ADR = 1;
  end  
  @(negedge CLK);
  Q_prev = Q_BEHAV;
  ADR = 0;
  same_data_read = 1'b0;
  @(negedge CLK);
  if (Q_BEHAV === Q_prev)
   same_data_read = 1'b1;
  ADR = 1;
  @(posedge CLK)
  begin
    #0.697;
    if (Q_BEHAV !== 80'bx && same_data_read !== 1'b1)
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: The Parameter Tcqrm3x is incorrect or not modelled effectively\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
    else
    begin
      $display("\n\n@%t           The Parameter Tcqrm3x is modelled effectively \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end 
    #0.33000000000000007;
    if (Q_BEHAV !== Q_prev )
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: The Parameter Tcqrm3 is incorrect or not modelled effectively\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           The Parameter Tcqrm3 is modelled effectively \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLK);
    RME = 1'b0;
    RM = 4'b0;
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 36;
  $display( "\n\n@%t TEST: %d --- Going to check Parameters Tcqrm4 and Tcqrm4x  --- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    RME = 1'b1;
    RM = 4'd4;
    ME = 1'b1;
    ADR = 1;
  end  
  @(negedge CLK);
  Q_prev = Q_BEHAV;
  ADR = 0;
  same_data_read = 1'b0;
  @(negedge CLK);
  if (Q_BEHAV === Q_prev)
   same_data_read = 1'b1;
  ADR = 1;
  @(posedge CLK)
  begin
    #0.672;
    if (Q_BEHAV !== 80'bx && same_data_read !== 1'b1)
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: The Parameter Tcqrm4x is incorrect or not modelled effectively\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
    else
    begin
      $display("\n\n@%t           The Parameter Tcqrm4x is modelled effectively \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end 
    #0.32899999999999996;
    if (Q_BEHAV !== Q_prev )
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: The Parameter Tcqrm4 is incorrect or not modelled effectively\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           The Parameter Tcqrm4 is modelled effectively \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLK);
    RME = 1'b0;
    RM = 4'b0;
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 37;
  $display( "\n\n@%t TEST: %d --- Going to check Parameters Tcqrm5 and Tcqrm5x  --- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    RME = 1'b1;
    RM = 4'd5;
    ME = 1'b1;
    ADR = 1;
  end  
  @(negedge CLK);
  Q_prev = Q_BEHAV;
  ADR = 0;
  same_data_read = 1'b0;
  @(negedge CLK);
  if (Q_BEHAV === Q_prev)
   same_data_read = 1'b1;
  ADR = 1;
  @(posedge CLK)
  begin
    #0.665;
    if (Q_BEHAV !== 80'bx && same_data_read !== 1'b1)
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: The Parameter Tcqrm5x is incorrect or not modelled effectively\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
    else
    begin
      $display("\n\n@%t           The Parameter Tcqrm5x is modelled effectively \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end 
    #0.32599999999999996;
    if (Q_BEHAV !== Q_prev )
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: The Parameter Tcqrm5 is incorrect or not modelled effectively\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           The Parameter Tcqrm5 is modelled effectively \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLK);
    RME = 1'b0;
    RM = 4'b0;
  @(negedge CLK);

  @(negedge CLK);
  ADR = 0;
  $display ("\n#######################################################################");
  test_num = 38;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on ADR   --- \n\n", $time, test_num);
  setuphold("ADR","Tac",$realtobits(0.320),0,0, 2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 39;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on ADR   --- \n\n", $time, test_num);
  setuphold("ADR","Tac",$realtobits(0.320),0,1, 2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 40;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on ADR   --- \n\n", $time, test_num);
  setuphold("ADR","Tcax",$realtobits(0.091),1,0, 2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 41;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on ADR   --- \n\n", $time, test_num);
  setuphold("ADR","Tcax",$realtobits(0.091),1,1, 2'b01);
  @(negedge CLK);


  $display ("\n#######################################################################");
  test_num = 42;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on ME   --- \n\n", $time, test_num);
  setuphold("ME","Tmc",$realtobits(0.137),0,0, 2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 43;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on ME   --- \n\n", $time, test_num);
  setuphold("ME","Tmc",$realtobits(0.137),0,1, 2'b01);
  @(negedge CLK);
  @(negedge CLK);
  ADR = 0;
  $display ("\n#######################################################################");
  test_num = 44;
  $display( "\n\n@%t TEST: %d --- Going to check Setup violation on ME and Output unknown after Tcq time --- \n\n", $time, test_num);
  @(negedge CLK);
   ME = 1'b1;
  @(negedge CLK);
   #69.864;
   ME = 1'b0;
  @(posedge CLK)
  begin 
    #1.027
    if ( Q_BEHAV === 80'bx )
    begin
      $display("\n\n@%t           ME setup low violation and Q unknown after Tcq time \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: ME setup low violation and Q is not unknown\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
  end
  @(negedge CLK);
   ME = 1'b1;
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 45;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on ME  when LS active  --- \n\n", $time, test_num);
  setuphold("ME_LS_H","Tmc",$realtobits(0.137),0,0, 2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 46;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on ME  when LS active  --- \n\n", $time, test_num);
  setuphold("ME_LS_H","Tmc",$realtobits(0.137),0,1, 2'b01);
  @(negedge CLK);
  LS = 1'b0;
  @(negedge CLK);
  @(negedge CLK);
  ADR = 0;

  @(negedge CLK);
  LS = 1'b1;
  $display ("\n#######################################################################");
  test_num = 47;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on ME  when LS active  --- \n\n", $time, test_num);
  setuphold("ME","Tmc",$realtobits(0.137),0,0, 2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 48;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on ME  when LS active  --- \n\n", $time, test_num);
  setuphold("ME","Tmc",$realtobits(0.137),0,1, 2'b01);
  @(negedge CLK);
  LS = 1'b0;
  @(negedge CLK);
  @(negedge CLK);
  ADR = 0;
  @(negedge CLK);
   ME = 1;
   ADR = 0;
  @(negedge CLK);
   ME = 0;
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 49;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on ME  when ADR is X  --- \n\n", $time, test_num);
  setuphold("ME_X","Tmc",$realtobits(0.137),0,1, 2'b01);
  @(negedge CLK);
  @(negedge CLK);
  ADR = 0;
  @(negedge CLK);
  ME = 1'b1;
  ADR = 0;
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 50;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on ME   --- \n\n", $time, test_num);
  setuphold("ME","Tcmx",$realtobits(0.058),1,0, 2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 51;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on ME   --- \n\n", $time, test_num);
  setuphold("ME","Tcmx",$realtobits(0.058),1,1, 2'b01);
  @(negedge CLK);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 52;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on ME  when LS active  --- \n\n", $time, test_num);
  setuphold("ME_LS_H","Tcmx",$realtobits(0.058),1,0, 2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 53;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on ME   when LS active  --- \n\n", $time, test_num);
  setuphold("ME_LS_H","Tcmx",$realtobits(0.058),1,1, 2'b01);
  @(negedge CLK);
  LS = 1'b0;
  @(negedge CLK);

  @(negedge CLK);
  LS = 1'b1;
  $display ("\n#######################################################################");
  test_num = 54;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on ME  when LS active  --- \n\n", $time, test_num);
  setuphold("ME","Tcmx",$realtobits(0.058),1,0, 2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 55;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on ME   when LS active  --- \n\n", $time, test_num);
  setuphold("ME","Tcmx",$realtobits(0.058),1,1, 2'b01);
  @(negedge CLK);
  LS = 1'b0;
  @(negedge CLK);
  @(negedge CLK);
  ME = 1'b1;
  $display ("\n#######################################################################");
  test_num = 56;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on ME   when ADR is X  --- \n\n", $time, test_num);
  setuphold("ME_X","Tcmx",$realtobits(0.058),1,1, 2'b01);
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 57;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on LS   --- \n\n", $time, test_num);
  setuphold("LS","Tflsc",$realtobits(0.043),0,0, 2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 58;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on LS   --- \n\n", $time, test_num);
  setuphold("LS","Tflsc",$realtobits(0.043),0,1, 2'b01);
  @(negedge CLK);
  @(negedge CLK);
  ADR = 0;
  $display ("\n#######################################################################");
  test_num = 59;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on LS   --- \n\n", $time, test_num);
  setuphold("LS","Tlsx",$realtobits(0.163),1,0, 2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 60;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on LS   --- \n\n", $time, test_num);
  setuphold("LS","Tlsx",$realtobits(0.163),1,1, 2'b01);
  @(negedge CLK);








  $display ("\n#######################################################################");
  test_num = 61;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on TEST1   --- \n\n", $time, test_num);
  setuphold("TEST1","TT1C",$realtobits(0.320),0,0, 2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 62;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on TEST1   --- \n\n", $time, test_num);
  setuphold("TEST1","TT1C",$realtobits(0.320),0,1, 2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 63;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on TEST1   --- \n\n", $time, test_num);
  setuphold("TEST1","TCT1X",$realtobits(1.451),1,0, 2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 64;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on TEST1    --- \n\n", $time, test_num);
  setuphold("TEST1","TCT1X",$realtobits(1.451),1,1, 2'b01);
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 65;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on RM[1:0]   --- \n\n", $time, test_num);
  setuphold("RM","Trmc",$realtobits(0.403),0,0, 2'b00);
  @(negedge CLK); 
  $display ("\n#######################################################################");
  test_num = 66;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on RM[1:0]    --- \n\n", $time, test_num);
  setuphold("RM","Trmc",$realtobits(0.403),0,1, 2'b01);
  @(negedge CLK); 
  $display ("\n#######################################################################");
  test_num = 67;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on RM[1:0]   --- \n\n", $time, test_num);
  setuphold("RM","Tcrmx",$realtobits(0.270),1,0, 2'b00);
  @(negedge CLK); 
  $display ("\n#######################################################################");
  test_num = 68;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on RM[1:0]    --- \n\n", $time, test_num);
  setuphold("RM","Tcrmx",$realtobits(0.270),1,1, 2'b01);
  @(negedge CLK); 
  @(negedge CLK); 
  $display ("\n#######################################################################");
  test_num = 69;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on RM[3]   --- \n\n", $time, test_num);
  setuphold("RM","Trm3c",$realtobits(0.480),0,0, 2'b00);
  @(negedge CLK); 
  $display ("\n#######################################################################");
  test_num = 70;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on RM[3]    --- \n\n", $time, test_num);
  setuphold("RM","Trm3c",$realtobits(0.480),0,1, 2'b01);
  @(negedge CLK); 
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 71;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on RM[3]   --- \n\n", $time, test_num);
  setuphold("RM","Tcrm3x",$realtobits(1.772),1,0, 2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 72;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on RM[3]    --- \n\n", $time, test_num);
  setuphold("RM","Tcrm3x",$realtobits(1.772),1,1, 2'b01);
  @(negedge CLK);
  RM = 4'b0011;
  $display ("\n#######################################################################");
  test_num = 73;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on RME   --- \n\n", $time, test_num);
  setuphold("RME","Trmec",$realtobits(0.403),0,0, 2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 74;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on RME    --- \n\n", $time, test_num);
  setuphold("RME","Trmec",$realtobits(0.403),0,1, 2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 75;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on RME   --- \n\n", $time, test_num);
  setuphold("RME","Tcrmex",$realtobits(0.270),1,0, 2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 76;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on RME    --- \n\n", $time, test_num);
  setuphold("RME","Tcrmx",$realtobits(0.270),1,1, 2'b01);
  @(negedge CLK);
  RM = 4'b0011;
  RME = 1'b0;


  $display ("\n#######################################################################");
  test_num = 77;
  $display( "\n\n@%t TEST: %d --- Going to check Tcl, Tch & Tcc violations with different conditions of Memory Enable signal --- \n\n", $time, test_num);
  @(negedge CLK);
  read_mem(1,"","");
  @(negedge CLK)
  begin
    ME = 1'b0;
  end
   for (vec= 1; vec <=7; vec= vec+1)
   begin
     $display ("Creating patterns for Tch violations \n %t", $time);
     // Tch violations
     create_pattern(vec,"Tch");
     if ( vec == 7 )
       check_output(1,"Tch");
     else
       check_output(0,"Tch");
   end
   for (vec= 1; vec <=7; vec= vec+1)
   begin
     $display ("Creating patterns for Tcl violations \n %t", $time);
     // Tcl violations
     if ( vec != 6 )
     begin
       create_pattern(vec,"Tcl");
       if ( vec == 5 || vec == 7 )
         check_output(1,"Tcl");
       else
         check_output(0,"Tcl");
     end
   end
   for (vec= 1; vec <=7; vec= vec+1)
   begin
     $display ("Creating patterns for Tcx violations \n %t", $time);
     // Tcx violations
     if ( vec != 6 )
     begin
       create_pattern(vec,"Tcx");
       if ( vec == 7 )
         check_output(1,"Tcx");
       else
         check_output(0,"Tcx");
     end
   end

   for (j= 0; j <=6; j= j+1)
   begin
     if (j == 0)
     begin
       assign param_name = "Tccn_rmezo";
       assign param_val_tcc = 1.309;
       @(negedge CLK);
       RME = 1'b0;
     end
     if (j == 1)
     begin
       assign param_name = "Tccn_rm0";
       assign param_val_tcc = 1.772;
       @(negedge CLK);
       RME = 1'b1;
       RM = 4'd0;
     end
     if (j == 2)
     begin
       assign param_name = "Tccn_rm1";
       assign param_val_tcc = 1.478;
       @(negedge CLK);
       RME = 1'b1;
       RM = 4'd1;
     end
     if (j == 3)
     begin
       assign param_name = "Tccn_rm2";
       assign param_val_tcc = 1.322;
       @(negedge CLK);
       RME = 1'b1;
       RM = 4'd2;
     end
     if (j == 4)
     begin
       assign param_name = "Tccn_rm3";
       assign param_val_tcc = 1.309;
       @(negedge CLK);
       RME = 1'b1;
       RM = 4'd3;
     end
     if (j == 5)
     begin
       assign param_name = "Tccn_rm4";
       assign param_val_tcc = 1.267;
       @(negedge CLK);
       RME = 1'b1;
       RM = 4'd4;
     end
     if (j == 6)
     begin
       assign param_name = "Tccn_rm5";
       assign param_val_tcc = 1.254;
       @(negedge CLK);
       RME = 1'b1;
       RM = 4'd5;
     end
     for (vec= 1; vec <=7; vec= vec+1)
     begin
       $display ("Creating patterns for %s negedge to negedge violations \n %t j is %d vec is %d", param_name, $time, j, vec);
       // Tcc violations
       if ( vec != 5 && vec != 6 )
       begin
         create_pattern(vec,param_name);
         if ( vec == 7 )
           check_output(1,param_name);
         else
           check_output(0,param_name);
       end
     end
   end

   for (j= 0; j <=6; j= j+1)
   begin
     if (j == 0)
     begin
       assign param_name = "Tccp_rmezo";
       assign param_val_tcc = 1.309;
       @(negedge CLK);
       RME = 1'b0;
     end
     if (j == 1)
     begin
       assign param_name = "Tccp_rm0";
       assign param_val_tcc = 1.772;
       @(negedge CLK);
       RME = 1'b1;
       RM = 4'd0;
     end
     if (j == 2)
     begin
       assign param_name = "Tccp_rm1";
       assign param_val_tcc = 1.478;
       @(negedge CLK);
       RME = 1'b1;
       RM = 4'd1;
     end
     if (j == 3)
     begin
       assign param_name = "Tccp_rm2";
       assign param_val_tcc = 1.322;
       @(negedge CLK);
       RME = 1'b1;
       RM = 4'd2;
     end
     if (j == 4)
     begin
       assign param_name = "Tccp_rm3";
       assign param_val_tcc = 1.309;
       @(negedge CLK);
       RME = 1'b1;
       RM = 4'd3;
     end
     if (j == 5)
     begin
       assign param_name = "Tccp_rm4";
       assign param_val_tcc = 1.267;
       @(negedge CLK);
       RME = 1'b1;
       RM = 4'd4;
     end
     if (j == 6)
     begin
       assign param_name = "Tccp_rm5";
       assign param_val_tcc = 1.254;
       @(negedge CLK);
       RME = 1'b1;
       RM = 4'd5;
     end
     for (vec= 1; vec <=7; vec= vec+1)
     begin
       $display ("Creating patterns for Tcc posedge to posedge violations \n %t", $time);
       // Tcc violations
       if ( vec != 6 )
       begin
         create_pattern(vec,param_name);
         if (  vec == 7 )
           check_output(1,param_name);
         else
           check_output(0,param_name);
       end
     end
   end

  $display ("\n#######################################################################");
  test_num = 78;
  $display( "\n\n@%t TEST: %d --- Going to check Tcl, Tch & Tcc violations --- \n\n", $time, test_num);
  @(negedge CLK);
   RME = 1'b0;
  @(negedge CLK);
  read_mem(1,"","");
//  restart_clk = 1'b1;
  @(negedge CLK);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;    
  end
  @(negedge CLK);
  no_clk = 1;  
  #70;
  CLK = 1'b1;
    #0.162;
     CLK = 1'b0;
  #1.027;
  if (Q_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Clock high pulse width(Tch) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end   
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock high pulse width(Tch) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end   
  #70;
  ME = 1'b1;
  ADR = 12'b0;
  #70;
  CLK = 1'b1;
  #1.027;
  if (Q_BEHAV === test.top_behav.uut.mem_core_array[0])
  begin
    $display("\n\n@%t           Read on First valid clock is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Read on First valid clock is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  restart_clk = 1'b1;
 
  @(negedge CLK);
  @(negedge CLK);
  read_mem(1,"","");
  @(negedge CLK);
  @(negedge CLK);
  no_clk = 1;
  #70;
  CLK = 1'b1;
    #0.9899999999999999;
    CLK = 1'b0;
    #0.319;
    CLK = 1'b1;
    #1.027;
    if (Q_BEHAV === 80'bx)
    begin
      $display("\n\n@%t           Clock low pulse width(Tcl) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock low pulse width(Tcl) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
  #70;
  CLK = 1'b0;
  ME = 1'b1;
  ADR = 12'b0;
  #70;
  CLK = 1'b1;
  #1.027;
  if (Q_BEHAV === test.top_behav.uut.mem_core_array[0])
  begin
    $display("\n\n@%t           Read on First valid clock is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Read on First valid clock is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  restart_clk = 1'b1;
 
  @(negedge CLK);
  @(negedge CLK);
  read_mem(1,"","");
  @(negedge CLK);
  @(negedge CLK);
  no_clk = 1; 
  #70;
  CLK = 1'b1;
    #0.9889999999999999;
     CLK = 1'b0;
    #0.320;
    CLK = 1'b1;
    #0.9879999999999999;
    CLK = 1'b0;
    #1.027;
    if (Q_BEHAV === 80'bx)
    begin
      $display("\n\n@%t           Clock cycle time(Tcc) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end   
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tcc) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end   
    restart_clk = 1'b1;

  $display ("\n#######################################################################");
  test_num = 79;
  $display( "\n\n@%t TEST: %d --- Going to check CLK Tccrm0 violations --- \n\n", $time, test_num);
  @(negedge CLK);
    RME = 1'b1;
    RM = 4'd0;
  @(negedge CLK);
  @(negedge CLK);
  @(negedge CLK);
  no_clk = 1;
  #70;
  CLK = 1'b1;
  #2.092;
  CLK = 1'b0;
  #0.320;
  CLK = 1'b1;
  #1.451;
  CLK = 1'b0;
  #1.422;
  if (Q_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Clock cycle time(Tccrm0) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm0) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  restart_clk = 1'b1;
  @(negedge CLK);
  @(negedge CLK);
    RME = 1'b0;
  @(negedge CLK);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 80;
  $display( "\n\n@%t TEST: %d --- Going to check CLK Tccrm1 violations --- \n\n", $time, test_num);
  @(negedge CLK);
    RME = 1'b1;
    RM = 4'd1;
  @(negedge CLK);
  @(negedge CLK);
  @(negedge CLK);
  no_clk = 1;
  #70;
  CLK = 1'b1;
  #1.798;
  CLK = 1'b0;
  #0.320;
  CLK = 1'b1;
  #1.157;
  CLK = 1'b0;
  #1.408;
  if (Q_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Clock cycle time(Tccrm1) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm1) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  restart_clk = 1'b1;
  @(negedge CLK);
  @(negedge CLK);
    RME = 1'b0;
  @(negedge CLK);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 81;
  $display( "\n\n@%t TEST: %d --- Going to check CLK Tccrm2 violations --- \n\n", $time, test_num);
  @(negedge CLK);
    RME = 1'b1;
    RM = 4'd2;
  @(negedge CLK);
  @(negedge CLK);
  @(negedge CLK);
  no_clk = 1;
  #70;
  CLK = 1'b1;
  #1.6420000000000001;
  CLK = 1'b0;
  #0.320;
  CLK = 1'b1;
  #1.0010000000000001;
  CLK = 1'b0;
  #1.0379999999999998;
  if (Q_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Clock cycle time(Tccrm2) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm2) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  restart_clk = 1'b1;
  @(negedge CLK);
  @(negedge CLK);
    RME = 1'b0;
  @(negedge CLK);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 82;
  $display( "\n\n@%t TEST: %d --- Going to check CLK Tccrm3 violations --- \n\n", $time, test_num);
  @(negedge CLK);
    RME = 1'b1;
    RM = 4'd3;
  @(negedge CLK);
  @(negedge CLK);
  @(negedge CLK);
  no_clk = 1;
  #70;
  CLK = 1'b1;
  #1.629;
  CLK = 1'b0;
  #0.320;
  CLK = 1'b1;
  #0.9879999999999999;
  CLK = 1'b0;
  #1.027;
  if (Q_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Clock cycle time(Tccrm3) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm3) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  restart_clk = 1'b1;
  @(negedge CLK);
  @(negedge CLK);
    RME = 1'b0;
  @(negedge CLK);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 83;
  $display( "\n\n@%t TEST: %d --- Going to check CLK Tccrm4 violations --- \n\n", $time, test_num);
  @(negedge CLK);
    RME = 1'b1;
    RM = 4'd4;
  @(negedge CLK);
  @(negedge CLK);
  @(negedge CLK);
  no_clk = 1;
  #70;
  CLK = 1'b1;
  #1.587;
  CLK = 1'b0;
  #0.320;
  CLK = 1'b1;
  #0.9459999999999998;
  CLK = 1'b0;
  #1.001;
  if (Q_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Clock cycle time(Tccrm4) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm4) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  restart_clk = 1'b1;
  @(negedge CLK);
  @(negedge CLK);
    RME = 1'b0;
  @(negedge CLK);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 84;
  $display( "\n\n@%t TEST: %d --- Going to check CLK Tccrm5 violations --- \n\n", $time, test_num);
  @(negedge CLK);
    RME = 1'b1;
    RM = 4'd5;
  @(negedge CLK);
  @(negedge CLK);
  @(negedge CLK);
  no_clk = 1;
  #70;
  CLK = 1'b1;
  #1.574;
  CLK = 1'b0;
  #0.320;
  CLK = 1'b1;
  #0.9329999999999999;
  CLK = 1'b0;
  #0.991;
  if (Q_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Clock cycle time(Tccrm5) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm5) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  restart_clk = 1'b1;
  @(negedge CLK);
  @(negedge CLK);
    RME = 1'b0;
  @(negedge CLK);
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 85;
  $display( "\n\n@%t TEST: %d --- Going to check Tcltest1, Tchtest1 violations in TEST1 Mode --- \n\n", $time, test_num);
  @(negedge CLK);
  #1.451;
   TEST1 = 1'b1;
  @(negedge CLK);
  ADR = 12'b1;
  @(negedge CLK);
  read_mem_test1(1);
  @(negedge CLK);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;    
  end
  @(negedge CLK);
  no_clk = 1;
  #70;
  CLK = 1'b1;
  #1.5470000000000002;
  CLK = 1'b0;
  #0.21;
  if (Q_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Clock high pulse width(Tchtest1) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end   
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock high pulse width(Tchtest1) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #70;
  ME = 1'b1;
  ADR = 12'b0;
  #70;
  CLK = 1'b1;
  #70;
  CLK = 1'b0;
  #0.21;
  if (Q_BEHAV === test.top_behav.uut.mem_core_array[0])
  begin
    $display("\n\n@%t           In TEST1 Mode Read on First valid clock is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: In TEST1 Mode Read on First valid clock is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  restart_clk = 1'b1;
  @(negedge CLK);
  ADR = 12'b1;
  @(negedge CLK);
  read_mem_test1(1);
  @(negedge CLK);
  @(negedge CLK);
  no_clk = 1;
  #70;
  CLK = 1'b1;
  #2.858;
  CLK = 1'b0;
  #0.319;
  CLK = 1'b1;
   #70;
   CLK = 1'b0;
   #0.168;
   if (Q_BEHAV === 80'bx)
   begin
     $display("\n\n@%t           Clock low pulse width(Tcltest1) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
   end
   else
   begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock low pulse width(Tcltest1) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
  restart_clk = 1'b1;
  @(negedge CLK);
  ADR = 12'b1;
  @(negedge CLK);
  read_mem_test1(1);
  @(negedge CLK);
  #1.451;
   TEST1 = 1'b0;
  @(negedge CLK);


  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 86;
  $display( "\n\n@%t TEST: %d --- Synchonous CLK & ADR events  --- \n\n", $time, test_num);
  syncevent("ADR",2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 87;
  $display( "\n\n@%t TEST: %d --- Synchonous CLK & ME events  --- \n\n", $time, test_num);
  syncevent("ME",2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 88;
  $display( "\n\n@%t TEST: %d --- Synchonous CLK & TEST1 events  --- \n\n", $time, test_num);
  syncevent("TEST1",2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 89;
  $display( "\n\n@%t TEST: %d --- Synchonous CLK & RM events  --- \n\n", $time, test_num);
  syncevent("RM",2'b01);
  @(negedge CLK);
  RM = 4'b0011;
  @(negedge CLK); 
  ME = 1'b1;
  ADR = 0;

  @(negedge CLK);
  ME = 1'b1;
  ADR = 0;




  $display ("\n#######################################################################");
  test_num = 90;
  $display( "\n\n@%t TEST: %d --- Going to check Setup rise constraint on LS  --- \n\n", $time, test_num);
  @(negedge CLK);
  LS = 1'b0;
  #(70 - 0.101);
  LS = 1'b1;
  @(negedge CLK);
  LS = 1'b0;
  #0.001;
  if (Q_BEHAV === 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: The Parameter Trlsc is not modelled effectively\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           The Parameter Trlsc is modelled effectively \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 91;
  $display( "\n\n@%t TEST: %d --- Going to check Setup rise Violation on LS  --- \n\n", $time, test_num);
  @(negedge CLK);
  LS = 1'b0;
  #((70 - 0.101)+0.001);
  LS = 1'b1;
  @(negedge CLK);
  LS = 1'b0;
  #0.001;
  if (Q_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: The Parameter Trlsc is not modelled effectively\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           The Parameter Trlsc is modelled effectively \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLK);


  $display ("\n#######################################################################");
  test_num = 92;
  $display( "\n\n@%t TEST: %d --- Code Coverage Improvement Vectors --- \n\n", $time, test_num);
  @(negedge CLK);
  #1.452;
  TEST1 = 1'bX;
  @(negedge CLK);
  @(negedge CLK);
  #1.452;
  TEST1 = 1'b0;
  @(negedge CLK);
  @(negedge CLK);
  @(negedge CLK);
  #1.452;
  TEST1 = 1'b1;
  @(negedge CLK);
  @(negedge CLK);
  #1.452;
  TEST1 = 1'b0;
  @(negedge CLK);
  #69.999;
  LS = ~LS;
  @(posedge CLK);
  #0.001;
  LS = ~LS;
  @(negedge CLK);

  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 93;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on ADR   --- \n\n", $time, test_num);
  setuphold("ADR","Tac",$realtobits(0.320),0,1, 2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 94;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on RME    --- \n\n", $time, test_num);
  setuphold("RME","Trmec",$realtobits(0.403),0,1, 2'b01);
  @(negedge CLK);
  RM = 4'b0011;
  RME = 1'b0;
  force test.top_behav.uut.mes_all_valid = 1'b0;
  @(negedge CLK);
  release test.top_behav.uut.mes_all_valid;


 $display( "\n\n@%t TEST:  --------- All Memory test over ---------- \n\n", $time);


 $display("\n####################################################################################");
 $display("\n                    ********** TEST SUMMARY **********\n");
 $display("\n1.  No. of test_status Errors is  %d", test_status);
 $display("\n2.  Please check ERROR_MODEL messages in the verilog.log file");
 $display("    for the cause of test_status Errors");
 $display("\n3.  Please check OP in the verilog.log file for any mismatch");
 $display("    between  verilog and vhdl memory model!\n");
 $display("\n####################################################################################");


#1000 $finish;
end //initial


endmodule
