//---------------------------------------------------------------------
//               Copyright(c) Synopsys, Inc.                           
//     All Rights reserved - Unpublished -rights reserved under        
//     the Copyright laws of the United States of America.             
//                                                                     
//  U.S. Patents: 7,093,156 B1 and 7,406,620 B2 (and more pending).    
//                                                                     
//  This file includes the Confidential information of Synopsys, Inc.  
//  and GLOBALFOUNDRIES.                                               
//  The receiver of this Confidential Information shall not disclose   
//  it to any third party and shall protect its confidentiality by     
//  using the same degree of care, but not less than a reasonable      
//  degree of care, as the receiver uses to protect receiver's own     
//  Confidential Information.                                          
//  Licensee acknowledges and agrees that all output generated for     
//  Licensee by Synopsys, Inc. as described in the pertinent Program   
//  Schedule(s), or generated by Licensee through use of any Compiler  
//  licensed hereunder contains information that complies with the     
//  Virtual Component Identification Physical Tagging Standard (VCID)  
//  as maintained by the Virtual Socket Interface Alliance (VSIA).     
//  Such information may be expressed in GDSII Layer 63 or other such  
//  layer designated by the VSIA, hardware definition languages, or    
//  other formats.  Licensee is not authorized to alter or change any  
//  such information.                                                  
//---------------------------------------------------------------------
//                                                                     
//  Built for linux64 and running on linux64.                          
//                                                                     
//  Software           : Rev: U-2022.12                                
//  Library Format     : Rev: 1.05.00                                  
//  Compiler Name      : gf22nsd41p11s1srl256sa04p1                    
//  Platform           : Linux3.10.0-957.5.1.el7.x86_64                
//                     : #1 SMP Wed Dec 19 10:46:58 EST 2018x86_64     
//  Date of Generation : Fri Dec 09 13:52:45 CET 2022                  
//                                                                     
//---------------------------------------------------------------------
//   --------------------------------------------------------------     
//                       Template Revision : 6.3.7                      
//   --------------------------------------------------------------     
//                 * Synchronous, 1-Port Register File *              
//             * Verilog Testbench ( Functional & Timing ) *          
// * Verilog Testbench for comparison of Behavioral verilog & Behavioral VHDL models * 
//                THIS IS A SYNCHRONOUS 1-PORT MEMORY MODEL           
//                                                                    
//   Memory Name:SNPS_RF_SP_UHS_1024x32                               
//   Memory Size:1024 words x 32 bits                                 
//                                                                    
//                               PORT NAME                            
//                               ---------                            
//               Output Ports                                         
//                                   Q[31:0]                          
//               Input Ports:                                         
//                                   ADR[9:0]                         
//                                   D[31:0]                          
//                                   WE                               
//                                   ME                               
//                                   CLK                              
//                                   TEST1                            
//                                   TEST_RNM                         
//                                   RME                              
//                                   RM[3:0]                          
//                                   WA[1:0]                          
//                                   WPULSE[2:0]                      
//                                   LS                               
//                                   BC0                              
//                                   BC1                              
//                                   BC2                              
// -------------------------------------------------------------------- 

`timescale 1 ns / 1 ps 
module test;

wire [31:0] Q;
wire [31:0] Q_BEHAV;
reg [9:0] ADR;
reg [31:0] D;
reg WE;
reg ME;
reg CLK;
reg TEST1;
reg TEST_RNM;
reg RME;
reg [3:0] RM;
reg [1:0] WA;
reg [2:0] WPULSE;
reg LS;
reg BC0;
reg BC1;
reg BC2;
reg [10*20:1] param_name;
real param_val_tcc;
integer vec;
integer j;
integer test_status;
integer bc0_i;
integer i;
integer test_num;
integer err_cnt_test;
integer err_cnt;
integer simul_clk;
integer no_clk;
integer no_tclk;
integer wa_addr, wp_addr;
integer data_wr;
real clk_period;
reg restart_clk;
reg Q_tmp ;
reg flagrtl;
reg ME_pos, ME_neg;
integer d_num;
reg [31:0] data_expect;

integer temp_addr;

SNPS_RF_SP_UHS_1024x32_behav  top_behav (  .Q( Q_BEHAV), .ADR( ADR), .D( D), .WE( WE), .ME( ME), .CLK( CLK), .TEST1( TEST1), .TEST_RNM( TEST_RNM), .RME( RME), .RM( RM), .WA( WA), .WPULSE( WPULSE), .LS( LS), .BC0( BC0), .BC1( BC1), .BC2( BC2) );
SNPS_RF_SP_UHS_1024x32  top_struct (  .Q( Q), .ADR( ADR), .D( D), .WE( WE), .ME( ME), .CLK( CLK), .TEST1( TEST1), .TEST_RNM( TEST_RNM), .RME( RME), .RM( RM), .WA( WA), .WPULSE( WPULSE), .LS( LS), .BC0( BC0), .BC1( BC1), .BC2( BC2) );
`define True    1'b1
`define False   1'b0
`define Mid     1'bx
`define Highz   1'bz
initial begin
  `ifdef VIRAGE_MONITOR_SIGNALS
     $monitor ( "Time = %t Q=%h ADR=%h D=%h WE=%h ME=%h CLK=%h TEST1=%h TEST_RNM=%h RME=%h RM=%h WA=%h WPULSE=%h LS=%h BC0=%h BC1=%h BC2=%h ", $realtime, Q, ADR, D, WE, ME, CLK, TEST1, TEST_RNM, RME, RM, WA, WPULSE, LS, BC0, BC1, BC2);
  `endif 
  //$shm_open("waves.shm"); 
  //$shm_probe("AC"); 
  //$dumpfile("waves.vcd"); 
  //$dumpvars(); 
  //$vcdplusfile("waves.vpd"); 
  //$vcdpluson; 

    //$sdf_annotate( "SNPS_RF_SP_UHS_1024x32.sdf");
end
task assist_initial;
input [8*8:1] signal;
begin
  if ( (signal == "WA") || (signal == "") )
    WA = 2'b10;
  if ( (signal == "WPULSE") || (signal == "") )
    WPULSE = 3'b000;
end
endtask
reg [31:0] OP_Q;

task compare_Q;
  output [31:0] OP_Q;
  input [31:0] Q;
  input [31:0] Q_BEHAV;

    if ( Q === 32'bz && Q_BEHAV === 32'bz )
      OP_Q = 32'b0;
    else if ( Q === 32'bx && Q_BEHAV === 32'bx  )
      OP_Q = 32'b0;
    else begin
      for ( i = 0; i <= 31; i = i + 1 ) begin
         OP_Q[i] = (((Q_BEHAV[i] === 1'bx && Q[i] === 1'bx) || ( Q_BEHAV[i] === 1'bz && Q[i] === 1'bz))?0:(Q_BEHAV[i] ^ Q[i]));
      end
    end
endtask

always @( Q or Q_BEHAV ) begin
  #0;
    if ( (|( Q ^ Q )) == 0 && (|( Q_BEHAV ^ Q_BEHAV )) == 0 ) begin
     #0.001 compare_Q ( OP_Q, Q, Q_BEHAV );
    end
    else if ( Q === 32'bz && Q_BEHAV === 32'bz )
      OP_Q = 32'b0;
    else if ( Q === 32'bx && Q_BEHAV === 32'bx  )
      OP_Q = 32'b0;
    else begin
      OP_Q = 32'b0;
      #0.001 compare_Q ( OP_Q, Q, Q_BEHAV );
    end
end

always @(OP_Q) begin
   if ( OP_Q !== 32'b0 ) begin
     test_status = test_status + 1;
     $display( $realtime, , "ERROR_MODEL: Q = %h, Q_BEHAV = %h", Q, Q_BEHAV );
   end
   else begin
     $display( $realtime, , "OP_Q = %h", OP_Q );
   end
end

`define True    1'b1
`define False   1'b0

wire [3:0] RM_int;
assign RM_int = ((RME===1'b1)?RM:((RME===1'b0)?4'b0011:4'bx));




reg [31:0] Q_prev;






`ifdef enable_rm_verification
always @(top_behav.llsb)
begin
 $display("Monitoring netlist node top_struct.X_TOP_LAY.X_top.X_ref_row.X_ref_row_t.LLSBR for source bias value.");
  #2;
  if (top_behav.llsb !== 1'bX && top_struct.X_TOP_LAY.X_top.X_ref_row.X_ref_row_t.LLSBR !== 1'bX)
  begin
    if ( top_behav.llsb === ~top_struct.X_TOP_LAY.X_top.X_ref_row.X_ref_row_t.LLSBR )
    begin
     $display("PASS - model and netlist has same source bias values, model %b netlist %b", top_behav.llsb, ~top_struct.X_TOP_LAY.X_top.X_ref_row.X_ref_row_t.LLSBR);
    end
    else
    begin
      test_status = test_status + 1;
      $display("ERROR_MODEL: model and netlist has different source bias values, model %b and netlist %b ", top_behav.llsb, top_struct.X_TOP_LAY.X_top.X_ref_row.X_ref_row_t.LLSBR);
    end
  end
  else
  begin
      test_status = test_status + 1;
     $display("ERROR_MODEL: model and or netlist has unknown source bias values, model %b netlist %b", top_behav.llsb, top_struct.X_TOP_LAY.X_top.X_ref_row.X_ref_row_t.LLSBR);
  end
end

`endif

wire bc1_net;
wire bc2_net;

assign bc1_net = (((BC1^BC1) | (BC2^BC2)) ^ (~BC2 | BC1));

assign bc2_net = (((BC1^BC1) | (BC2^BC2)) ^ (~BC1 | BC2));


`ifdef enable_rm_verification
always @(top_struct.X_TOP_LAY.X_top.X_ref_row.X_ref_row_t.SDB_BC1TR)
begin
 $display("Monitoring netlist node top_struct.X_TOP_LAY.X_top.X_ref_row.X_ref_row_t.SDB_BC1TR for BC1 diode value.");
  #2.0;
  if (bc1_net !== 1'bX && top_struct.X_TOP_LAY.X_top.X_ref_row.X_ref_row_t.SDB_BC1TR !== 1'bX)
  begin
    if ( bc1_net === ~top_struct.X_TOP_LAY.X_top.X_ref_row.X_ref_row_t.SDB_BC1TR )
    begin
     $display("PASS - model and netlist has same BC1 diode node values, model %b netlist %b", bc1_net, ~top_struct.X_TOP_LAY.X_top.X_ref_row.X_ref_row_t.SDB_BC1TR);
    end
    else
    begin
      test_status = test_status + 1;
      $display("ERROR_MODEL: model and netlist has different BC1 diode node values, model %b and netlist %b ", bc1_net, ~top_struct.X_TOP_LAY.X_top.X_ref_row.X_ref_row_t.SDB_BC1TR);
    end
  end
end

always @(top_struct.X_TOP_LAY.X_top.X_ref_row.X_ref_row_t.SDB_BC2TR)
begin
 $display("Monitoring netlist node top_struct.X_TOP_LAY.X_top.X_ref_row.X_ref_row_t.SDB_BC2TR for BC2 diode value.");
  #2.0;
  if (bc2_net !== 1'bX && top_struct.X_TOP_LAY.X_top.X_ref_row.X_ref_row_t.SDB_BC2TR !== 1'bX)
  begin
    if ( bc2_net === ~top_struct.X_TOP_LAY.X_top.X_ref_row.X_ref_row_t.SDB_BC2TR )
    begin
     $display("PASS - model and netlist has same BC2 diode node values, model %b netlist %b", bc2_net, ~top_struct.X_TOP_LAY.X_top.X_ref_row.X_ref_row_t.SDB_BC2TR);
    end
    else
    begin
      test_status = test_status + 1;
      $display("ERROR_MODEL: model and netlist has different BC2 diode node values, model %b and netlist %b ", bc2_net, ~top_struct.X_TOP_LAY.X_top.X_ref_row.X_ref_row_t.SDB_BC2TR);
    end
  end
end

`endif



task write_mem;
input [9:0] addr_incr; //address increments by this value
input [9:0] address_w; //if null,entire memory is written.
input [31:0] data; //if null,data=0 in case of single location,else data=addr.
integer k;
integer j;
integer l;
reg [31:0]  i;
begin  
  i = data;
  @(negedge CLK)
  begin
    ME = 1'b1;
  end
  if ( addr_incr == "" ) 
  begin
    @(negedge CLK)
    begin
      WE = 1'b1;
      ADR = address_w;
      D = i;
    end
    @(posedge CLK)
    begin
      #0.113;
      WE = 1'b0; 
    end 
  end
  else
  begin
    k = addr_incr;
    for ( j=0; j<= 1023; j= j+k)
    begin
      @(negedge CLK)
      begin
        WE = 1'b1;
        ADR = j;
        D = i;
      end
      @(posedge CLK)
      begin
        #0.113;
        WE = 1'b0;
      end
      if ( data == "" && address_w !== 10'bx)
      begin
        i = i + k;
        if (i > 32'b11111111111111111111111111111111) i = 0;
      end
    end
  end
end
endtask

task write_mem_inv;
input [9:0] addr_incr; //address increments by this value
input [9:0] address_w; //if null,entire memory is written.
input [31:0] data; //if null,data=0 in case of single location,else data=addr.
integer k;
integer j;
reg [31:0]  i;
begin   
  if ( data == "" )
    i = 32'b11111111111111111111111111111111;
  else  
    i = data;
  @(negedge CLK)
  begin 
    ME = 1'b1;
  end
  if ( addr_incr == "" )
    k = 1;
  else
    k = addr_incr;
  for ( j=0; j<= 1023; j= j+k)
  begin
    @(negedge CLK)
    begin
      WE = 1'b1;
      ADR = j;
      D = i;
    end
    @(posedge CLK)
    begin
      #0.113;
      WE = 1'b0;
    end
    if ( data == "" )
    begin
      if ( i == 0 )
       i = 32'b11111111111111111111111111111111;
      else 
       i = i - k;
    end
  end  
end  
endtask  





task read_mem;
input [9:0] addr_incr; //address increments by this value
input [9:0] address_r; //if null,entire memory is read.
input [31:0] data; //if null,data=0 in case of single location,else data=addr.
integer k;
integer j;
integer l;
reg [31:0]  i;
begin
  err_cnt = 0;
  i = data;
  @(negedge CLK)
  begin
    ME = 1'b1;
    WE = 1'b0;
  end
  if ( addr_incr == "" )
  begin
    @(negedge CLK);
    ADR = address_r;
    @(posedge CLK);
    if (RME === 1'b1)
    begin
      if(RM === 4'd0)
        #1.386;
      else if(RM === 4'd1)
        #1.305;
      else if(RM === 4'd2)
        #0.702;
      else if(RM === 4'd3)
        #0.497;
      else if(RM === 4'd4)
        #7777.001;
      else if(RM === 4'd5)
        #7777.001;
      else if(RM === 4'd6)
        #7777.001;
      else if(RM === 4'd7)
        #7777.001;
      else
        #1.386;
    end
    else
    #0.497
    #0.0;
    if (Q_BEHAV !== i)
    begin
      err_cnt = err_cnt + 1;
      test_status = test_status + 1;
      $display ("\n ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = %h at time %t  ", ADR, Q_BEHAV, i, $time);
      $display ("\n@%t            FAIL\n", $time);
    end
  end
  else
  begin
    k = addr_incr;
    for ( j=0; j<= 1023; j= j+k)
    begin
      @(negedge CLK);
      ADR = j;
      @(posedge CLK);
      rmdel_tcq;
      if (Q_BEHAV !== i)
      begin
        err_cnt = err_cnt + 1;
        test_status = test_status + 1;
        $display ("\n ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = %h at time %t  ", ADR, Q_BEHAV, i, $time);
        $display ("\n@%t            FAIL\n", $time);
      end
      if ( data == "" && address_r !== 10'bx)
      begin
        i = i + k;
        if (i > 32'b11111111111111111111111111111111) i = 0;
      end
    end
  end
end
endtask




task read_mem_inv;
input [9:0] addr_incr; //address increments by this value
input [9:0] addr; //if null,entire memory is read.
input [31:0] data; //if null,data=0 in case of single location,else data=addr.
integer k;
integer j;
reg [31:0]  i;
begin
  err_cnt = 0;
  if ( data == "" )
    i = 32'b11111111111111111111111111111111;
  else
    i = data;
  if ( addr_incr == "" )
    k = 1;
  else
    k = addr_incr;
  @(negedge CLK)
  begin  
    ME = 1'b1;
  end
  for ( j=0; j<= 1023; j= j+k)
  begin
    @(negedge CLK);
    ADR = j;
    @(posedge CLK);
    #0.497;
    if (Q_BEHAV !== i)
    begin
      err_cnt = err_cnt + 1;
      test_status = test_status + 1;
      $display ("\n ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = %h at time %t  ", ADR, Q_BEHAV, i, $time);
      $display ("\n@%t            FAIL\n", $time);
    end
    if ( data == "" )
    begin
      if ( i == 0 )
        i = 32'b11111111111111111111111111111111;
      else
        i = i - k;
    end
  end
end
endtask

task read_mem_test1;
input [9:0] addr_incr; //address increments by this value
input [9:0] address_r; //if null,entire memory is read.
input [31:0] data; //if null,data=0 in case of single location,else data=addr.
integer k;
integer j;
integer l;
reg [31:0]  i;
begin
  err_cnt = 0;
  i = data;
  @(negedge CLK);
  ME = 1'b1;
  if ( addr_incr == "" )
  begin
    @(negedge CLK);
    ADR = address_r;
    @(posedge CLK);
    @(negedge CLK);
    #0.234;
    if (Q_BEHAV !== i)
    begin
      err_cnt = err_cnt + 1;
      test_status = test_status + 1;
      $display ("\n ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = %h at time %t  ", ADR, Q_BEHAV, i, $time);
      $display ("\n@%t            FAIL\n", $time);
    end
  end
  else
  begin
    k = addr_incr;
    for ( j=0; j<= 1023; j= j+k)
    begin
      @(negedge CLK);
      ADR = j;
      @(posedge CLK);
      #0.186;
      if (Q_BEHAV !== 32'bx)
      begin
        err_cnt = err_cnt + 1;
        $display ("\n ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = %h at time %t  ",ADR, Q_BEHAV,temp_addr, $realtime);
      end
      @(negedge CLK);
      #0.234;
      if (Q_BEHAV !== i)
      begin
        err_cnt = err_cnt + 1;
        test_status = test_status + 1;
        $display ("\n ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = %h at time %t  ", ADR, Q_BEHAV, i, $time);
        $display ("\n@%t            FAIL\n", $time);
      end
      if ( data == "" && address_r !== 10'bx)
      begin
        i = i + k;
        if (i > 32'b11111111111111111111111111111111) i = 0;
      end
    end
  end
  @(negedge CLK);
end
endtask

task rmdel_tcq;
begin
  if (RME === 1'b1)
  begin
    if(RM === 4'd0)
      #1.386;
    else if(RM === 4'd1)
      #1.305;
    else if(RM === 4'd2)
      #0.702;
    else if(RM === 4'd3)
      #0.497;
    else if(RM === 4'd4)
      #7777.001;
    else if(RM === 4'd5)
      #7777.001;
    else if(RM === 4'd6)
      #7777.001;
    else if(RM === 4'd7)
      #7777.001;
    else
      #1.386;
  end
  else
    #0.497;
end
endtask



reg tmp_simul_clk;
task change_clk_period;
input [64:1] param;     // delay
input set;     // set for new clcok period
real paramr;
begin
  paramr = $bitstoreal(param);
  if (set === 1'b1)
  begin
    tmp_simul_clk = simul_clk;
    simul_clk = 5;
    clk_period = (paramr + 5);
  end
  else if (set === 1'b0)
  begin
    @(negedge CLK);
    simul_clk = tmp_simul_clk;
  end
end
endtask
task enablesignals;
input [8*22:1] signal;   // signal
input [8*15:1] param_name; // timing_parameter name
input [64:1] param;     // delay
input oper1;            // setup/hold
input oper2;            // constraint/violation
input mode;            // read/write
real paramr;
begin
  paramr = $bitstoreal(param);
  if (param_name == "Tfls0c")
    BC0 = 1'b0;
  if (param_name == "Tfls1c" || signal == "LS_BC0_1")
  begin
    BC0 = 1'b1;
    signal = "LS";
  end
  if (( oper1 == 0 ) && (paramr > 7790.0))
    change_clk_period(param,1'b1);
  @(negedge CLK)
  begin
    if (signal == "ME" || signal == "ME_LS_H" || signal == "ME_X")
      ME = 1'b0;
    else
      ME = 1'b1;
    if (signal == "LS" || signal == "ME_LS_H")
      LS = 1'b1;
    else
      LS = 1'b0;
    if (signal == "ADR" && ((oper1 == 0) || (oper1 == 1 && oper2 == 1)))
      ADR = 10'd1023;
    else if ((signal == "ADR_OR" && (oper1 == 1)) || signal == "WE_OR")
      ADR = 10'd1023;
    else if (signal == "WE_X" || signal == "ME_X")
      ADR = 10'dx;
    else
      ADR = 0;
    if ((signal == "D" || signal == "D_WE0") && oper1 == 0 )
      D   = 32'b11111111111111111111111111111111;
    else
      D   = 0;
    if ( mode == 1 )
    begin
      WE = 1'b1;
    end
    else
    begin
      WE = 1'b0;
    end 

    if (signal == "TEST1" && oper1 == 0 )
      TEST1 <= #2.0949999999999998 1'b1;
    else if ( signal == "TEST1" )
      TEST1 <= #2.0949999999999998 1'b0;
  if (signal == "TEST_RNM")
    TEST_RNM = 1'b1;
  if (signal == "RM" )
  begin
    if (param_name == "Trmc")
      RM[2:0] = 3'b0;
    else if (param_name == "Trm3c")
      RM[3] = 1'b0;
    RME = 1'b1;
  end
  end
   if (signal == "BC0" || signal == "BC1" || signal == "BC2")
  begin
    @(negedge CLK);
     ME = 1'b0;
    if (mode == 1'b0)
      LS <= #(7790.0 - 0.065) 1'b1;
  end
  if ( oper1 == 0 )
  begin
    if ( oper2 == 0 )
     if (paramr < 7790.0)
      #(7790.0 - paramr);
     else
       #((clk_period+0.0) - paramr) ;
    else
     if (paramr < 7790.0)
      #((7790.0 - paramr)+0.001);
     else
       #(((clk_period+0.0) - paramr)+0.001);
    if (signal == "ME" || signal == "ME_LS_H" || signal == "ME_X")
      ME = ~ME;
    else if (signal == "ADR")
      ADR = 0;
    else if (signal == "ADR_OR")
      ADR = 10'd1023;
    else if (signal == "LS")
      LS = ~LS;
    else if (signal == "BC0")
      BC0 = ~BC0;
    else if (signal == "BC1")
      BC1 = ~BC1;
    else if (signal == "BC2")
      BC2 = ~BC2;
    else if (signal == "WA")
      WA = ~WA;
    else if (signal == "WPULSE")
      WPULSE = ~WPULSE;
    else if (signal == "D")
      D = 0;
    else if (signal == "D_WE0")
      D = 0;
    else if (signal == "WE" || signal == "WE_OR" || signal == "WE_X")
      WE = ~WE;
    else if (signal == "TEST_RNM")
      TEST_RNM = ~TEST_RNM;
    else if (signal == "TEST1")
      TEST1 = ~TEST1;
    else if (signal == "RM")
    begin
      if (param_name == "Trmc")
        RM[2:0] = ~RM[2:0];
      else if (param_name == "Trm3c")
        RM[3] = ~RM[3];
    end
    else if (signal == "RME")
      RME = ~RME;
  end
  if ( oper1 == 1 )
  begin
    if ( signal == "TEST1" )
     @(negedge CLK);
    else
    @(posedge CLK);
    if ( oper2 == 0 )
      if (paramr < 0.00)
      begin
        @(negedge CLK);
        #(7790.0 + paramr);
      end
      else
      begin
        #( paramr);
      end
    else
     if ( paramr > 0.001 )
      #(paramr-0.001);
     else if (paramr < 0.00)
     begin
       @(negedge CLK);
       #(7790.0 + paramr - 0.001);
     end
    if (signal == "ME" || signal == "ME_LS_H" || signal == "ME_X")
      ME = ~ME;
    else if (signal == "ADR")
      ADR = ~ADR;
    else if (signal == "ADR_OR")
      ADR = 0;
    else if (signal == "LS")
      LS = ~LS;
    else if (signal == "WA")
      WA = ~WA;
    else if (signal == "WPULSE")
      WPULSE = ~WPULSE;
    else if (signal == "D")
      D = ~D;
    else if (signal == "D_WE0")
      D = ~D;
    else if (signal == "WE" || signal == "WE_OR" || signal == "WE_X")
      WE = ~WE;
    else if (signal == "TEST1")
    begin
      TEST1 = ~TEST1;
      WE = 1'b0;
    end
    else if (signal == "TEST_RNM")
      TEST_RNM = ~TEST_RNM;
    else if (signal == "RM")
    begin
      if (param_name == "Tcrmx")
        RM[2:0] = ~RM[2:0];
      else if (param_name == "Tcrm3x")
        RM[3] = ~RM[3];
    end
    else if (signal == "RME")
      RME = ~RME;
    if ( paramr > 0.496 )
     #0.001;
    else 
     #(7777.0 - paramr + 0.001 + 0.001);
    if (signal == "TEST1")
    #0.234;
  end
  if (signal == "ME_X" || signal == "WE_X" || signal == "WE_OR")
  begin
    ADR <= @(negedge CLK) 0;
  end
end
endtask
 
task setuphold;
input [8*22:1] signal; // name of signal under test
input [8*15:1] param_name; // timing parameter name
input [64:1] param_val; //del
input oper1;       //setup/hold
input oper2;       //constraint/violation
input mode;        //read/write
input [1:0] chk;         //outputchk/memchk/both/XNW
input [1:0] outstat;     //no X/X/new data/prev data
input [1:0] memstat;     //read clean loc/read clean entire mem/corrupt loc/corrupt all
integer stat;
begin
  err_cnt = 0;
  enablesignals(signal,param_name,param_val,oper1,oper2,mode);
  if (signal == "ADR_OR")
  signal = "ADR";
 if (signal == "WE_OR")
  signal = "WE";
 if (signal == "D_WE0")
  signal = "D";
 if (signal == "WE_X")
  signal = "WE";
 if (signal == "ME_X")
  signal = "ME";
  if (signal == "ME_LS_H")
  signal = "ME";
  if ( chk != 2'b01 && (!( mode == 1'b0)))
  begin
    if ( oper1 == 0 )
    begin    // setup
      @(posedge CLK);
      rmdel_tcq;
    end
    if ( outstat == 2'b00 )
    begin
      if (Q_BEHAV !== 32'bx) stat = 0;
      else stat = 1;
    end
    else if ( outstat == 2'b01  )
    begin
      if (Q_BEHAV === 32'bx) stat = 0;
      else stat = 1;
    end
    else if ( outstat == 2'b10 )
    begin
      if (Q_BEHAV === 32'b11111111111111111111111111111111) stat = 0;
      else stat = 1;
    end
    else if ( outstat == 2'b11 )
    begin
      if (Q_BEHAV === 32'd0) stat = 0;
      else stat = 1;
    end
    if (stat == 0)
    begin
      $display ("\n@%t            The Parameter %s is modelled effectively", $time, param_name);
      $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1 ;
      $display ("\n@%t               ERROR_MODEL: The Parameter %s is not modelled effectively ", $time, param_name);
      $display ("\n@%t            FAIL\n", $time);
    end
  end
  @(negedge CLK);
  WE = 1'b0;
  if (signal == "ME")
  LS = 1'b0;
   if (signal == "BC0" || signal == "BC1" || signal == "BC2")
  begin
    LS = 1'b0;
  end
  assist_initial("WA");
  assist_initial("WPULSE");
  if ( signal == "TEST1" && oper1 == 1 ) 
  begin
    #2.0949999999999998;
    TEST1  = 1'b0;
  end
  if ( chk != 2'b00 )
  begin
    if ( memstat == 2'b00 )
      read_mem("",10'd0,32'b0);
    else if ( memstat == 2'b01 )
      read_mem(1,"","");
    else if ( memstat == 2'b10 )
    begin
      if ( chk == 2'b11 )
      begin
        read_mem("",10'd1023,32'bx);
        write_mem("",10'd1023,32'b0);
      end
      else
      begin
        read_mem("",10'd0,32'bx);
        write_mem("",10'd0,32'b0);
      end
    end
    else if ( memstat == 2'b11 )
    begin
      read_mem(1,"",32'bx);
      write_mem(1,"","");
    end
  end
  if (err_cnt == 0)
  begin
    $display ("\n@%t            The Parameter %s is modelled effectively", $time, param_name);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1 ;
    $display ("\n@%t               ERROR_MODEL: The Parameter %s is not modelled effectively ", $time, param_name);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  if (( oper1 == 0 ) && ($bitstoreal(param_val) > 7790.0))
    change_clk_period(param_val,1'b0);
  @(negedge CLK);
  if (param_name == "Tfls1c")
  begin
    BC0 = 1'b0;
    @(negedge CLK);
  end
end
endtask
 

task syncevent;
input [8*22:1] signal; // name of signal under test
input mode;        //read/write
input [1:0] chk;         //outputchk/memchk/both/XNW
input [1:0] outstat;     //no X/X/new data/prev data
input [1:0] memstat;     //read clean loc/read clean entire mem/corrupt loc/corrupt all
integer stat;
begin
  err_cnt = 0;
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;
    D   = 0;
    if ( mode == 1 )
    begin
      WE = 1'b1;
    end
    else
    begin
      WE = 1'b0;
    end
  end
  @(posedge CLK);
  #0;
  if (signal == "ME")
    ME = ~ME;
  else if (signal == "ADR")
    ADR[0] = ~ADR[0];
  else if (signal == "D")
    D = ~D;
  else if (signal == "WE")
    WE = ~WE;
  #0.497;
  if ( chk != 2'b01 )
  begin
    if ( outstat == 2'b00 )
    begin
      if (Q_BEHAV !== 32'bx) stat = 0;
      else stat = 1;
    end
    else if ( outstat == 2'b01 )
    begin
      if (Q_BEHAV === 32'bx) stat = 0;
      else stat = 1;
    end
    else if ( outstat == 2'b10 )
    begin
      if (Q_BEHAV === 32'd0) stat = 0;
      else stat = 1;
    end
    if (stat == 0)
    begin
      $display ("\n@%t            Synchronous CLK & %s events Modelled effectively", $time, signal);
      $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1 ;
      $display ("\n@%t            ERROR_MODEL: Synchronous CLK & %s events not Modelled effectively", $time, signal);
      $display ("\n@%t            FAIL\n", $time);
    end
  end
  #10;
  @(negedge CLK);
  if ( signal == "ME" )
    ME = 1'b1;
  WE = 1'b0;
  if ( chk != 2'b00 )
  begin
    if ( memstat == 2'b00 )
      read_mem("",10'd0,32'b00000000000000000000000000000000);
    else if ( memstat == 2'b01 )
      read_mem(1,"","");
    else if ( memstat == 2'b10 )
    begin
      if ( chk == 2'b11 )
      begin
        read_mem("",10'd1023,32'bx);
        write_mem("",10'd1023,32'b0);
      end
      else
      begin
        read_mem("",10'd0,32'bx);
        write_mem("",10'd0,32'b0);
      end
    end  
    else if ( memstat == 2'b11 )
    begin
      read_mem(1,"",32'bx);
      write_mem(1,"","");
    end
  end  
end
endtask
task create_pattern;
input integer pat;
input [8*20:1] viol; // Tch,Tcl,Tccn,Tccp
begin
  @(negedge CLK);
  no_clk = 1;
  if (pat === 1)
  begin
    $display (" %t Pattern %d ME = 1 CLK 0->1->0->1->0 checking for %s", $time, pat, viol);
    ME = 1'b1;
    #7790.0;
    CLK = 1'b1;
    #7790.0; 
    CLK = 1'b0;
    if (viol == "Tch")
    begin
      #7790.0; 
      CLK = 1'b1;
      #0.06999999999999999; //tch-tpr
      CLK = ~CLK;
    end
    if (viol == "Tcx")
    begin
      #7790.0; 
      CLK = 1'bX;
      #7790.0; 
      CLK = 1'b0;
    end
    if (viol == "Tcl")
    begin
      #0.142; //tcl-tpr
      CLK = ~CLK;
    end
    if (viol == "Tccn_rmezo" || viol == "Tccn_rm0" || viol == "Tccn_rm1" || viol == "Tccn_rm2" || viol == "Tccn_rm3" || viol == "Tccn_rm4" || viol == "Tccn_rm5")
    begin
      #0.143; //tcl
      CLK = ~CLK;
      #(param_val_tcc - 0.143 - 0.001);
      CLK = ~CLK;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #7790.0; 
      CLK = 1'b1;
      #0.071; //tch
      CLK = ~CLK;
      #(param_val_tcc - 0.071 - 0.001);
      CLK = ~CLK;
    end
  end
  if (pat === 2)
  begin
    $display (" %t Pattern %d ME = 1 CLK 0->1 ME = 0 CLK->0->1->0 checking for %s", $time, pat, viol);
    ME = 1'b1;
    #7790.0; 
    CLK = 1'b1;
    #0.05;
    ME = 1'b0;
    #7790.0; 
    CLK = 1'b0;
    if (viol == "Tch")
    begin
      #7790.0; 
      CLK = 1'b1;
      #0.06999999999999999; //tch-tpr
      CLK = ~CLK;
    end
    if (viol == "Tcx")
    begin
      #7790.0; 
      CLK = 1'bX;
      #7790.0; 
      CLK = 1'b0;
    end
    if (viol == "Tcl")
    begin
      #0.142; //tcl-tpr
      CLK = ~CLK;
    end
    if (viol == "Tccn_rmezo" || viol == "Tccn_rm0" || viol == "Tccn_rm1" || viol == "Tccn_rm2" || viol == "Tccn_rm3" || viol == "Tccn_rm4" || viol == "Tccn_rm5")
    begin
      #0.143; //tcl
      CLK = ~CLK;
      #(param_val_tcc - 0.143 - 0.001);
      CLK = ~CLK;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #7790.0; 
      CLK = 1'b1;
      #0.071; //tch
      CLK = ~CLK;
      #(param_val_tcc - 0.071 - 0.001);
      CLK = ~CLK;
    end
  end
  if (pat === 3)
  begin
    $display (" %t Pattern %d ME = 0 CLK 0->1->0 ME = 1 CLK=0->1->0 checking for %s", $time, pat, viol);
    ME = 1'b0;
    #7790.0; 
    CLK = 1'b1;
    #7790.0; 
    CLK = 1'b0;
    #0.001;
    ME = 1'b1;
    if (viol == "Tch")
    begin
      #7790.0; 
      CLK = 1'b1;
      #0.06999999999999999; //tch-tpr
      CLK = ~CLK;
    end
    if (viol == "Tcx")
    begin
      #7790.0; 
      CLK = 1'bX;
      #7790.0; 
      CLK = 1'b0;
    end
    if (viol == "Tcl")
    begin
      #0.141; //tch-tpr
      CLK = ~CLK;
    end
    if (viol == "Tccn_rmezo" || viol == "Tccn_rm0" || viol == "Tccn_rm1" || viol == "Tccn_rm2" || viol == "Tccn_rm3" || viol == "Tccn_rm4" || viol == "Tccn_rm5")
    begin
      #0.142; //tcl-tpr
      CLK = ~CLK;
      #(param_val_tcc - 0.143 - 0.001);
      CLK = ~CLK;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #7790.0; 
      CLK = 1'b1;
      #0.071; //tch
      CLK = ~CLK;
      #(param_val_tcc - 0.071 - 0.001);
      CLK = ~CLK;
    end
    #7790.0;
    ME = 1'b0;
  end
  if (pat === 4)
  begin
    $display (" %t Pattern %d ME = 0 CLK 0->1 ME = 0->1->0 CLK=1->0->1->0 checking for %s", $time, pat, viol);
    ME = 1'b0;
    #7790.0; 
    CLK = 1'b1;
    #0.05;
    ME = 1'b1;
    #7790.0; 
    ME = 1'b0;
    #10; 
    CLK = 1'b0;
    if (viol == "Tch")
    begin
      #7790.0; 
      CLK = 1'b1;
      #0.06999999999999999; //tch-tpr
      CLK = ~CLK;
    end
    if (viol == "Tcx")
    begin
      #7790.0; 
      CLK = 1'bX;
      #7790.0; 
      CLK = 1'b0;
    end
    if (viol == "Tcl")
    begin
      #0.142; //tcl-tpr
      CLK = ~CLK;
    end
    if (viol == "Tccn_rmezo" || viol == "Tccn_rm0" || viol == "Tccn_rm1" || viol == "Tccn_rm2" || viol == "Tccn_rm3" || viol == "Tccn_rm4" || viol == "Tccn_rm5")
    begin
      #0.143; //tcl
      CLK = ~CLK;
      #(param_val_tcc - 0.143 - 0.001);
      CLK = ~CLK;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #7790.0; 
      CLK = 1'b1;
      #0.071; //tch
      CLK = ~CLK;
      #(param_val_tcc - 0.071 - 0.001);
      CLK = ~CLK;
    end
  end
  if (pat === 5)
  begin
    $display (" %t Pattern %d ME = 0 CLK 0->1->0 ME = 0->1->0 CLK=0->1->0 checking for %s", $time, pat, viol);
    ME = 1'b0;
    #7790.0; 
    CLK = 1'b1;
    #7790.0; 
    CLK = 1'b0;   
    if (viol == "Tcl")
    begin
      #0.142; //tcl-tpr
      CLK = ~CLK;
    end
    #7790.0; 
    ME = 1'b1;
    #7790.0; 
    ME = 1'b0;
    if (viol == "Tch")
    begin
      #7790.0; 
      CLK = 1'b1;
      #0.06999999999999999; //tch-tpr
      CLK = ~CLK;
    end
    if (viol == "Tcx")
    begin
      #7790.0; 
      CLK = 1'bX;
      #7790.0; 
      CLK = 1'b0;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #7790.0; 
      CLK = 1'b1;
      #0.071; //tch
      CLK = ~CLK;
      #(param_val_tcc - 0.071 - 0.001);
      CLK = ~CLK;
    end
  end
  if (pat === 6)
  begin
    $display (" %t Pattern %d ME = 0 CLK 0->1->0 CLK=0->1 ME = 0->1->0 CLK=1->0 checking for %s", $time, pat, viol);
    ME = 1'b0;
    #7790.0; 
    CLK = 1'b1;
    #7790.0; 
    CLK = 1'b0;
    if (viol == "Tch")
    begin
      #7790.0;
      CLK = 1'b1;
      #0.05;
      ME = 1'b1;
      #0.001;
      ME = 1'b0;
      #(0.071 - 0.052000000000000005);
      CLK = ~CLK;
    end
  end
  if (pat === 7)
  begin
    $display (" %t Pattern %d ME = 0 CLK 0->1->0->1->0 checking for %s", $time, pat, viol);
    ME = 1'b0;
    #7790.0; 
    CLK = 1'b1;
    #7790.0; 
    CLK = 1'b0;
    if (viol == "Tch")
    begin
      #7790.0;
      CLK = 1'b1;
      #0.06999999999999999; //tch-tpr
      CLK = ~CLK;
    end
    if (viol == "Tcx")
    begin
      #7790.0; 
      CLK = 1'bX;
      #7790.0; 
      CLK = 1'b0;
    end
    if (viol == "Tcl")
    begin
      ME = 1'b1;
      #7790.0; 
      CLK = 1'b1;
      #7790.0; 
      CLK = 1'b0;
      #7790.0; 
      ME = 1'b0;
      #7790.0; 
      CLK = 1'b1;
      #7790.0; 
      CLK = 1'b0;
      #0.142; //tcl-tpr
      CLK = ~CLK;
    end
    if (viol == "Tccn_rmezo" || viol == "Tccn_rm0" || viol == "Tccn_rm1" || viol == "Tccn_rm2" || viol == "Tccn_rm3" || viol == "Tccn_rm4" || viol == "Tccn_rm5")
    begin
      #0.143; //tcl
      CLK = ~CLK;
      #(param_val_tcc - 0.143 - 0.001);
      CLK = ~CLK;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #7790.0; 
      CLK = 1'b1;
      #0.071; //tch
      CLK = ~CLK;
      #(param_val_tcc - 0.071 - 0.001);
      CLK = ~CLK;
    end
    #7790.0;
    ME = 1'b1;
  end
  if (pat === 8)
  begin
    $display (" %t Pattern %d ME = 0 CLK 0->1->0 CLK=0->1 ME = 0->1 CLK=1->0->1 checking for %s", $time, pat, viol);
    ME = 1'b0;
    #7790.0; 
    CLK = 1'b1;
    #7790.0; 
    CLK = 1'b0;
    if (viol == "Tccn_rmezo" || viol == "Tccn_rm0" || viol == "Tccn_rm1" || viol == "Tccn_rm2" || viol == "Tccn_rm3" || viol == "Tccn_rm4" || viol == "Tccn_rm5")
    begin
      #0.143; //tcl
      CLK = ~CLK;
      #0.05
      ME = 1'b1;
      #(0.071 - 0.049);
      CLK = ~CLK;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #7790.0; 
      CLK = 1'b1;
      #0.05
      ME = 1'b1;
      #(0.071 - 0.049);
      CLK = ~CLK;
      #0.143; //tcl
      CLK = ~CLK;
    end
  end
end
endtask
task check_output;
input integer q_stat; // 0->Output is X, 1-> Output is not X
input integer mem_stat; // 0->Memory is X, 1->Memory is not X
input [8*15:1] viol; // Tch,Tcl,Tccn,Tccp
begin
  fork
    begin
    rmdel_tcq;
      if (q_stat == 0)
      begin
        if (Q_BEHAV !== 32'bx)
        begin
          $display( "%t Timing parameter(viol) is %s ", $time, viol);
          test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
        end   
        else
        begin
          $display( "%t Timing parameter(viol) is %s ", $time, viol);
          $display("\n\n@%t           Clock  is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
        end 
      end 
      else
      begin
        if (Q_BEHAV === 32'bx)
        begin
          $display( "%t Timing parameter(viol) is %s ", $time, viol);
          test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
        end   
        else
        begin
          $display( "%t Timing parameter(viol) is %s ", $time, viol);
          $display("\n\n@%t           Clock  is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
        end 
      end
    end
  join
  restart_clk = 1'b1;
  @(negedge CLK)
    ME = 1'b0;
  if (mem_stat == 0)
  begin
    read_mem(1,"",32'bx);
    if ( err_cnt == 0 )
    begin
      $display( "%t Timing parameter(viol) is %s ", $time, viol);
      $display("\n\n@%t           Clock violation corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      $display( "%t Timing parameter(viol) is %s ", $time, viol);
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock violation does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
    @(negedge CLK)
    write_mem(1,"","");
    read_mem("",10'd0,32'b0);
  end
  else
  begin
    read_mem(1,"","");
    if ( err_cnt == 0 )
    begin
      $display( "%t Timing parameter(viol) is %s ", $time, viol);
      $display("\n\n@%t           Clock violation does not corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      $display( "%t Timing parameter(viol) is %s ", $time, viol);
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock violation corrupts entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
    @(negedge CLK)
    read_mem("",10'd0,32'b0);
  end
end
endtask



initial
begin
  no_clk = 0;
  no_tclk = 0;
  `ifdef VIRAGE_FAST_VERILOG
    flagrtl = 1;
  `else
    `ifdef rtlmodel
      flagrtl = 1;
    `else
      flagrtl = 0;
    `endif
  `endif
  test_num = 0;
  test_status = 0;
  OP_Q = 0;
  ADR = {10{1'b0}};
  D = {32{1'b0}};
  WE = 1'b0;
  ME = 1'b0;
  TEST1 = 1'b0;
  TEST_RNM = 1'b0;
  RME = 1'b0;
  RM = {4{1'b0}};
         assist_initial("WA");
         assist_initial("WPULSE");
  LS = 1'b0;
  BC0 = 1'b0;
  BC1 = 1'b0;
  BC2 = 1'b0;
  #0;
  CLK = 1'b0;
end
reg [ 31:0] mem_prev;

task coverage_1;
  integer i, j, m, n, file1, cnt, count;
  reg [17 :0] control_sig;
  reg [35 :0] pattern_sel;
  reg [59 :0] pattern_reg;
  begin

 // CLK = x test
      @(negedge CLK);
      CLK = 1'bx;
      #100;      
      CLK = 1'b1;
      #0;
      CLK = 1'bx;
      #100;      
      CLK = 1'b1;
    // end clk = x test 

  file1 = $fopen("coverage_1_mismatch.log");
  for (cnt = 100; cnt > 0; cnt = cnt -1) begin
  for(j = 0; j <= 17; j = j + 1) begin
    @(posedge CLK) begin
      if (pattern_sel[j*2] == 0 && pattern_sel[j*2 + 1] == 0) 
      control_sig[j] = 1'b0;
      else if (pattern_sel[j*2] == 0 && pattern_sel[j*2 + 1] == 1) 
      control_sig[j] = 1'b1;
      else if (pattern_sel[j*2] == 1 && pattern_sel[j*2 + 1] == 0) 
      control_sig[j] = 1'bx;
      else 
      control_sig[j] = 1'b0;
    end
  end

  @(posedge CLK) begin
    for(m = 0; m <= 35; m = m + 1) begin
      pattern_sel[m] = $random; 
    end
  end

  @(posedge CLK) begin
    for(n = 0; n<= 59 ; n = n + 1) begin
      if ( n<= 0)
         count = 0;
      pattern_reg[n] = control_sig[count];
      if (count >= 17 ) begin 
        count = 0;
      end else begin
        count=count+1;
      end
    end
  end
 @(posedge CLK) begin
     ADR[9:0] = pattern_reg[9:0];
     D[31:0] = pattern_reg[41:10];
     WE = pattern_reg[42];
     ME = pattern_reg[43];
     TEST1 = pattern_reg[44];
     TEST_RNM = pattern_reg[45];
     RME = pattern_reg[46];
     RM[3:0] = pattern_reg[50:47];
     WA[1:0] = pattern_reg[52:51];
     WPULSE[2:0] = pattern_reg[55:53];
     LS = pattern_reg[56];
     BC0 = pattern_reg[57];
     BC1 = pattern_reg[58];
     BC2 = pattern_reg[59];

      if( Q !== Q_BEHAV ) begin
          test_status = test_status + 1;
          $fwrite (file1, "\n ERROR : Mismatch observed at pattern \n");
          $fwrite (file1, "\n ADR = %x ",ADR );
          $fwrite (file1, "\n D = %x ",D );
          $fwrite (file1, "\n WE = %x ",WE );
          $fwrite (file1, "\n ME = %x ",ME );
          $fwrite (file1, "\n TEST1 = %x ",TEST1 );
          $fwrite (file1, "\n TEST_RNM = %x ",TEST_RNM );
          $fwrite (file1, "\n RME = %x ",RME );
          $fwrite (file1, "\n RM = %x ",RM );
          $fwrite (file1, "\n WA = %x ",WA );
          $fwrite (file1, "\n WPULSE = %x ",WPULSE );
          $fwrite (file1, "\n LS = %x ",LS );
          $fwrite (file1, "\n BC0 = %x ",BC0 );
          $fwrite (file1, "\n BC1 = %x ",BC1 );
          $fwrite (file1, "\n BC2 = %x ",BC2 );
          $fwrite (file1, "\n Q value = %h \n Q_BEHAV value = %h at time %t ",  Q, Q_BEHAV, $time );
          $fwrite (file1, "\n ***************************************************************************************");
           $display ("\n ERROR_MODEL: Mismatch observed Q  value = %h, Q_BEHAV value = %h at time %t  ", Q , Q_BEHAV, $time);
      end 
end 
end 

  for (cnt = 100; cnt > 0; cnt = cnt -1) begin
  for(j = 0; j <= 17; j = j + 1) begin
    @(posedge CLK) begin
      if (pattern_sel[j*2] == 0 && pattern_sel[j*2 + 1] == 0) 
      control_sig[j] = 1'b0;
      else if (pattern_sel[j*2] == 0 && pattern_sel[j*2 + 1] == 1) 
      control_sig[j] = 1'b1;
      else if (pattern_sel[j*2] == 1 && pattern_sel[j*2 + 1] == 0) 
      control_sig[j] = 1'bx;
      else 
      control_sig[j] = 1'b0;
    end
  end

  @(posedge CLK) begin
    for(m = 0; m <= 35; m = m + 1) begin
      pattern_sel[m] = $random; 
    end
  end

  @(posedge CLK) begin
    for(n = 0; n<= 59 ; n = n + 1) begin
      pattern_reg[n] = $random;
    end
  end
 @(posedge CLK) begin
     ADR[9:0] = pattern_reg[9:0];
     D[31:0] = pattern_reg[41:10];
     WE = control_sig[0];
     ME = control_sig[1];
     TEST1 = control_sig[2];
     TEST_RNM = control_sig[3];
     RME = control_sig[4];
     RM[3:0] = control_sig[ 8:5];
     WA[1:0] = control_sig[ 10:9];
     WPULSE[2:0] = control_sig[ 13:11];
     LS = control_sig[14];
     BC0 = control_sig[15];
     BC1 = control_sig[16];
     BC2 = control_sig[17];
      if( Q !== Q_BEHAV ) begin
          test_status = test_status + 1;
          $fwrite (file1, "\n ERROR : Mismatch observed at pattern \n");
          $fwrite (file1, "\n ADR = %x ", ADR );
          $fwrite (file1, "\n D = %x ", D );
          $fwrite (file1, "\n WE = %x ", WE );
          $fwrite (file1, "\n ME = %x ", ME );
          $fwrite (file1, "\n TEST1 = %x ", TEST1 );
          $fwrite (file1, "\n TEST_RNM = %x ", TEST_RNM );
          $fwrite (file1, "\n RME = %x ", RME );
          $fwrite (file1, "\n RM = %x ", RM );
          $fwrite (file1, "\n WA = %x ", WA );
          $fwrite (file1, "\n WPULSE = %x ", WPULSE );
          $fwrite (file1, "\n LS = %x ", LS );
          $fwrite (file1, "\n BC0 = %x ", BC0 );
          $fwrite (file1, "\n BC1 = %x ", BC1 );
          $fwrite (file1, "\n BC2 = %x ", BC2 );
          $fwrite (file1, "\n Q_BEHAV value = %h \n Q_BEHAV value = %h at time %t ",  Q, Q_BEHAV, $time );
          $fwrite (file1, "\n ***************************************************************************************");
           $display ("\n ERROR_MODEL: Mismatch observed Q simulated value = %h, Q_BEHAV value = %h at time %t  ", Q , Q_BEHAV, $time);
      end 
end 
end 
$fclose(file1);
end 
endtask

task coverage_2;
  integer i, j, m, q, n, count, cnt, loop_var, file1;
  reg [41 :0] add_data_pattern;
  reg [3 :0] control_sig;
  reg [3 :0] counter;
  reg [7 :0] pattern_sel;
  begin
  file1 = $fopen("coverage_2_mismatch.log");
  loop_var = 16;
  counter = 0;
  test_num = test_num + 1;
  ADR = 0;
  D = 0;
  WE = 0;
  ME = 0;
  TEST1 = 0;
  TEST_RNM = 0;
  RME = 0;
  RM = 0;
  WA = 0;
  WPULSE = 0;
  LS = 0;
  BC0 = 0;
  BC1 = 0;
  BC2 = 0;
   for (cnt = loop_var; cnt > 0; cnt = cnt -1) begin
   counter <= counter +1;
   control_sig = counter;
     for(n = 0; n<= 41 ; n = n + 1) begin
       add_data_pattern[n] = $random;
     end
  @(negedge CLK);
  @(negedge CLK) begin
     #5;
     ADR[9:0] = add_data_pattern[9:0];
     D[31:0] = add_data_pattern[41:10];
     WE = control_sig[0];
     ME = control_sig[1];
     TEST1 = control_sig[2];
     LS <= control_sig[3];
  end 
  @(posedge CLK);
     #2.001;
     if( Q !== Q_BEHAV ) begin
        test_status = test_status + 1;
          $fwrite (file1, "\n ERROR : Mismatch observed at pattern \n");
          $fwrite (file1, "\n ADR = %x ", ADR );
          $fwrite (file1, "\n D = %x ", D );
          $fwrite (file1, "\n WE = %x ", WE );
          $fwrite (file1, "\n ME = %x ", ME );
          $fwrite (file1, "\n TEST1 = %x ", TEST1 );
          $fwrite (file1, "\n TEST_RNM = %x ", TEST_RNM );
          $fwrite (file1, "\n RME = %x ", RME );
          $fwrite (file1, "\n RM = %x ", RM );
          $fwrite (file1, "\n WA = %x ", WA );
          $fwrite (file1, "\n WPULSE = %x ", WPULSE );
          $fwrite (file1, "\n LS = %x ", LS );
          $fwrite (file1, "\n BC0 = %x ", BC0 );
          $fwrite (file1, "\n BC1 = %x ", BC1 );
          $fwrite (file1, "\n BC2 = %x ", BC2 );
          $fwrite (file1, "\n Q value = %h \n Q_BEHAV value = %h at time %t ",  Q, Q_BEHAV, $time );
          $fwrite (file1, "\n ***************************************************************************************");
        $display ("\n ERROR_MODEL: Mismatch observed Q value = %h, Q_BEHAV value = %h at time %t  ", Q , Q_BEHAV, $time);
      end 
    end 
    $fclose(file1);
  @(negedge CLK);
  ADR = 10'b0;
  end 
endtask


always
begin
 if (restart_clk)
 begin
  #7790.0; 
  CLK = 1'b0;
  no_clk = 0;
  #7790.0; 
  restart_clk = 1'b0;
 end
 else
 begin
 if(simul_clk == 5 )
 begin
  #clk_period;
  if(!no_clk)
    CLK = ~CLK;
 end
 else
 begin
  #7790;
  if(!no_clk)
  CLK = ~CLK;
 end
 end
end

always @(negedge CLK)
begin
  if (ME_neg == 1'b1)
    ME = 1'b1;
end

always @(posedge CLK)
begin
  if (ME_pos == 1'b1)
      begin
        #0.049;
        ME = 1'b0;
      end
end


//flow
//initialize all variables to 0
//then call write and read task.

initial
begin
  restart_clk = 0;
  simul_clk = 0; 
  ME   = 1'b0;
  WE   = 1'b0;
  D   = 32'b11111111111111111111111111111111;
  TEST1   = 1'b0; 
     RM = 4'b0011;
  ADR = 1023;
  @(negedge CLK);
  WE   = 1'b1;
  @(negedge CLK);
  ME = 1'b1;
  @(negedge CLK);
  ME = 1'b0;
  #0.001;
  WE = 1'b0;
  @(negedge CLK);
  ME = 1'b1;
  WE = 1'b1;
  @(negedge CLK);
  ME = 1'b0;
  WE = 1'b0;
  ME = 1'b1;
  @(negedge CLK);
  ME = 1'b0;
  @(negedge CLK);
  ME = 1'b1;
  ME   = 1'b1;
  #10;
   // Asymetric data pattern
  $display ("\n#######################################################################");
  test_num = 1;
  $display( "\n\n@%t TEST: %d --- Memory write through port A  --- \n\n", $time, test_num);
  write_mem(1,"","");
  $display ("\n#######################################################################");
  test_num = 2;
  $display( "\n\n@%t TEST: %d --- Memory read through port A  --- \n\n", $time, test_num);
  read_mem(1,"","");
  if ( err_cnt != 0 )
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Memory read through port A  Unsuccessful\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Memory read through port A  Successful \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end

if (!flagrtl)
begin
  $display ("\n#######################################################################");
  test_num = 3;
  $display( "\n\n@%t TEST: %d --- Test to verify tcqx is modelled correctly  --- \n\n", $time, test_num);
  @(negedge CLK);
  write_mem("",10'd0,32'b1);
  @(negedge CLK);
   ADR = 10'b0;
   WE = 1'b0;
   ME = 1'b1;
  @(posedge CLK);
  begin
  fork
  begin
  #0.388;
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Tcqx modelling is done correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Tcqx modelling is not done correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  end
  begin
 #0.495;
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Tcqx modelling is done correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Tcqx modelling is not done correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  end
  begin
 #0.497;
    if (Q_BEHAV === 32'b1)
    begin
      $display("\n\n@%t           Tcqx modelling is done correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Tcqx modelling is not done correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  end
  join
  end
end
  $display ("\n#######################################################################");
  test_num = 4;
  $display( "\n\n@%t TEST: %d --- Memory write/read During Light Sleep Mode --- \n\n", $time, test_num);
  @(negedge CLK);
   LS = 1'b0;
  @(negedge CLK);
  $display("@%t    Writing in Memory data = Addr when LS = 1'b0", $time);
   write_mem(1,"","");
  @(negedge CLK);
   ADR = 10'd0;
  @(negedge CLK);
   LS = 1'b1;
  @(negedge CLK);
  @(negedge CLK);
   RM[3] = 1'b0;
  @(negedge CLK);
   RM[3] = 1'b1;
  @(negedge CLK);
   RM = 4'b0011;
  @(negedge CLK);
  $display("@%t    Writing in Memory data = 1 when LS = 1'b1", $time);
   write_mem(1,"",32'b1);
  @(negedge CLK);
    read_mem(1,10'dX,32'b0);
    if ( err_cnt != 0 )
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Output does not retain last state, Operation Unsuccessful Light Sleep Mode\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           Output retain last state, Operation Successful Light Sleep Mode \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
  @(negedge CLK);
  $display( "\n@%t --- Disable Light Sleep Mode Pin and read back the memory contents --- \n", $time);
  @(negedge CLK);
   ME = 1'b1;
   D = 32'd2;
   WE = 1'b1;
  @(negedge CLK);
  @(negedge CLK);
   LS = 1'b0;
   WE = 1'b0;
  repeat(10) @(negedge CLK);
  read_mem(1,"","");
  if ( err_cnt != 0 )
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Memory read through port A Unsuccessful after Light Sleep Mode disabled\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Memory read through port A Successful after Light Sleep Mode disabled \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 5;
  $display( "\n\n@%t TEST: %d --- Memory write/read when TEST_RNM is enable --- \n\n", $time, test_num);
  @(negedge CLK);
   TEST_RNM = 1'b0;
  @(negedge CLK);
  $display("@%t    Writing in Memory data = Addr when TEST_RNM = 1'b0", $time);
   write_mem(1,"","");
  @(negedge CLK);
   ADR = 10'd0;
  @(negedge CLK);
   TEST_RNM = 1'b1;
  @(negedge CLK);
  @(negedge CLK);
   RM[3] = 1'b0;
  @(negedge CLK);
   RM[3] = 1'b1;
  @(negedge CLK);
   RM = 4'b0011;
  @(negedge CLK);
  $display("@%t    Writing in Memory data = 1 when TEST_RNM = 1'b1", $time);
   write_mem(1,"",32'b1);
  @(negedge CLK);
    read_mem(1,10'dX,32'b0);
    if ( err_cnt != 0 )
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Output does not retain last state, Operation Unsuccessful when TEST_RNM was high\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           Output retain last state, Operation Successful when TEST_RNM was high \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
  @(negedge CLK);
  $display( "\n@%t --- Disable TEST_RNM Pin and read back the memory contents --- \n", $time);
  @(negedge CLK);
   ME = 1'b1;
   D = 32'd2;
   WE = 1'b1;
  @(negedge CLK);
  @(negedge CLK);
   TEST_RNM = 1'b0;
   WE = 1'b0;
  repeat(10) @(negedge CLK);
  read_mem(1,"","");
  if ( err_cnt != 0 )
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Memory read through port A Unsuccessful after TEST_RNM pin disabled\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Memory read through port A Successful after  TEST_RNM pin disabled \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  $display ("\n#######################################################################");
  test_num = 6;
  $display( "\n\n@%t TEST: %d --- Different values of BC1 and BC2 in Light Sleep modes --- \n\n", $time, test_num);
 for (bc0_i = 0; bc0_i < 2; bc0_i = bc0_i + 1 )
 begin
   BC0 = bc0_i;
 $display("@%t  ============= When BC0 = %d ================ ", $time, bc0_i);
  @(negedge CLK);
   BC1 = 1'b0;
   BC2 = 1'b0;
  @(negedge CLK);
   BC1 = 1'b0;
   BC2 = 1'b1;
  @(negedge CLK);
   BC1 = 1'b1;
   BC2 = 1'b0;
  @(negedge CLK);
   BC1 = 1'b1;
   BC2 = 1'b1;
  @(negedge CLK);
   BC1 = 1'b0;
   BC2 = 1'b0;

  @(negedge CLK);
   LS = 1'b0;
  @(negedge CLK);
   BC1 = 1'b0;
   BC2 = 1'b0;
  @(negedge CLK);
   LS = 1'b1;

  @(negedge CLK);
   LS = 1'b0;
  @(negedge CLK);
   BC1 = 1'b0;
   BC2 = 1'b1;
  @(negedge CLK);
   LS = 1'b1;

  @(negedge CLK);
   LS = 1'b0;
  @(negedge CLK);
   BC1 = 1'b1;
   BC2 = 1'b0;
  @(negedge CLK);
   LS = 1'b1;

  @(negedge CLK);
   LS = 1'b0;
  @(negedge CLK);
   BC1 = 1'b1;
   BC2 = 1'b1;
  @(negedge CLK);
   LS = 1'b1;

  @(negedge CLK);
   LS = 1'b0;
  @(negedge CLK);
   write_mem(1,"","");
  @(negedge CLK);
   read_mem("",10'd1,32'd1);
 end // for (bc0_i = 0

  @(negedge CLK);
   write_mem(1,"","");
  @(negedge CLK);
   read_mem("",10'd1,32'd1);

  @(negedge CLK);
   restart_clk = 1;
  @(negedge CLK);
  #10;
  #10;
  $display ("\n#######################################################################");
  test_num = 7;
  $display( "\n\n@%t TEST: %d --- BC0 Assertion during normal write Mode --- \n\n", $time, test_num);
  @(negedge CLK);
   BC0 = 1'b0;
   LS = 1'b0;
   WE = 1'b1;
   ME = 1'b1;
   D = 32'b0;
   ADR = 10'b0;
  @(negedge CLK);
   BC0 = 1'b1;
  @(negedge CLK);
   BC0 = 1'b0;
   WE = 1'b0;
  @(negedge CLK);
  @(negedge CLK);
  read_mem("",10'd0,32'b0);
  $display ("\n#######################################################################");
  test_num = 8;
  $display( "\n\n@%t TEST: %d --- BC0 Assertion during normal read Mode --- \n\n", $time, test_num);
  @(negedge CLK);
   ME = 1'b0;
  @(negedge CLK);
   BC0 = 1'b0;
   ME = 1'b1;
   ADR = 10'b0;
  @(negedge CLK);
   BC0 = 1'b1;
  @(negedge CLK);
   BC0 = 1'b0;
  @(negedge CLK);
  read_mem("",10'd0,32'b0);
  $display ("\n#######################################################################");
  test_num = 9;
  $display( "\n\n@%t TEST: %d ---  Test for all RM settings with RME = 1'b0 --- \n\n", $time, test_num);
  @(negedge CLK);
  RME = 1'b0;
  ADR = 0;
  $display("@%t    Writing 0 at %b", $time,ADR);
  write_mem("",10'b0,32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Writing 32'b11111111111111111111111111111111 at %b", $time,ADR);
  write_mem("",10'b1,32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd0 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
    WA = 2'b11;
WPULSE = 3'b000;

   RM = 4'd0;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
  read_mem("",10'b0, 32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
  read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd1 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
    WA = 2'b11;
WPULSE = 3'b000;

   RM = 4'd1;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
  read_mem("",10'b0, 32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
  read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd2 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
    WA = 2'b10;
WPULSE = 3'b000;

   RM = 4'd2;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
  read_mem("",10'b0, 32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
  read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd3 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
    WA = 2'b10;
WPULSE = 3'b000;

   RM = 4'd3;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
  read_mem("",10'b0, 32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
  read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd4 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
    WA = 2'b01;
WPULSE = 3'b000;

   RM = 4'd4;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
  read_mem("",10'b0, 32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
  read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd5 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
    WA = 2'b01;
WPULSE = 3'b000;

   RM = 4'd5;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
  read_mem("",10'b0, 32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
  read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd6 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
    WA = 2'b01;
WPULSE = 3'b000;

   RM = 4'd6;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
  read_mem("",10'b0, 32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
  read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd7 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
    WA = 2'b01;
WPULSE = 3'b000;

   RM = 4'd7;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
  read_mem("",10'b0, 32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
  read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd8 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
    WA = 2'b11;
WPULSE = 3'b000;

   RM = 4'd8;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
  read_mem("",10'b0, 32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
  read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd9 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
    WA = 2'b11;
WPULSE = 3'b000;

   RM = 4'd9;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
  read_mem("",10'b0, 32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
  read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd10 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
    WA = 2'b10;
WPULSE = 3'b000;

   RM = 4'd10;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
  read_mem("",10'b0, 32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
  read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd11 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
    WA = 2'b10;
WPULSE = 3'b000;

   RM = 4'd11;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
  read_mem("",10'b0, 32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
  read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd12 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
    WA = 2'b01;
WPULSE = 3'b000;

   RM = 4'd12;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
  read_mem("",10'b0, 32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
  read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd13 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
    WA = 2'b01;
WPULSE = 3'b000;

   RM = 4'd13;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
  read_mem("",10'b0, 32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
  read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd14 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
    WA = 2'b01;
WPULSE = 3'b000;

   RM = 4'd14;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
  read_mem("",10'b0, 32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
  read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd15 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
    WA = 2'b01;
WPULSE = 3'b000;

   RM = 4'd15;
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
  read_mem("",10'b0, 32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
  read_mem("",10'b1, 32'b11111111111111111111111111111111);
  @(negedge CLK);
  RM = 4'b0011;
  #150;

  $display ("\n#######################################################################");
  test_num = 10;
  $display( "\n\n@%t TEST: %d ---  Test for all RM settings with RME = 1'b1 --- \n\n", $time, test_num);
  @(negedge CLK);
  RME = 1'b1;
  ADR = 0;
  $display("@%t    Writing 0 at %b", $time,ADR);
  write_mem("",10'b0,32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Writing 32'b11111111111111111111111111111111 at %b", $time,ADR);
  write_mem("",10'b1,32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd0 external setting with RME = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLK);
   RM = 4'd0;
   ADR = 0;
   $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",10'b0, 32'd0);
   @(negedge CLK);
   ADR = 1;
   $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd1 external setting with RME = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLK);
   RM = 4'd1;
   ADR = 0;
   $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",10'b0, 32'd0);
   @(negedge CLK);
   ADR = 1;
   $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd2 external setting with RME = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLK);
   RM = 4'd2;
   ADR = 0;
   $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",10'b0, 32'd0);
   @(negedge CLK);
   ADR = 1;
   $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd3 external setting with RME = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLK);
   RM = 4'd3;
   ADR = 0;
   $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",10'b0, 32'd0);
   @(negedge CLK);
   ADR = 1;
   $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd4 external setting with RME = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLK);
   RM = 4'd4;
   ADR = 0;
   $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",10'b0, 32'd0);
   @(negedge CLK);
   ADR = 1;
   $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd5 external setting with RME = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLK);
   RM = 4'd5;
   ADR = 0;
   $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",10'b0, 32'd0);
   @(negedge CLK);
   ADR = 1;
   $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd6 external setting with RME = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLK);
   RM = 4'd6;
   ADR = 0;
   $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",10'b0, 32'd0);
   @(negedge CLK);
   ADR = 1;
   $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd7 external setting with RME = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLK);
   RM = 4'd7;
   ADR = 0;
   $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",10'b0, 32'd0);
   @(negedge CLK);
   ADR = 1;
   $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd8 external setting with RME = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLK);
   RM = 4'd8;
   ADR = 0;
   $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",10'b0, 32'd0);
   @(negedge CLK);
   ADR = 1;
   $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd9 external setting with RME = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLK);
   RM = 4'd9;
   ADR = 0;
   $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",10'b0, 32'd0);
   @(negedge CLK);
   ADR = 1;
   $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd10 external setting with RME = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLK);
   RM = 4'd10;
   ADR = 0;
   $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",10'b0, 32'd0);
   @(negedge CLK);
   ADR = 1;
   $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd11 external setting with RME = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLK);
   RM = 4'd11;
   ADR = 0;
   $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",10'b0, 32'd0);
   @(negedge CLK);
   ADR = 1;
   $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd12 external setting with RME = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLK);
   RM = 4'd12;
   ADR = 0;
   $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",10'b0, 32'd0);
   @(negedge CLK);
   ADR = 1;
   $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd13 external setting with RME = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLK);
   RM = 4'd13;
   ADR = 0;
   $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",10'b0, 32'd0);
   @(negedge CLK);
   ADR = 1;
   $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd14 external setting with RME = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLK);
   RM = 4'd14;
   ADR = 0;
   $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",10'b0, 32'd0);
   @(negedge CLK);
   ADR = 1;
   $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",10'b1, 32'b11111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd15 external setting with RME = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLK);
   RM = 4'd15;
   ADR = 0;
   $display("@%t    Reading 0 at %b", $time,ADR);
   read_mem("",10'b0, 32'd0);
   @(negedge CLK);
   ADR = 1;
   $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
   read_mem("",10'b1, 32'b11111111111111111111111111111111);
  @(negedge CLK);
  RM = 4'b0011;
    assist_initial("");
  @(negedge CLK);
  RME = 1'b0;
  #150;

  @(negedge CLK);
  WA = 0;
  $display ("\n#######################################################################");
  test_num = 11;
  $display( "\n\n@%t TEST: %d ---  Test for all WA settings --- \n\n", $time, test_num);
 $display("Non recommended warning messages may come in simulation log file.");
  $display( "\n\n@%t TEST: %d -----Going to test Model for WA = 2'd0 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
  @(negedge CLK);
  WPULSE = 3'd0;
  WA = 2'd0;
  @(negedge CLK);
  ADR = 0;
  $display("@%t    Writing 0 at %b", $time,ADR);
  write_mem("",10'b0,32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Writing 32'b11111111111111111111111111111111 at %b", $time,ADR);
  write_mem("",10'b1,32'b11111111111111111111111111111111);
  @(negedge CLK);
  ADR = 2;
  $display("@%t    Writing 32'b10101010101010101010101010101010 at %b", $time,ADR);
  write_mem("",2,32'b10101010101010101010101010101010);
  @(negedge CLK);
  ADR = 3;
  $display("@%t    Writing 32'b01010101010101010101010101010101 at %b", $time,ADR);
  write_mem("",3,32'b01010101010101010101010101010101);
  @(negedge CLK);
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
  read_mem("",10'b0, 32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
  read_mem("",10'b1, 32'b11111111111111111111111111111111);
  @(negedge CLK);
  ADR = 2;
  $display("@%t    Reading 32'b10101010101010101010101010101010 at %b", $time,ADR);
  read_mem("",2,32'b10101010101010101010101010101010);
  @(negedge CLK);
  ADR = 3;
  $display("@%t    Reading 32'b01010101010101010101010101010101 at %b", $time,ADR);
  read_mem("",3,32'b01010101010101010101010101010101);
  $display( "\n\n@%t TEST: %d -----Going to test Model for WA = 2'd1 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
  @(negedge CLK);
  WPULSE = 3'd1;
  WA = 2'd1;
  @(negedge CLK);
  ADR = 0;
  $display("@%t    Writing 0 at %b", $time,ADR);
  write_mem("",10'b0,32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Writing 32'b11111111111111111111111111111111 at %b", $time,ADR);
  write_mem("",10'b1,32'b11111111111111111111111111111111);
  @(negedge CLK);
  ADR = 2;
  $display("@%t    Writing 32'b10101010101010101010101010101010 at %b", $time,ADR);
  write_mem("",2,32'b10101010101010101010101010101010);
  @(negedge CLK);
  ADR = 3;
  $display("@%t    Writing 32'b01010101010101010101010101010101 at %b", $time,ADR);
  write_mem("",3,32'b01010101010101010101010101010101);
  @(negedge CLK);
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
  read_mem("",10'b0, 32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
  read_mem("",10'b1, 32'b11111111111111111111111111111111);
  @(negedge CLK);
  ADR = 2;
  $display("@%t    Reading 32'b10101010101010101010101010101010 at %b", $time,ADR);
  read_mem("",2,32'b10101010101010101010101010101010);
  @(negedge CLK);
  ADR = 3;
  $display("@%t    Reading 32'b01010101010101010101010101010101 at %b", $time,ADR);
  read_mem("",3,32'b01010101010101010101010101010101);
  $display( "\n\n@%t TEST: %d -----Going to test Model for WA = 2'd2 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
  @(negedge CLK);
  WPULSE = 3'd2;
  WA = 2'd2;
  @(negedge CLK);
  ADR = 0;
  $display("@%t    Writing 0 at %b", $time,ADR);
  write_mem("",10'b0,32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Writing 32'b11111111111111111111111111111111 at %b", $time,ADR);
  write_mem("",10'b1,32'b11111111111111111111111111111111);
  @(negedge CLK);
  ADR = 2;
  $display("@%t    Writing 32'b10101010101010101010101010101010 at %b", $time,ADR);
  write_mem("",2,32'b10101010101010101010101010101010);
  @(negedge CLK);
  ADR = 3;
  $display("@%t    Writing 32'b01010101010101010101010101010101 at %b", $time,ADR);
  write_mem("",3,32'b01010101010101010101010101010101);
  @(negedge CLK);
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
  read_mem("",10'b0, 32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
  read_mem("",10'b1, 32'b11111111111111111111111111111111);
  @(negedge CLK);
  ADR = 2;
  $display("@%t    Reading 32'b10101010101010101010101010101010 at %b", $time,ADR);
  read_mem("",2,32'b10101010101010101010101010101010);
  @(negedge CLK);
  ADR = 3;
  $display("@%t    Reading 32'b01010101010101010101010101010101 at %b", $time,ADR);
  read_mem("",3,32'b01010101010101010101010101010101);
  $display( "\n\n@%t TEST: %d -----Going to test Model for WA = 2'd3 setting   ---- \n\n", $time, test_num);
  @(negedge CLK);
  @(negedge CLK);
  WPULSE = 3'd3;
  WA = 2'd3;
  @(negedge CLK);
  ADR = 0;
  $display("@%t    Writing 0 at %b", $time,ADR);
  write_mem("",10'b0,32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Writing 32'b11111111111111111111111111111111 at %b", $time,ADR);
  write_mem("",10'b1,32'b11111111111111111111111111111111);
  @(negedge CLK);
  ADR = 2;
  $display("@%t    Writing 32'b10101010101010101010101010101010 at %b", $time,ADR);
  write_mem("",2,32'b10101010101010101010101010101010);
  @(negedge CLK);
  ADR = 3;
  $display("@%t    Writing 32'b01010101010101010101010101010101 at %b", $time,ADR);
  write_mem("",3,32'b01010101010101010101010101010101);
  @(negedge CLK);
  ADR = 0;
  $display("@%t    Reading 0 at %b", $time,ADR);
  read_mem("",10'b0, 32'd0);
  @(negedge CLK);
  ADR = 1;
  $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
  read_mem("",10'b1, 32'b11111111111111111111111111111111);
  @(negedge CLK);
  ADR = 2;
  $display("@%t    Reading 32'b10101010101010101010101010101010 at %b", $time,ADR);
  read_mem("",2,32'b10101010101010101010101010101010);
  @(negedge CLK);
  ADR = 3;
  $display("@%t    Reading 32'b01010101010101010101010101010101 at %b", $time,ADR);
  read_mem("",3,32'b01010101010101010101010101010101);
  @(negedge CLK);
  WA = 0;
  WPULSE = 0;
  @(negedge CLK);
  assist_initial("");
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 12;
  $display( "\n\n@%t TEST: %d ---  TEST1 Test  --- \n\n", $time, test_num);
  $display ("\n#######################################################################");
  test_num = 13;
  $display( "\n\n@%t TEST: %d ---  TEST1 Test in Read mode With LS --- \n\n", $time, test_num);
  write_mem(1,"","");
  @(negedge CLK);
  ADR = 1;
  #2.0949999999999998;
  TEST1 = 1'b1;
  #10;
  ME = 1'b1;
  @(posedge CLK) 
  begin
    #0.101;
    $display("@%t    LS = 1'b1 at Posedge of CLK When TEST1 high", $time);
    LS = 1'b1;
  end
  @(negedge CLK)
  begin
    ADR = 2;
    #0.497;
    Q_prev = Q_BEHAV;
  end
  @(negedge CLK);
  @(negedge CLK);
   RM[3] = 1'b0;
  @(negedge CLK);
   RM[3] = 1'b1;
  @(negedge CLK);
   RM = 4'b0011;
  @(negedge CLK);
  @(negedge CLK);
  LS = 1'b0;
  #0.497;
  if (Q_prev === Q_BEHAV)
  begin
    $display("\n\n@%t           When TEST1 is active, LS is high at posedge of CLK and data observed at previous negedge of CLK Operation successful \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: When TEST1 is active, LS is high at posedge of CLK or data not observed at previous negedge of CLK Operation unsuccessful\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLK);
   ADR = 1;
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 14;
  $display( "\n\n@%t TEST: %d ---  TEST1 Test in Read mode  --- \n\n", $time, test_num);
  write_mem(1,"","");
  @(negedge CLK);
  @(negedge CLK);
  ME = 1'b0;
  WE = 1'b0;
  @(negedge CLK);
  @(negedge CLK);
  ADR = 0;
  #2.0949999999999998;
  TEST1 = 1'b1;
  #10;
  ME = 1'b1;
  @(negedge CLK);
  ME = 1'b1;
  read_mem_test1(1,"","");
  if (err_cnt == 0)
  begin
    $display("\n\n@%t           When TEST1 is active,X observed at posedge of CLK and data observed at negedge of CLK Operation successful \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: When TEST1 is active,either X not observed at posedge of CLK or data not observed at negedge of CLK Operation unsuccessful\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 15;
  $display( "\n\n@%t TEST: %d ---  TEST1 Test in Write mode  --- \n\n", $time, test_num);
  @(negedge CLK);
  @(negedge CLK);
  ME = 1'b1;
  WE = 1'b1;
  @(negedge CLK);
  $display("@%t    Writing in Memory data = 32'b10101010101010101010101010101010 during TEST1 active", $time);
   write_mem(1,10'bx,32'b10101010101010101010101010101010); 
  @(negedge CLK);
  @(negedge CLK);
   read_mem_test1(1,10'bx,32'b10101010101010101010101010101010); 
  if (err_cnt == 0)
  begin
    $display("\n\n@%t           No memory corrupt when TEST1 is active in write mode  Operation successful \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Memory corrupt when TEST1 is active in write mode  Operation unsuccessful\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLK);
  @(negedge CLK);
  ME = 1'b1;
  WE = 1'b1;
  @(negedge CLK);
  $display("@%t    Writing in Memory data = address during TEST1 active", $time);
   write_mem(1,"","");
  @(negedge CLK);
  ME = 1'b0;
  WE = 1'b0;
  @(negedge CLK);
  @(negedge CLK);
  #2.0949999999999998;
  TEST1 = 1'b0;
  @(negedge CLK);
   read_mem(1,"","");
  if (err_cnt == 0)
  begin
    $display("\n\n@%t           No memory corrupt when TEST1 is active in write mode  Operation successful \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Memory corrupt when TEST1 is active in write mode  Operation unsuccessful\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 16;
  $display( "\n\n@%t TEST: %d ---  Toggling of TEST_RNM When TEST1 is high during high phase of CLK in Read Mode --- \n\n", $time, test_num);
  write_mem(1,"","");
  @(negedge CLK);
  TEST_RNM = 1'b0;
  #2.0949999999999998;
  TEST1 = 1'b1;
  ME = 1'b1 ;
  ADR = 0;
  WE = 1'b0;
  @(posedge CLK);
  #2.0949999999999998;
  TEST_RNM = 1'b1;
  @(negedge CLK);
  #0.234;
  if ( Q_BEHAV !== 32'bx)
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Toggling of TEST_RNM when TEST1 pin is high and high phase of CLK, does not corrupt ouput Q\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Toggling of TEST_RNM when TEST1 pin is high and high phase of CLK,corrupts ouput Q \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLK);
  #2.0949999999999998;
  TEST1 = 1'b0;
  @(negedge CLK);
  TEST_RNM = 1'b0;
  @(negedge CLK);
  read_mem(1,"","");
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Toggling of TEST_RNM in Read mode when TEST1 pin is high and high phase of CLK, does not corrupt entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Toggling of TEST_RNM in Read mode when TEST1 pin is high and high phase of CLK,corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end

  $display ("\n#######################################################################");
  test_num = 17;
  $display( "\n\n@%t TEST: %d ---  Toggling of TEST_RNM When TEST1 is high during high phase of CLK in Write Mode --- \n\n", $time, test_num);
  write_mem(1,"","");
  @(negedge CLK);
  TEST_RNM = 1'b0;
  #2.0949999999999998;
  TEST1 = 1'b1;
  ME = 1'b1 ;
  ADR = 0;
  WE = 1'b1;
  @(posedge CLK);
  #2.0949999999999998;
  TEST_RNM = 1'b1;
  @(negedge CLK);
  #0.234;
  if ( Q_BEHAV === 32'bx)
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Toggling of TEST_RNM in write mode when TEST1 pin is high and high phase of CLK,corrupt ouput Q\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Toggling of TEST_RNM in write mode when TEST1 pin is high and high phase of CLK, does not corrupt ouput Q \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLK);
  #2.0949999999999998;
  TEST1 = 1'b0;
  @(negedge CLK);
  TEST_RNM = 1'b0;
  WE = 1'b0;
  @(negedge CLK);
  read_mem("",10'd0,32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Toggling of TEST_RNM in write mode when TEST1 pin is high and high phase of CLK, corrupts current location \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Toggling of TEST_RNM in write mode when TEST1 pin is high and high phase of CLK,does not corrupt current location\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  write_mem("",10'd0,32'b0);
  $display ("\n#######################################################################");
  test_num = 18;
  $display( "\n\n@%t TEST: %d ---  Toggling of TEST_RNM and TEST1 during high phase of CLK in Read Mode --- \n\n", $time, test_num);
  write_mem(1,"","");
  @(negedge CLK);
  #2.0949999999999998;
  TEST1 = 1'b1;
  TEST_RNM = 1'b1;
  ME = 1'b1 ;
  ADR = 0;
  WE = 1'b0;
  @(posedge CLK);
  #2.0949999999999998;
  TEST_RNM = 1'b0;
  TEST1 = 1'b0;
  #0.497;
  if ( Q_BEHAV !== 32'bx)
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Toggling of TEST_RNM and TEST1 pins in high phase of CLK, does not corrupt ouput Q\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Toggling of TEST_RNM and TEST1 pins in high phase of CLK,corrupts ouput Q \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLK);
  read_mem(1,"","");
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Toggling of TEST_RNM and TEST1 pins in Read mode in high phase of CLK, does not corrupt entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Toggling of TEST_RNM and TEST1 pins in Read mode in high phase of CLK,corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end

  $display ("\n#######################################################################");
  test_num = 19;
  $display( "\n\n@%t TEST: %d ---  Toggling of TEST_RNM When TEST1 is high during high phase of CLK in Write Mode --- \n\n", $time, test_num);
  write_mem(1,"","");
  @(negedge CLK);
  #2.0949999999999998;
  TEST_RNM = 1'b1;
  TEST1 = 1'b1;
  ME = 1'b1 ;
  ADR = 0;
  WE = 1'b1;
  @(posedge CLK);
  #2.0949999999999998;
  TEST_RNM = 1'b0;
  TEST1 = 1'b0;
  @(negedge CLK);
  WE = 1'b0;
  #0.497;
  if ( Q_BEHAV === 32'bx)
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Toggling of TEST_RNM in write mode when TEST1 pin is high and high phase of CLK,corrupt ouput Q\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Toggling of TEST_RNM in write mode when TEST1 pin is high and high phase of CLK, does not corrupt ouput Q \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLK);
  @(negedge CLK);
  read_mem("",10'd0,32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Toggling of TEST_RNM and TEST1 in write mode during high phase of CLK, corrupts current location \n\n", $time);
     $display ("\n@%t            PASS\n", $time);  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Toggling of TEST_RNM and TEST1 in write mode during high phase of CLK,does not corrupt current location\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  write_mem("",10'd0,32'b0);

  $display ("\n#######################################################################");
  test_num = 20;
  $display( "\n\n@%t TEST: %d --- X handling of CLK --- \n\n", $time, test_num);
  $display( "\n\n@%t TEST: %d --------- 0 to X transition of CLK and ME is inactive ---------- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    #25;
    CLK = 1'bx;
  end
  begin
  fork
    #0.497
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Invalid(0->X) Clock outputs X  \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid(0->X) Clock does not output X \n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  join
  end
  #5;
  CLK = 1'b0;
  read_mem(1,"",32'bx);
  if ( err_cnt == 0 )
  begin
    $display("\n\n@%t           Invalid(0->X) Clock corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid(0->X) Clock does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  write_mem(1,"","");
  read_mem("",10'd0,32'b0);
  $display ("\n#######################################################################");
  test_num = 21;
  $display( "\n\n@%t TEST: %d --- X handling of CLK --- \n\n", $time, test_num);
  $display( "\n\n@%t TEST: %d --------- 0 to X transition of CLK and ME is active ---------- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    #25;
    CLK = 1'bx;
  end
  begin
  fork
    #0.497
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Invalid(0->X) Clock outputs X  \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid(0->X) Clock does not output X \n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  join
  end
  #5;
  CLK = 1'b0;
  read_mem(1,"",32'bx);
  if ( err_cnt == 0 )
  begin
    $display("\n\n@%t           Invalid(0->X) Clock corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid(0->X) Clock does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  write_mem(1,"","");
  read_mem("",10'd0,32'b0);
  $display( "\n\n@%t TEST: %d --------- 0 to X transition of CLK when LS is 1 ---------- \n\n", $time, test_num);
  @(negedge CLK)
  begin
   LS = 1'b1;
    #25;
    CLK = 1'bx;
  end
  begin
  fork
    #0.497
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Invalid(0->X) Clock outputs X  \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid(0->X) Clock does not output X \n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  join
  end
  #5;
  CLK = 1'b0;
  LS = 1'b0;
  @(negedge CLK)
  write_mem(1,"","");
  read_mem("",10'd0,32'b0);
  $display( "\n\n@%t TEST: %d --------- 1 to X transition of CLK ---------- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    #25;
    CLK = 1'b1;
    #0.071;
    CLK = 1'bx;
  end
  fork
    #0.497
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Invalid(1->X) Clock outputs X on Dataout   \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid(1->X) Clock does not output X on Dataout \n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  join
  #5;
  CLK = 1'b0;
  read_mem(1,"",32'bx);
  if ( err_cnt == 0 )
  begin
    $display("\n\n@%t           Invalid(1->X) Clock corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid(1->X) Clock does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  write_mem(1,"","");
  read_mem("",10'd0,32'b0);

  $display( "\n\n@%t TEST: %d --------- X to 1 transition of CLK---------- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    #15;
    CLK = 1'bx;
    #5;
    CLK = 1'b1;
  end
  #0.497;
  if (Q_BEHAV === 32'bx)
  begin
    $display("\n\n@%t           X->1 transition of Clock outputs X on Dataout \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: X->1 transition of Clock does not output X on Dataout\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #5;
  CLK = 1'b0;

  write_mem(1,"","");
  read_mem("",10'd0,32'b0);
  @(negedge CLK);
  ADR = 0;
`ifndef VIRAGE_SUPPORT_FFV_SIM
  $display ("\n#######################################################################");
  test_num = 22;
  $display( "\n\n@%t TEST: %d --- Z handling of CLK and ME is inactive --- \n\n", $time, test_num);
  $display( "\n\n@%t TEST: %d --------- 0 to Z transition of CLK and ME is inactive ---------- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    #25;
    CLK = 1'bZ;
  end
  begin
  fork
    #0.497
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Invalid(0->X) Clock outputs X  \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid(0->X) Clock does not output X \n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  join
  end
  #5;
  CLK = 1'b0;
  read_mem(1,"",32'bx);
  if ( err_cnt == 0 )
  begin
    $display("\n\n@%t           Invalid(0->X) Clock corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid(0->X) Clock does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  write_mem(1,"","");
  read_mem("",10'd0,32'b0);
  $display ("\n#######################################################################");
  test_num = 23;
  $display( "\n\n@%t TEST: %d --- Z handling of CLK and ME is active --- \n\n", $time, test_num);
  $display( "\n\n@%t TEST: %d --------- 0 to Z transition of CLK and ME is active ---------- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    #25;
    CLK = 1'bZ;
  end
  begin
  fork
    #0.497
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Invalid(0->X) Clock outputs X  \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid(0->X) Clock does not output X \n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  join
  end
  #5;
  CLK = 1'b0;
  read_mem(1,"",32'bx);
  if ( err_cnt == 0 )
  begin
    $display("\n\n@%t           Invalid(0->X) Clock corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid(0->X) Clock does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  write_mem(1,"","");
  read_mem("",10'd0,32'b0);
  $display( "\n\n@%t TEST: %d --------- 0 to Z transition of CLK when LS is 1 ---------- \n\n", $time, test_num);
  @(negedge CLK)
  begin
   LS = 1'b1;
    #25;
    CLK = 1'bZ;
  end
  begin
  fork
    #0.497
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Invalid(0->X) Clock outputs X  \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid(0->X) Clock does not output X \n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  join
  end
  #5;
  CLK = 1'b0;
  LS = 1'b0;
  @(negedge CLK)
  write_mem(1,"","");
  read_mem("",10'd0,32'b0);
  $display( "\n\n@%t TEST: %d --------- 1 to Z transition of CLK ---------- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    #25;
    CLK = 1'b1;
    #0.071;
    CLK = 1'bZ;
  end
  fork
    #0.497
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Invalid(1->X) Clock outputs X on Dataout   \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid(1->X) Clock does not output X on Dataout \n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  join
  #5;
  CLK = 1'b0;
  read_mem(1,"",32'bx);
  if ( err_cnt == 0 )
  begin
    $display("\n\n@%t           Invalid(1->X) Clock corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid(1->X) Clock does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  write_mem(1,"","");
  read_mem("",10'd0,32'b0);

  $display( "\n\n@%t TEST: %d --------- Z to 1 transition of CLK---------- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    #15;
    CLK = 1'bZ;
    #5;
    CLK = 1'b1;
  end
  #0.497;
  if (Q_BEHAV === 32'bx)
  begin
    $display("\n\n@%t           X->1 transition of Clock outputs X on Dataout \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: X->1 transition of Clock does not output X on Dataout\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #5;
  CLK = 1'b0;

  write_mem(1,"","");
  read_mem("",10'd0,32'b0);
  @(negedge CLK);
  ADR = 0;
`endif



  $display ("\n#######################################################################");
  test_num = 24;
  $display( "\n\n@%t TEST: %d ---  X handling of ADR in Read Mode --- \n\n", $time, test_num);
  @(negedge CLK);
    write_mem(1,"","");
  @(negedge CLK);
   read_mem("",10'd0,32'b0);
  @(negedge CLK) 
  begin
    ME = 1'b1;
    ADR = 10'bX;
    WE = 1'b0;
  end
  @(posedge CLK)
  begin
    #0.497;
    if (Q_BEHAV !== 32'bx)
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid Address does not output X Operation unsuccessful\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
      $display ("ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = 32'bx at time %t  ",ADR, Q_BEHAV, $time);
    end
    else 
    begin
      $display("\n\n@%t           Invalid Address outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLK); 
    ADR = 0;
`ifdef virage_ignore_read_addx
  read_mem(1,"","");
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid Address during read does not corrupt entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end 
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid Address during read corrupts memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end 
  #10; 
`else
  read_mem(1,"",32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid Address during read corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid Address during read does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
`endif
`ifndef VIRAGE_SUPPORT_FFV_SIM
  $display ("\n#######################################################################");
  test_num = 25;
  $display( "\n\n@%t TEST: %d ---  Z handling of ADR in Read Mode --- \n\n", $time, test_num);
  @(negedge CLK);
    write_mem(1,"","");
  @(negedge CLK);
   read_mem("",10'd0,32'b0);
  @(negedge CLK) 
  begin
    ME = 1'b1;
    ADR = 10'bZ;
    WE = 1'b0;
  end
  @(posedge CLK)
  begin
    #0.497;
    if (Q_BEHAV !== 32'bx)
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid Address does not output X Operation unsuccessful\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
      $display ("ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = 32'bx at time %t  ",ADR, Q_BEHAV, $time);
    end
    else 
    begin
      $display("\n\n@%t           Invalid Address outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLK); 
    ADR = 0;
`ifdef virage_ignore_read_addx
  read_mem(1,"","");
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid Address during read does not corrupt entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end 
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid Address during read corrupts memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end 
  #10; 
`else
  read_mem(1,"",32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid Address during read corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid Address during read does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
`endif
`endif
  write_mem(1,"","");
  read_mem(1,"","");
  ADR = 0;
  $display ("\n#######################################################################");
  test_num = 26;
  $display( "\n\n@%t TEST: %d ---  X handling of ADR in Write Mode  --- \n\n", $time, test_num);
  @(negedge CLK);
   write_mem("",10'd0,32'b0);
  @(negedge CLK);
   read_mem("",10'd0,32'b0);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 10'bX;
    WE = 1'b1;
  end
  @(negedge CLK);
  WE = 1'b0;
  ADR = 10'b0;
  @(negedge CLK);
  read_mem(1,"",32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid Address corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end 
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid Address does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end 
  #10; 
`ifndef VIRAGE_SUPPORT_FFV_SIM
  $display ("\n#######################################################################");
  test_num = 27;
  $display( "\n\n@%t TEST: %d ---  Z handling of ADR in Write Mode  --- \n\n", $time, test_num);
  @(negedge CLK);
   write_mem("",10'd0,32'b0);
  @(negedge CLK);
   read_mem("",10'd0,32'b0);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 10'bZ;
    WE = 1'b1;
  end
  @(negedge CLK);
  WE = 1'b0;
  ADR = 10'b0;
  @(negedge CLK);
  read_mem(1,"",32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid Address corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end 
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid Address does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end 
  #10; 
`endif
  $display ("\n#######################################################################");
  test_num = 28;
  $display( "\n\n@%t TEST: %d --- Going to check X handling of Clock --- \n\n", $time, test_num);
  @(negedge CLK);
  write_mem(1,"","");
  read_mem(1,"","");
   simul_clk = 0;
  @(negedge CLK)
  begin
    ME = 1'b0;
    WE = 1'b0;
    ADR = 0;    
    D = 0; 
  end
   for (vec= 1; vec <=7; vec= vec+1)
   begin
     $display ("Creating patterns for Tcx violations \n %t", $time);
     // Tcx violations
     if ( vec != 6 )
     begin
       create_pattern(vec,"Tcx");
       if ( vec == 7 )
         check_output(1,1,"Tcx");
       else
         check_output(0,0,"Tcx");
     end
   end
  write_mem(1,"","");


  $display ("\n#######################################################################");
  test_num = 29;
  $display( "\n\n@%t TEST: %d --- X handling of ME in Read Mode with LS = 1'b0 --- \n\n", $time, test_num);
  @(negedge CLK);
   LS = 1'b0;
  write_mem("",10'd0,32'b0);
  @(negedge CLK);
   read_mem("",10'd0,32'b0);
  @(negedge CLK)
  begin
    ME = 1'bx;
    ADR = 0;
    WE = 1'b0;
  end
  @(posedge CLK) 
  begin
    #0.388;
    if ( Q_BEHAV === 32'bx) 
    begin
      $display("\n\n@%t           Invalid ME in Read Mode outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid ME in Read Mode does not output X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  end
`ifdef virage_ignore_read_addx
  ME = 1'b1;
  @(negedge CLK);
  read_mem(1,"","");
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid Address during read does not corrupt entire memory  \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid Address during read corrupts entire memory \n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
`else
  ME = 1'b1;
  @(negedge CLK);
  read_mem(1,"",32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid ME in Read Mode corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid ME in Read Mode does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end   
  @(negedge CLK)
`endif
  @(negedge CLK)
  @(negedge CLK)
  $display ("\n#######################################################################");
  test_num = 30;
  $display( "\n\n@%t TEST: %d --- X handling of ME in Read Mode with LS = 1'b1 --- \n\n", $time, test_num);
  @(negedge CLK);
  write_mem("",10'd0,32'b0);
  @(negedge CLK);
   read_mem("",10'd0,32'b0);
`ifdef VIRAGE_SUPPORT_FFV_SIM
`else
  @(negedge CLK);
`endif
   LS = 1'b1;
  @(negedge CLK)
  begin
    ME = 1'bx;
    ADR = 0;
    WE = 1'b0;
  end
  @(posedge CLK) 
  begin
    #0.388;
    if ( Q_BEHAV === 32'bx) 
    begin
      $display("\n\n@%t           Invalid ME in Read Mode outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid ME in Read Mode does not output X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  end
`ifdef VIRAGE_SUPPORT_FFV_SIM
`else
  @(negedge CLK);
`endif
   LS = 1'b0;
`ifdef virage_ignore_read_addx
  ME = 1'b1;
  @(negedge CLK);
  read_mem(1,"","");
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid Address during read does not corrupt entire memory  \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid Address during read corrupts entire memory \n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
`else
  ME = 1'b1;
  @(negedge CLK);
  read_mem(1,"",32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid ME in Read Mode corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid ME in Read Mode does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end   
  @(negedge CLK)
`endif
  @(negedge CLK)
  @(negedge CLK)

`ifndef VIRAGE_SUPPORT_FFV_SIM
  $display ("\n#######################################################################");
  test_num = 31;
  $display( "\n\n@%t TEST: %d --- Z handling of ME in Read Mode with LS = 1'b0 --- \n\n", $time, test_num);
  @(negedge CLK);
   LS = 1'b0;
  write_mem("",10'd0,32'b0);
  @(negedge CLK);
   read_mem("",10'd0,32'b0);
  @(negedge CLK)
  begin
    ME = 1'bZ;
    ADR = 0;
    WE = 1'b0;
  end
  @(posedge CLK) 
  begin
    #0.388;
    if ( Q_BEHAV === 32'bx) 
    begin
      $display("\n\n@%t           Invalid ME in Read Mode outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid ME in Read Mode does not output X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  end
`ifdef virage_ignore_read_addx
  ME = 1'b1;
  @(negedge CLK);
  read_mem(1,"","");
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid Address during read does not corrupt entire memory  \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid Address during read corrupts entire memory \n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
`else
  ME = 1'b1;
  @(negedge CLK);
  read_mem(1,"",32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid ME in Read Mode corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid ME in Read Mode does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end   
  @(negedge CLK)
`endif
  @(negedge CLK)
  @(negedge CLK)
`endif
`ifndef VIRAGE_SUPPORT_FFV_SIM
  $display ("\n#######################################################################");
  test_num = 32;
  $display( "\n\n@%t TEST: %d --- Z handling of ME in Read Mode with LS = 1'b1 --- \n\n", $time, test_num);
  @(negedge CLK);
  write_mem("",10'd0,32'b0);
  @(negedge CLK);
   read_mem("",10'd0,32'b0);
`ifdef VIRAGE_SUPPORT_FFV_SIM
`else
  @(negedge CLK);
`endif
   LS = 1'b1;
  @(negedge CLK)
  begin
    ME = 1'bZ;
    ADR = 0;
    WE = 1'b0;
  end
  @(posedge CLK) 
  begin
    #0.388;
    if ( Q_BEHAV === 32'bx) 
    begin
      $display("\n\n@%t           Invalid ME in Read Mode outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid ME in Read Mode does not output X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  end
`ifdef VIRAGE_SUPPORT_FFV_SIM
`else
  @(negedge CLK);
`endif
   LS = 1'b0;
`ifdef virage_ignore_read_addx
  ME = 1'b1;
  @(negedge CLK);
  read_mem(1,"","");
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid Address during read does not corrupt entire memory  \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid Address during read corrupts entire memory \n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
`else
  ME = 1'b1;
  @(negedge CLK);
  read_mem(1,"",32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid ME in Read Mode corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid ME in Read Mode does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end   
  @(negedge CLK)
`endif
  @(negedge CLK)
  @(negedge CLK)

`endif
  ADR = 0;

  $display ("\n#######################################################################");
  test_num = 33;
  $display( "\n\n@%t TEST: %d --- X handling of ME in Write Mode with LS low --- \n\n", $time, test_num);
  @(negedge CLK);
  LS = 1'b0;
  write_mem("",10'd0,32'b0);
  @(negedge CLK);
  read_mem("",10'd0,32'b0);
  @(negedge CLK)
  begin
    ME = 1'bx;
    ADR = 0;
    WE = 1'b1;
  end
  @(posedge CLK)
  begin
    #0.497;
    if (Q_BEHAV !== 32'bx)
    begin
      $display("\n\n@%t           Invalid ME in Write Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else 
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid ME in Write Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  end
  @(negedge CLK);
  ME = 1'b1;
  WE = 1'b0;
  @(negedge CLK);
  read_mem(1,"",32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid ME in Write Mode corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid ME in Write Mode does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLK);
  @(negedge CLK);
  write_mem(1,"","");
  read_mem(1,"","");
  @(negedge CLK);
  ADR = 0;

  $display ("\n#######################################################################");
  test_num = 34;
  $display( "\n\n@%t TEST: %d --- X handling of ME in Write Mode with LS high --- \n\n", $time, test_num);
  @(negedge CLK);
  write_mem("",10'd0,32'b0);
  @(negedge CLK);
  read_mem("",10'd0,32'b0);
  @(negedge CLK);
`ifdef VIRAGE_SUPPORT_FFV_SIM
`else
  @(negedge CLK);
`endif
  LS = 1'b1;
  @(negedge CLK)
  begin
    ME = 1'bx;
    ADR = 0;
    WE = 1'b1;
  end
  @(posedge CLK)
  begin
    #0.497;
    if (Q_BEHAV !== 32'bx)
    begin
      $display("\n\n@%t           Invalid ME in Write Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else 
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid ME in Write Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  end
`ifdef VIRAGE_SUPPORT_FFV_SIM
`else
  @(negedge CLK);
`endif
  LS = 1'b0;
  @(negedge CLK);
  ME = 1'b1;
  WE = 1'b0;
  @(negedge CLK);
  read_mem(1,"",32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid ME in Write Mode corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid ME in Write Mode does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLK);
  @(negedge CLK);
  write_mem(1,"","");
  read_mem(1,"","");
  @(negedge CLK);
  ADR = 0;

`ifndef VIRAGE_SUPPORT_FFV_SIM
  $display ("\n#######################################################################");
  test_num = 35;
  $display( "\n\n@%t TEST: %d --- Z handling of ME in Write Mode with LS low --- \n\n", $time, test_num);
  @(negedge CLK);
  LS = 1'b0;
  write_mem("",10'd0,32'b0);
  @(negedge CLK);
  read_mem("",10'd0,32'b0);
  @(negedge CLK)
  begin
    ME = 1'bZ;
    ADR = 0;
    WE = 1'b1;
  end
  @(posedge CLK)
  begin
    #0.497;
    if (Q_BEHAV !== 32'bx)
    begin
      $display("\n\n@%t           Invalid ME in Write Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else 
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid ME in Write Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  end
  @(negedge CLK);
  ME = 1'b1;
  WE = 1'b0;
  @(negedge CLK);
  read_mem(1,"",32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid ME in Write Mode corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid ME in Write Mode does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLK);
  @(negedge CLK);
  write_mem(1,"","");
  read_mem(1,"","");
  @(negedge CLK);
  ADR = 0;
`endif

`ifndef VIRAGE_SUPPORT_FFV_SIM
  $display ("\n#######################################################################");
  test_num = 36;
  $display( "\n\n@%t TEST: %d --- Z handling of ME in Write Mode with LS high --- \n\n", $time, test_num);
  @(negedge CLK);
  write_mem("",10'd0,32'b0);
  @(negedge CLK);
  read_mem("",10'd0,32'b0);
  @(negedge CLK);
`ifdef VIRAGE_SUPPORT_FFV_SIM
`else
  @(negedge CLK);
`endif
  LS = 1'b1;
  @(negedge CLK)
  begin
    ME = 1'bZ;
    ADR = 0;
    WE = 1'b1;
  end
  @(posedge CLK)
  begin
    #0.497;
    if (Q_BEHAV !== 32'bx)
    begin
      $display("\n\n@%t           Invalid ME in Write Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else 
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid ME in Write Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  end
`ifdef VIRAGE_SUPPORT_FFV_SIM
`else
  @(negedge CLK);
`endif
  LS = 1'b0;
  @(negedge CLK);
  ME = 1'b1;
  WE = 1'b0;
  @(negedge CLK);
  read_mem(1,"",32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid ME in Write Mode corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid ME in Write Mode does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLK);
  @(negedge CLK);
  write_mem(1,"","");
  read_mem(1,"","");
  @(negedge CLK);
  ADR = 0;
`endif


  $display ("\n#######################################################################");
  test_num = 37;
  $display( "\n\n@%t TEST: %d --- X handling of D in Read Mode --- \n\n", $time, test_num);
  write_mem("",10'd0,32'b0);
  @(negedge CLK);
  ME = 1'b1;
  ADR = 0;
  D = 32'bx;
  WE = 1'b0;
  @(posedge CLK)
  begin
    #0.497;
    if ( Q_BEHAV !== 32'bx)
    begin
      $display("\n\n@%t           Invalid D in Read Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid D in Read Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  end
  @(negedge CLK);
  D = 0;
  @(negedge CLK);
  read_mem("",10'd0,32'b0);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid D in Read Mode does not corrupt current location \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid D in Read Mode corrupts current location\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLK);
  @(negedge CLK);
  ADR = 0;

  $display ("\n#######################################################################");
  test_num = 38;
  $display( "\n\n@%t TEST: %d --- X handling of D in Write Mode --- \n\n", $time, test_num);
  @(negedge CLK)
  write_mem("",10'd0,32'b0);
  @(negedge CLK)
  read_mem("",10'd0,32'b0);
  @(negedge CLK)
  begin
  ME = 1'b1;
  ADR = 0;
  D = 32'bx;
  WE = 1'b1;
  end
  @(posedge CLK)
  begin
    #0.497;    
    if ( Q_BEHAV !== 32'bx)
    begin
      $display("\n\n@%t           Invalid D in Write Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid D in Write Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  end
  @(posedge CLK);
  #5;
  WE = 1'b0;
  D = 0;
  @(negedge CLK);
  read_mem("",10'd0,32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid D in Write Mode corrupts current location \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid D in Write Mode does not corrupt current location\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLK);
  write_mem("",10'd0,32'b0);

  $display ("\n#######################################################################");
  test_num = 39;
  $display( "\n\n@%t TEST: %d --- X handling of WE  --- \n\n", $time, test_num);
  @(negedge CLK);
  write_mem("",10'd0,32'b0);
  @(negedge CLK);
  read_mem("",10'd0,32'b0);
  @(negedge CLK);
  ME = 1'b1;
  ADR = 0;
  WE = 1'bx;
  @(posedge CLK)
  begin
    #0.497;
    if ( Q_BEHAV === 32'bx) 
    begin
      $display("\n\n@%t           Invalid WE outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid WE does not output X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
    WE = 1'b0;
  end
  @(negedge CLK);
  read_mem("",10'd0,32'bx);
  if ( err_cnt == 0) 
  begin
    $display("\n\n@%t           Invalid WE corrupts current location \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid WE does not corrupt current location\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLK);
  write_mem("",10'd0,32'b0);

`ifndef VIRAGE_SUPPORT_FFV_SIM
  $display ("\n#######################################################################");
  test_num = 40;
  $display( "\n\n@%t TEST: %d --- Z handling of D in Read Mode --- \n\n", $time, test_num);
  write_mem("",10'd0,32'b0);
  @(negedge CLK);
  ME = 1'b1;
  ADR = 0;
  D = 32'bZ;
  WE = 1'b0;
  @(posedge CLK)
  begin
    #0.497;
    if ( Q_BEHAV !== 32'bx)
    begin
      $display("\n\n@%t           Invalid D in Read Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid D in Read Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  end
  @(negedge CLK);
  D = 0;
  @(negedge CLK);
  read_mem("",10'd0,32'b0);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid D in Read Mode does not corrupt current location \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid D in Read Mode corrupts current location\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLK);
  @(negedge CLK);
  ADR = 0;

  $display ("\n#######################################################################");
  test_num = 41;
  $display( "\n\n@%t TEST: %d --- Z handling of D in Write Mode --- \n\n", $time, test_num);
  @(negedge CLK)
  write_mem("",10'd0,32'b0);
  @(negedge CLK)
  read_mem("",10'd0,32'b0);
  @(negedge CLK)
  begin
  ME = 1'b1;
  ADR = 0;
  D = 32'bZ;
  WE = 1'b1;
  end
  @(posedge CLK)
  begin
    #0.497;    
    if ( Q_BEHAV !== 32'bx)
    begin
      $display("\n\n@%t           Invalid D in Write Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid D in Write Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  end
  @(posedge CLK);
  #5;
  WE = 1'b0;
  D = 0;
  @(negedge CLK);
  read_mem("",10'd0,32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid D in Write Mode corrupts current location \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid D in Write Mode does not corrupt current location\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLK);
  write_mem("",10'd0,32'b0);

  $display ("\n#######################################################################");
  test_num = 42;
  $display( "\n\n@%t TEST: %d --- Z handling of WE  --- \n\n", $time, test_num);
  @(negedge CLK);
  write_mem("",10'd0,32'b0);
  @(negedge CLK);
  read_mem("",10'd0,32'b0);
  @(negedge CLK);
  ME = 1'b1;
  ADR = 0;
  WE = 1'bZ;
  @(posedge CLK)
  begin
    #0.497;
    if ( Q_BEHAV === 32'bx) 
    begin
      $display("\n\n@%t           Invalid WE outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid WE does not output X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
    WE = 1'b0;
  end
  @(negedge CLK);
  read_mem("",10'd0,32'bx);
  if ( err_cnt == 0) 
  begin
    $display("\n\n@%t           Invalid WE corrupts current location \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid WE does not corrupt current location\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLK);
  write_mem("",10'd0,32'b0);

`endif

  $display ("\n#######################################################################");
  test_num = 43;
  $display( "\n\n@%t TEST: %d --- X handling of LS in Write --- \n\n", $time, test_num);
  @(negedge CLK);
  write_mem(1,"","");
  @(negedge CLK)
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;
    LS = 1'bx;
    WE = 1'b1;
  end
  @(posedge CLK)
  begin
    #0.497;
    if (Q_BEHAV !== 32'bx)
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid LS does not output X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           Invalid LS outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLK);
    WE = 1'b0;
    ME = 1'b1;
    LS = 1'b0;
  @(negedge CLK);
  read_mem(1,"",32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid LS corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid LS does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLK);
  @(negedge CLK);
  write_mem(1,"","");
  @(negedge CLK);
    ADR = 0;
  $display ("\n#######################################################################");
  test_num = 44;
  $display( "\n\n@%t TEST: %d --- X handling of LS in Read --- \n\n", $time, test_num);
  @(negedge CLK);
  write_mem(1,"","");
  @(negedge CLK)
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;
    LS = 1'bx;
    WE = 1'b0;
  end
  @(posedge CLK)
  begin
    #0.497;
    if (Q_BEHAV !== 32'bx)
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid LS does not output X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           Invalid LS outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLK);
    LS = 1'b0;
  @(negedge CLK);
  read_mem(1,"",32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid LS corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid LS does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLK);
  @(negedge CLK);
  write_mem(1,"","");
  @(negedge CLK);
    ADR = 0;
`ifndef VIRAGE_SUPPORT_FFV_SIM
  $display ("\n#######################################################################");
  test_num = 45;
  $display( "\n\n@%t TEST: %d --- Z handling of LS in Write --- \n\n", $time, test_num);
  @(negedge CLK);
  write_mem(1,"","");
  @(negedge CLK)
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;
    LS = 1'bx;
    WE = 1'b1;
  end
  @(posedge CLK)
  begin
    #0.497;
    if (Q_BEHAV !== 32'bx)
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid LS does not output X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           Invalid LS outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLK);
    WE = 1'b0;
    ME = 1'b1;
    LS = 1'b0;
  @(negedge CLK);
  read_mem(1,"",32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid LS corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid LS does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLK);
  @(negedge CLK);
  write_mem(1,"","");
  @(negedge CLK);
    ADR = 0;
  $display ("\n#######################################################################");
  test_num = 46;
  $display( "\n\n@%t TEST: %d --- Z handling of LS in Read --- \n\n", $time, test_num);
  @(negedge CLK);
  write_mem(1,"","");
  @(negedge CLK)
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;
    LS = 1'bx;
    WE = 1'b0;
  end
  @(posedge CLK)
  begin
    #0.497;
    if (Q_BEHAV !== 32'bx)
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid LS does not output X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           Invalid LS outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLK);
    LS = 1'b0;
  @(negedge CLK);
  read_mem(1,"",32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid LS corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid LS does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLK);
  @(negedge CLK);
  write_mem(1,"","");
  @(negedge CLK);
    ADR = 0;
`endif

  $display ("\n#######################################################################");
  test_num = 47;
  $display( "\n\n@%t TEST: %d --- X handling of TEST1 in Read Mode --- \n\n", $time, test_num);
  write_mem("",10'd0,32'b0);
  @(negedge CLK);
  ME = 1'b1 ;
  ADR = 0;
  WE = 1'b0;
  #2.0949999999999998;
  TEST1 = 1'bx;
  @(posedge CLK);
  #0.497;
  if ( Q_BEHAV !== 32'bx)
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid TEST1 in Read Mode does not output X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid TEST1 in Read Mode outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  #2.0949999999999998;
  TEST1 = 1'b0;
  @(negedge CLK);
  read_mem("",10'd0,32'b0);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid TEST1 in Read Mode does not corrupt current location \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid TEST1 in Read Mode corrupts current location\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 48;
  $display( "\n\n@%t TEST: %d --- X handling of TEST1 in Write Mode --- \n\n", $time, test_num);
  write_mem("",10'd0,32'b0);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;
    WE = 1'b1;
    #2.0949999999999998;
    TEST1 = 1'bx;
  end
  @(posedge CLK)
  begin
    #0.497;
    if ( Q_BEHAV !== 32'bx)
    begin
      $display("\n\n@%t           Invalid TEST1 in Write Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid TEST1 in Write Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  end
  @(negedge CLK);
  #5;
  WE = 1'b0;
  #2.0949999999999998;
  TEST1 = 1'b0;
  @(posedge CLK);
  read_mem("",10'd0,32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid TEST1 in Write Mode corrupts current location \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid TEST1 in Write Mode does not corrupt current location\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLK);
  write_mem("",10'd0,32'b0);
`ifndef VIRAGE_SUPPORT_FFV_SIM
  $display ("\n#######################################################################");
  test_num = 49;
  $display( "\n\n@%t TEST: %d --- Z handling of TEST1 in Read Mode --- \n\n", $time, test_num);
  write_mem("",10'd0,32'b0);
  @(negedge CLK);
  ME = 1'b1 ;
  ADR = 0;
  WE = 1'b0;
  #2.0949999999999998;
  TEST1 = 1'bZ;
  @(posedge CLK);
  #0.497;
  if ( Q_BEHAV !== 32'bx)
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid TEST1 in Read Mode does not output X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid TEST1 in Read Mode outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  #2.0949999999999998;
  TEST1 = 1'b0;
  @(negedge CLK);
  read_mem("",10'd0,32'b0);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid TEST1 in Read Mode does not corrupt current location \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid TEST1 in Read Mode corrupts current location\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 50;
  $display( "\n\n@%t TEST: %d --- Z handling of TEST1 in Write Mode --- \n\n", $time, test_num);
  write_mem("",10'd0,32'b0);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;
    WE = 1'b1;
    #2.0949999999999998;
    TEST1 = 1'bZ;
  end
  @(posedge CLK)
  begin
    #0.497;
    if ( Q_BEHAV !== 32'bx)
    begin
      $display("\n\n@%t           Invalid TEST1 in Write Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid TEST1 in Write Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  end
  @(negedge CLK);
  #5;
  WE = 1'b0;
  #2.0949999999999998;
  TEST1 = 1'b0;
  @(posedge CLK);
  read_mem("",10'd0,32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid TEST1 in Write Mode corrupts current location \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid TEST1 in Write Mode does not corrupt current location\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLK);
  write_mem("",10'd0,32'b0);
`endif
  $display ("\n#######################################################################");
  test_num = 51;
  $display( "\n\n@%t TEST: %d --- X handling of TEST_RNM in Read Mode --- \n\n", $time, test_num);
  write_mem(1,"","");
  @(negedge CLK);
  ME = 1'b1 ;
  ADR = 0;
  WE = 1'b0;
  TEST_RNM = 1'bx;
  @(posedge CLK);
  #0.497;
  if ( Q_BEHAV !== 32'bx)
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid TEST_RNM in Read Mode does not output X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid TEST_RNM in Read Mode outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLK);
  TEST_RNM = 1'b0;
  @(negedge CLK);
  read_mem(1,"",32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid TEST_RNM in Read Mode corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid TEST_RNM in Read Mode does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLK);
  write_mem(1,"","");
  read_mem(1,"","");

  $display ("\n#######################################################################");
  test_num = 52;
  $display( "\n\n@%t TEST: %d --- X handling of TEST_RNM in Write Mode --- \n\n", $time, test_num);
  @(negedge CLK);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;
    WE = 1'b1;
    TEST_RNM = 1'bx;
  end
  @(posedge CLK)
  begin
    #0.497;
    if ( Q_BEHAV !== 32'bx)
    begin
      $display("\n\n@%t           Invalid TEST_RNM in Write Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid TEST_RNM in Write Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  end
  @(negedge CLK);
  WE = 1'b0;
  TEST_RNM = 1'b0;
  @(posedge CLK);
  read_mem(1,"",32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid TEST_RNM in Write Mode corrupt entire Memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid TEST_RNM in Write Mode does not corrupt entire Memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLK);
  write_mem(1,"","");
  read_mem(1,"","");
`ifndef VIRAGE_SUPPORT_FFV_SIM
  $display ("\n#######################################################################");
  test_num = 53;
  $display( "\n\n@%t TEST: %d --- Z handling of TEST_RNM in Read Mode --- \n\n", $time, test_num);
  write_mem(1,"","");
  @(negedge CLK);
  ME = 1'b1 ;
  ADR = 0;
  WE = 1'b0;
  TEST_RNM = 1'bZ;
  @(posedge CLK);
  #0.497;
  if ( Q_BEHAV !== 32'bx)
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid TEST_RNM in Read Mode does not output X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid TEST_RNM in Read Mode outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLK);
  TEST_RNM = 1'b0;
  @(negedge CLK);
  read_mem(1,"",32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid TEST_RNM in Read Mode corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid TEST_RNM in Read Mode does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLK);
  write_mem(1,"","");
  read_mem(1,"","");

  $display ("\n#######################################################################");
  test_num = 54;
  $display( "\n\n@%t TEST: %d --- Z handling of TEST_RNM in Write Mode --- \n\n", $time, test_num);
  @(negedge CLK);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;
    WE = 1'b1;
    TEST_RNM = 1'bZ;
  end
  @(posedge CLK)
  begin
    #0.497;
    if ( Q_BEHAV !== 32'bx)
    begin
      $display("\n\n@%t           Invalid TEST_RNM in Write Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid TEST_RNM in Write Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  end
  @(negedge CLK);
  WE = 1'b0;
  TEST_RNM = 1'b0;
  @(posedge CLK);
  read_mem(1,"",32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid TEST_RNM in Write Mode corrupt entire Memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid TEST_RNM in Write Mode does not corrupt entire Memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLK);
  write_mem(1,"","");
  read_mem(1,"","");
`endif

  $display ("\n#######################################################################");
  test_num = 55;
  $display( "\n\n@%t TEST: %d --- X handling of RM in Read Mode --- \n\n", $time, test_num);
  @(negedge CLK)
  begin  
    ME = 1'b1;
    ADR = 0;
    RME = 1'b1;
    RM = 4'bx;
    WE = 1'b0;
  end    
  @(posedge CLK);
  #7777.001;
  if ( Q_BEHAV !== 32'bx)
  begin  
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid RM in Read Mode does not output X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end    
  else
  begin
    $display("\n\n@%t           Invalid RM in Read Mode outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end    
  #5;
  RM = 4'b0;
  @(negedge CLK);
  read_mem("",10'd0,32'b0);
  if ( err_cnt == 0)
  begin  
    $display("\n\n@%t           Invalid RM in Read Mode does not corrupt current location \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin  
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid RM in Read Mode corrupts current location\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 56;
  $display( "\n\n@%t TEST: %d --- X handling of RM in Write Mode --- \n\n", $time, test_num);
  @(negedge CLK)
  begin  
    ME = 1'b1;
    ADR = 0;
    RM = 4'bx;
    WE = 1'b1;
  end    
  @(posedge CLK);
  #0.497;    
  if ( Q_BEHAV === 32'bx)
  begin  
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid RM in Write Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end    
  else  
  begin
    $display("\n\n@%t           Invalid RM in Write Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end    
  #5; 
  RM = 4'b0; 
  WE = 1'b0;
  @(negedge CLK); 
  read_mem("",10'd0,32'bx); 
  if ( err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid RM in Write Mode corrupts current location \n\n", $time);
     $display ("\n@%t            PASS\n", $time); 
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid RM in Write Mode does not corrupt current location\n\n", $time);
     $display ("\n@%t            FAIL\n", $time); 
  end 
  #10; 
  @(negedge CLK);   
  write_mem("",10'd0,32'b0); 
  @(negedge CLK);   
     RME = 1'b0;
     RM = 4'b0011;
  $display ("\n#######################################################################");
  test_num = 57;
  $display( "\n\n@%t TEST: %d --- X handling of RME in Read Mode --- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;
    RME = 1'bx;
    WE = 1'b0;
  end
  @(posedge CLK);
  #0.497;
  if ( Q_BEHAV !== 32'bx)
  begin 
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid RME in Read Mode does not output X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid RME in Read Mode outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  #5;
  RME = 1'b0;
  @(negedge CLK);
  read_mem("",10'd0,32'b0);
  if ( err_cnt == 0)
  begin 
    $display("\n\n@%t           Invalid RME in Read Mode does not corrupt current location \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin 
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid RME in Read Mode corrupts current location\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 58;
  $display( "\n\n@%t TEST: %d --- X handling of RME in Write Mode --- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;
    RME = 1'bx;
    WE = 1'b1;
  end
  @(posedge CLK);
  #0.497;
  if ( Q_BEHAV === 32'bx)
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid RME in Write Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid RME in Write Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  #5;
  WE = 1'b0;
  RME = 1'b0;
  @(negedge CLK);
  read_mem("",10'd0,32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid RME in Write Mode corrupts current location \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid RME in Write Mode does not corrupt current location\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLK);
  write_mem("",10'd0,32'b0);
`ifndef VIRAGE_SUPPORT_FFV_SIM
  $display ("\n#######################################################################");
  test_num = 59;
  $display( "\n\n@%t TEST: %d --- Z handling of RM in Read Mode --- \n\n", $time, test_num);
  @(negedge CLK)
  begin  
    ME = 1'b1;
    ADR = 0;
    RME = 1'b1;
    RM = 4'bZ;
    WE = 1'b0;
  end    
  @(posedge CLK);
  #7777.001;
  if ( Q_BEHAV !== 32'bx)
  begin  
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid RM in Read Mode does not output X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end    
  else
  begin
    $display("\n\n@%t           Invalid RM in Read Mode outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end    
  #5;
  RM = 4'b0;
  @(negedge CLK);
  read_mem("",10'd0,32'b0);
  if ( err_cnt == 0)
  begin  
    $display("\n\n@%t           Invalid RM in Read Mode does not corrupt current location \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin  
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid RM in Read Mode corrupts current location\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 60;
  $display( "\n\n@%t TEST: %d --- Z handling of RM in Write Mode --- \n\n", $time, test_num);
  @(negedge CLK)
  begin  
    ME = 1'b1;
    ADR = 0;
    RM = 4'bZ;
    WE = 1'b1;
  end    
  @(posedge CLK);
  #0.497;    
  if ( Q_BEHAV === 32'bx)
  begin  
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid RM in Write Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end    
  else  
  begin
    $display("\n\n@%t           Invalid RM in Write Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end    
  #5; 
  RM = 4'b0; 
  WE = 1'b0;
  @(negedge CLK); 
  read_mem("",10'd0,32'bx); 
  if ( err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid RM in Write Mode corrupts current location \n\n", $time);
     $display ("\n@%t            PASS\n", $time); 
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid RM in Write Mode does not corrupt current location\n\n", $time);
     $display ("\n@%t            FAIL\n", $time); 
  end 
  #10; 
  @(negedge CLK);   
  write_mem("",10'd0,32'b0); 
  @(negedge CLK);   
     RME = 1'b0;
     RM = 4'b0011;
  $display ("\n#######################################################################");
  test_num = 61;
  $display( "\n\n@%t TEST: %d --- Z handling of RME in Read Mode --- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;
    RME = 1'bZ;
    WE = 1'b0;
  end
  @(posedge CLK);
  #0.497;
  if ( Q_BEHAV !== 32'bx)
  begin 
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid RME in Read Mode does not output X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid RME in Read Mode outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  #5;
  RME = 1'b0;
  @(negedge CLK);
  read_mem("",10'd0,32'b0);
  if ( err_cnt == 0)
  begin 
    $display("\n\n@%t           Invalid RME in Read Mode does not corrupt current location \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin 
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid RME in Read Mode corrupts current location\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 62;
  $display( "\n\n@%t TEST: %d --- Z handling of RME in Write Mode --- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;
    RME = 1'bZ;
    WE = 1'b1;
  end
  @(posedge CLK);
  #0.497;
  if ( Q_BEHAV === 32'bx)
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid RME in Write Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid RME in Write Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  #5;
  WE = 1'b0;
  RME = 1'b0;
  @(negedge CLK);
  read_mem("",10'd0,32'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid RME in Write Mode corrupts current location \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid RME in Write Mode does not corrupt current location\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLK);
  write_mem("",10'd0,32'b0);
`endif
  @(negedge CLK);
  @(negedge CLK);
  write_mem("",10'd0,32'b0);

  $display ("\n#######################################################################");
  test_num = 63;
  $display( "\n\n@%t TEST: %d --- X handling of WA in Write Mode from port A --- \n\n", $time, test_num);
  @(negedge CLK);
  @(negedge CLK)
  begin  
    ME = 1'b1;
    ADR = 0;
    WA = 2'bx;
    WE = 1'b1;
  end    
  @(posedge CLK);
  #0.497;    
  if ( Q_BEHAV === 32'bx)
  begin  
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid WA in Write Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end    
  else  
  begin
    $display("\n\n@%t           Invalid WA in Write Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end    
  @(negedge CLK);
  WA = 2'b0; 
  WE = 1'b0;
  @(negedge CLK);
  @(negedge CLK); 
  read_mem(1,"",32'bx);
  if ( err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid WA in Write Mode corrupts Entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time); 
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid WA in Write Mode does not corrupt Entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time); 
  end 
  #10; 
  @(negedge CLK);   
  write_mem(1,"","");
  @(negedge CLK);   
  read_mem("",10'd0,32'b0);

  $display ("\n#######################################################################");
  test_num = 64;
  $display( "\n\n@%t TEST: %d --- X handling of WA in Read Mode from port A --- \n\n", $time, test_num);
  @(negedge CLK);
  @(negedge CLK)
  begin  
    ME = 1'b1;
    ADR = 0;
    WA = 2'bx;
    WE = 1'b0;
  end    
  @(posedge CLK);
  #0.497;    
  if ( Q_BEHAV === 32'bx)
  begin  
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid WA in Read Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end    
  else  
  begin
    $display("\n\n@%t           Invalid WA in Read Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end    
  @(negedge CLK); 
  WA = 2'b0;
  @(negedge CLK);
  @(negedge CLK); 
  read_mem(1,"","");
  if ( err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid WA in Read Mode does not corrupts Entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time); 
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid WA in Read Mode corrupt Entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time); 
  end 
  @(negedge CLK);   
  @(negedge CLK);
    assist_initial("");

  $display ("\n#######################################################################");
  test_num = 65;
  $display( "\n\n@%t TEST: %d --- X handling of WPULSE in Write Mode from port A --- \n\n", $time, test_num);
  @(negedge CLK);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;
    WPULSE = 3'bx;
    WE = 1'b1;
  end    
  @(posedge CLK);
  #0.497;    
  if ( Q_BEHAV === 32'bx)
  begin  
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid WPULSE in Write Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end    
  else  
  begin
    $display("\n\n@%t           Invalid WPULSE in Write Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end    
  @(negedge CLK); 
  WPULSE = 3'b0;
  WE = 1'b0;
  @(negedge CLK);
  @(negedge CLK); 
  read_mem(1,"",32'bx);
  if ( err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid WPULSE in Write Mode corrupts Entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time); 
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid WPULSE in Write Mode does not corrupt Entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time); 
  end 
  #10; 
  @(negedge CLK);   
  write_mem(1,"","");
  @(negedge CLK);   
  read_mem("",10'd0,32'b0);
  @(negedge CLK);   

  $display ("\n#######################################################################");
  test_num = 66;
  $display( "\n\n@%t TEST: %d --- X handling of WPULSE in Read Mode from port A --- \n\n", $time, test_num);
  @(negedge CLK);
  @(negedge CLK)
  begin  
    ME = 1'b1;
    ADR = 0;
    WPULSE = 3'bx;
    WE = 1'b0;
  end    
  @(posedge CLK);
  #0.497;    
  if ( Q_BEHAV === 32'bx)
  begin  
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid WPULSE in Read Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end    
  else  
  begin
    $display("\n\n@%t           Invalid WPULSE in Read Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end    
  @(negedge CLK); 
  WPULSE = 3'b0;
  @(negedge CLK);
  @(negedge CLK); 
  read_mem(1,"","");
  if ( err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid WPULSE in Read Mode does not corrupt Entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time); 
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid WPULSE in Read Mode corrupts Entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time); 
  end 
  @(negedge CLK);   
  @(negedge CLK);   
  @(negedge CLK);
    assist_initial("");
`ifndef VIRAGE_SUPPORT_FFV_SIM

  $display ("\n#######################################################################");
  test_num = 67;
  $display( "\n\n@%t TEST: %d --- Z handling of WA in Write Mode from port A --- \n\n", $time, test_num);
  @(negedge CLK);
  @(negedge CLK)
  begin  
    ME = 1'b1;
    ADR = 0;
    WA = 2'bZ;
    WE = 1'b1;
  end    
  @(posedge CLK);
  #0.497;    
  if ( Q_BEHAV === 32'bx)
  begin  
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid WA in Write Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end    
  else  
  begin
    $display("\n\n@%t           Invalid WA in Write Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end    
  @(negedge CLK);
  WA = 2'b0; 
  WE = 1'b0;
  @(negedge CLK);
  @(negedge CLK); 
  read_mem(1,"",32'bx);
  if ( err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid WA in Write Mode corrupts Entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time); 
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid WA in Write Mode does not corrupt Entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time); 
  end 
  #10; 
  @(negedge CLK);   
  write_mem(1,"","");
  @(negedge CLK);   
  read_mem("",10'd0,32'b0);

  $display ("\n#######################################################################");
  test_num = 68;
  $display( "\n\n@%t TEST: %d --- Z handling of WA in Read Mode from port A --- \n\n", $time, test_num);
  @(negedge CLK);
  @(negedge CLK)
  begin  
    ME = 1'b1;
    ADR = 0;
    WA = 2'bZ;
    WE = 1'b0;
  end    
  @(posedge CLK);
  #0.497;    
  if ( Q_BEHAV === 32'bx)
  begin  
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid WA in Read Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end    
  else  
  begin
    $display("\n\n@%t           Invalid WA in Read Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end    
  @(negedge CLK); 
  WA = 2'b0;
  @(negedge CLK);
  @(negedge CLK); 
  read_mem(1,"","");
  if ( err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid WA in Read Mode does not corrupts Entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time); 
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid WA in Read Mode corrupt Entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time); 
  end 
  @(negedge CLK);   
  @(negedge CLK);
    assist_initial("");

  $display ("\n#######################################################################");
  test_num = 69;
  $display( "\n\n@%t TEST: %d --- Z handling of WPULSE in Write Mode from port A --- \n\n", $time, test_num);
  @(negedge CLK);
  @(negedge CLK)
  begin
    ME = 1'b1;
    ADR = 0;
    WPULSE = 3'bZ;
    WE = 1'b1;
  end    
  @(posedge CLK);
  #0.497;    
  if ( Q_BEHAV === 32'bx)
  begin  
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid WPULSE in Write Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end    
  else  
  begin
    $display("\n\n@%t           Invalid WPULSE in Write Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end    
  @(negedge CLK); 
  WPULSE = 3'b0;
  WE = 1'b0;
  @(negedge CLK);
  @(negedge CLK); 
  read_mem(1,"",32'bx);
  if ( err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid WPULSE in Write Mode corrupts Entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time); 
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid WPULSE in Write Mode does not corrupt Entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time); 
  end 
  #10; 
  @(negedge CLK);   
  write_mem(1,"","");
  @(negedge CLK);   
  read_mem("",10'd0,32'b0);
  @(negedge CLK);   

  $display ("\n#######################################################################");
  test_num = 70;
  $display( "\n\n@%t TEST: %d --- Z handling of WPULSE in Read Mode from port A --- \n\n", $time, test_num);
  @(negedge CLK);
  @(negedge CLK)
  begin  
    ME = 1'b1;
    ADR = 0;
    WPULSE = 3'bZ;
    WE = 1'b0;
  end    
  @(posedge CLK);
  #0.497;    
  if ( Q_BEHAV === 32'bx)
  begin  
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid WPULSE in Read Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end    
  else  
  begin
    $display("\n\n@%t           Invalid WPULSE in Read Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end    
  @(negedge CLK); 
  WPULSE = 3'b0;
  @(negedge CLK);
  @(negedge CLK); 
  read_mem(1,"","");
  if ( err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid WPULSE in Read Mode does not corrupt Entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time); 
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid WPULSE in Read Mode corrupts Entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time); 
  end 
  @(negedge CLK);   
  @(negedge CLK);   
  @(negedge CLK);
    assist_initial("");
`endif
  $display ("\n#######################################################################");
  test_num = 71;
  $display( "\n\n@%t TEST: %d --- X handling of BC0 with Memory Disabled from port A --- \n\n", $time, test_num);
  @(negedge CLK)
  begin  
    ME = 1'b0;
    ADR = 10'b0;
    BC0 = 1'bx;
  end    
  @(negedge CLK);
   BC0 = 1'b0; 
   WE = 1'b0;
  @(negedge CLK); 
  read_mem(1,"",32'bx);
  if ( err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid BC0 corrupts Entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time); 
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC0 does not corrupt Entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time); 
  end 
  @(negedge CLK);   
  write_mem(1,"","");
  @(negedge CLK);   
  read_mem("",10'd0,32'b0);
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 72;
  $display( "\n\n@%t TEST: %d --- X handling of BC0 in Read Mode from port A --- \n\n", $time, test_num);
  @(negedge CLK)
  begin  
    ME = 1'b1;
    WE = 1'b0;
    D = 32'b0;
    ADR = 10'b0;
    BC0 = 1'bx;
  end
  @(posedge CLK);
  #0.497;    
  if ( Q_BEHAV !== 32'bx)
  begin  
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC0 in Read Mode does not outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end    
  else  
  begin
    $display("\n\n@%t           Invalid BC0 in Read Mode outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end   
  @(negedge CLK);
   BC0 = 1'b0; 
   WE = 1'b0;
  @(negedge CLK); 
  read_mem(1,"",32'bx);
  if (err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid BC0 corrupts Entire memory in Read Mode \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC0 does not corrupt Entire memory in Read Mode\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end 
  @(negedge CLK);   
  write_mem(1,"","");
  @(negedge CLK);   
  read_mem("",10'd0,32'b0);
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 73;
  $display( "\n\n@%t TEST: %d --- X handling of BC0 in Write Mode from port A --- \n\n", $time, test_num);
  
  @(negedge CLK)
  begin  
    ME = 1'b1;
    WE = 1'b1;
    D = 32'b0;
    ADR = 10'b0;
    BC0 = 1'bx;
  end  
  @(posedge CLK);
  #0.497;
  if ( Q_BEHAV === 32'bx)
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC0 in Write Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid BC0 in Write Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLK);
   BC0 = 1'b0; 
   WE = 1'b0;
  @(negedge CLK); 
  read_mem(1,"",32'bx);
  if (err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid BC0 corrupts Entire memory in Write Mode \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC0 does not corrupt Entire memory in Write Mode\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end 
  @(negedge CLK);   
  write_mem(1,"","");
  @(negedge CLK);   
  read_mem("",10'd0,32'b0);
  @(negedge CLK);   
   no_tclk = 0;
`ifndef VIRAGE_SUPPORT_FFV_SIM
  $display ("\n#######################################################################");
  test_num = 74;
  $display( "\n\n@%t TEST: %d --- Z handling of BC0 with Memory Disabled from port A --- \n\n", $time, test_num);
  @(negedge CLK)
  begin  
    ME = 1'b0;
    ADR = 10'b0;
    BC0 = 1'bZ;
  end    
  @(negedge CLK);
   BC0 = 1'b0; 
   WE = 1'b0;
  @(negedge CLK); 
  read_mem(1,"",32'bx);
  if ( err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid BC0 corrupts Entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time); 
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC0 does not corrupt Entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time); 
  end 
  @(negedge CLK);   
  write_mem(1,"","");
  @(negedge CLK);   
  read_mem("",10'd0,32'b0);
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 75;
  $display( "\n\n@%t TEST: %d --- Z handling of BC0 in Read Mode from port A --- \n\n", $time, test_num);
  @(negedge CLK)
  begin  
    ME = 1'b1;
    WE = 1'b0;
    D = 32'b0;
    ADR = 10'b0;
    BC0 = 1'bZ;
  end
  @(posedge CLK);
  #0.497;    
  if ( Q_BEHAV !== 32'bx)
  begin  
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC0 in Read Mode does not outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end    
  else  
  begin
    $display("\n\n@%t           Invalid BC0 in Read Mode outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end   
  @(negedge CLK);
   BC0 = 1'b0; 
   WE = 1'b0;
  @(negedge CLK); 
  read_mem(1,"",32'bx);
  if (err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid BC0 corrupts Entire memory in Read Mode \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC0 does not corrupt Entire memory in Read Mode\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end 
  @(negedge CLK);   
  write_mem(1,"","");
  @(negedge CLK);   
  read_mem("",10'd0,32'b0);
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 76;
  $display( "\n\n@%t TEST: %d --- Z handling of BC0 in Write Mode from port A --- \n\n", $time, test_num);
  
  @(negedge CLK)
  begin  
    ME = 1'b1;
    WE = 1'b1;
    D = 32'b0;
    ADR = 10'b0;
    BC0 = 1'bZ;
  end  
  @(posedge CLK);
  #0.497;
  if ( Q_BEHAV === 32'bx)
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC0 in Write Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid BC0 in Write Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLK);
   BC0 = 1'b0; 
   WE = 1'b0;
  @(negedge CLK); 
  read_mem(1,"",32'bx);
  if (err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid BC0 corrupts Entire memory in Write Mode \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC0 does not corrupt Entire memory in Write Mode\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end 
  @(negedge CLK);   
  write_mem(1,"","");
  @(negedge CLK);   
  read_mem("",10'd0,32'b0);
  @(negedge CLK);   
   no_tclk = 0;
`endif
  $display ("\n#######################################################################");
  test_num = 77;
  $display( "\n\n@%t TEST: %d --- X handling of BC1 with Memory Disabled from port A --- \n\n", $time, test_num);
  @(negedge CLK)
  begin  
    ME = 1'b0;
    ADR = 10'b0;
    BC1 = 1'bx;
  end    
  @(negedge CLK);
   BC1 = 1'b0; 
   WE = 1'b0;
  @(negedge CLK); 
  read_mem(1,"",32'bx);
  if ( err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid BC1 corrupts Entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time); 
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC1 does not corrupt Entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time); 
  end 
  @(negedge CLK);   
  write_mem(1,"","");
  @(negedge CLK);   
  read_mem("",10'd0,32'b0);
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 78;
  $display( "\n\n@%t TEST: %d --- X handling of BC1 in Read Mode from port A --- \n\n", $time, test_num);
  @(negedge CLK)
  begin  
    ME = 1'b1;
    WE = 1'b0;
    D = 32'b0;
    ADR = 10'b0;
    BC1 = 1'bx;
  end
  @(posedge CLK);
  #0.497;    
  if ( Q_BEHAV !== 32'bx)
  begin  
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC1 in Read Mode does not outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end    
  else  
  begin
    $display("\n\n@%t           Invalid BC1 in Read Mode outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end   
  @(negedge CLK);
   BC1 = 1'b0; 
   WE = 1'b0;
  @(negedge CLK); 
  read_mem(1,"",32'bx);
  if (err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid BC1 corrupts Entire memory in Read Mode \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC1 does not corrupt Entire memory in Read Mode\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end 
  @(negedge CLK);   
  write_mem(1,"","");
  @(negedge CLK);   
  read_mem("",10'd0,32'b0);
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 79;
  $display( "\n\n@%t TEST: %d --- X handling of BC1 in Write Mode from port A --- \n\n", $time, test_num);
  
  @(negedge CLK)
  begin  
    ME = 1'b1;
    WE = 1'b1;
    D = 32'b0;
    ADR = 10'b0;
    BC1 = 1'bx;
  end  
  @(posedge CLK);
  #0.497;
  if ( Q_BEHAV === 32'bx)
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC1 in Write Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid BC1 in Write Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLK);
   BC1 = 1'b0; 
   WE = 1'b0;
  @(negedge CLK); 
  read_mem(1,"",32'bx);
  if (err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid BC1 corrupts Entire memory in Write Mode \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC1 does not corrupt Entire memory in Write Mode\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end 
  @(negedge CLK);   
  write_mem(1,"","");
  @(negedge CLK);   
  read_mem("",10'd0,32'b0);
  @(negedge CLK);   

  $display ("\n#######################################################################");
  test_num = 80;
  $display( "\n\n@%t TEST: %d --- X handling of BC2 with Memory Disabled from port A --- \n\n", $time, test_num);
  @(negedge CLK)
  begin  
    ME = 1'b0;
    ADR = 10'b0;
    BC2 = 1'bx;
  end    
  @(negedge CLK);
   BC2 = 1'b0; 
   WE = 1'b0;
  @(negedge CLK); 
  read_mem(1,"",32'bx);
  if ( err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid BC2 corrupts Entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time); 
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC2 does not corrupt Entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time); 
  end 
  @(negedge CLK);   
  write_mem(1,"","");
  @(negedge CLK);   
  read_mem("",10'd0,32'b0);
  @(negedge CLK);   

  $display ("\n#######################################################################");
  test_num = 81;
  $display( "\n\n@%t TEST: %d --- X handling of BC2 in Read Mode from port A --- \n\n", $time, test_num);
  @(negedge CLK)
  begin  
    ME = 1'b1;
    WE = 1'b0;
    D = 32'b0;
    ADR = 10'b0;
    BC2 = 1'bx;
  end 
  @(posedge CLK);
  #0.497;    
  if ( Q_BEHAV !== 32'bx)
  begin  
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC2 in Read Mode does not outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end    
  else  
  begin
    $display("\n\n@%t           Invalid BC2 in Read Mode outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end   
  @(negedge CLK);
   BC2 = 1'b0; 
   WE = 1'b0;
  @(negedge CLK); 
  read_mem(1,"",32'bx);
  if (err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid BC2 corrupts Entire memory in Read Mode \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC2 does not corrupt Entire memory in Read Mode\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end 
  @(negedge CLK);   
  write_mem(1,"","");
  @(negedge CLK);   
  read_mem("",10'd0,32'b0);
  @(negedge CLK);


  $display ("\n#######################################################################");
  test_num = 82;
  $display( "\n\n@%t TEST: %d --- X handling of BC2 in Write Mode from port A --- \n\n", $time, test_num);
  
  @(negedge CLK)
  begin  
    ME = 1'b1;
    WE = 1'b1;
    D = 32'b0;
    ADR = 10'b0;
    BC2 = 1'bx;
  end   
  @(posedge CLK);
  #0.497;
  if ( Q_BEHAV === 32'bx)
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC2 in Write Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid BC2 in Write Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLK);
   BC2 = 1'b0; 
   WE = 1'b0;
  @(negedge CLK); 
  read_mem(1,"",32'bx);
  if (err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid BC2 corrupts Entire memory in Write Mode \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC2 does not corrupt Entire memory in Write Mode\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end 
  @(negedge CLK);   
  restart_clk = 1;
  @(negedge CLK);   
  write_mem(1,"","");
  @(negedge CLK);   
  read_mem("",10'd0,32'b0);
`ifndef VIRAGE_SUPPORT_FFV_SIM
  $display ("\n#######################################################################");
  test_num = 83;
  $display( "\n\n@%t TEST: %d --- Z handling of BC1 with Memory Disabled from port A --- \n\n", $time, test_num);
  @(negedge CLK)
  begin  
    ME = 1'b0;
    ADR = 10'b0;
    BC1 = 1'bZ;
  end    
  @(negedge CLK);
   BC1 = 1'b0; 
   WE = 1'b0;
  @(negedge CLK); 
  read_mem(1,"",32'bx);
  if ( err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid BC1 corrupts Entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time); 
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC1 does not corrupt Entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time); 
  end 
  @(negedge CLK);   
  write_mem(1,"","");
  @(negedge CLK);   
  read_mem("",10'd0,32'b0);
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 84;
  $display( "\n\n@%t TEST: %d --- Z handling of BC1 in Read Mode from port A --- \n\n", $time, test_num);
  @(negedge CLK)
  begin  
    ME = 1'b1;
    WE = 1'b0;
    D = 32'b0;
    ADR = 10'b0;
    BC1 = 1'bZ;
  end
  @(posedge CLK);
  #0.497;    
  if ( Q_BEHAV !== 32'bx)
  begin  
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC1 in Read Mode does not outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end    
  else  
  begin
    $display("\n\n@%t           Invalid BC1 in Read Mode outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end   
  @(negedge CLK);
   BC1 = 1'b0; 
   WE = 1'b0;
  @(negedge CLK); 
  read_mem(1,"",32'bx);
  if (err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid BC1 corrupts Entire memory in Read Mode \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC1 does not corrupt Entire memory in Read Mode\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end 
  @(negedge CLK);   
  write_mem(1,"","");
  @(negedge CLK);   
  read_mem("",10'd0,32'b0);
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 85;
  $display( "\n\n@%t TEST: %d --- Z handling of BC1 in Write Mode from port A --- \n\n", $time, test_num);
  
  @(negedge CLK)
  begin  
    ME = 1'b1;
    WE = 1'b1;
    D = 32'b0;
    ADR = 10'b0;
    BC1 = 1'bZ;
  end  
  @(posedge CLK);
  #0.497;
  if ( Q_BEHAV === 32'bx)
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC1 in Write Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid BC1 in Write Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLK);
   BC1 = 1'b0; 
   WE = 1'b0;
  @(negedge CLK); 
  read_mem(1,"",32'bx);
  if (err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid BC1 corrupts Entire memory in Write Mode \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC1 does not corrupt Entire memory in Write Mode\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end 
  @(negedge CLK);   
  write_mem(1,"","");
  @(negedge CLK);   
  read_mem("",10'd0,32'b0);
  @(negedge CLK);   

  $display ("\n#######################################################################");
  test_num = 86;
  $display( "\n\n@%t TEST: %d --- Z handling of BC2 with Memory Disabled from port A --- \n\n", $time, test_num);
  @(negedge CLK)
  begin  
    ME = 1'b0;
    ADR = 10'b0;
    BC2 = 1'bZ;
  end    
  @(negedge CLK);
   BC2 = 1'b0; 
   WE = 1'b0;
  @(negedge CLK); 
  read_mem(1,"",32'bx);
  if ( err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid BC2 corrupts Entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time); 
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC2 does not corrupt Entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time); 
  end 
  @(negedge CLK);   
  write_mem(1,"","");
  @(negedge CLK);   
  read_mem("",10'd0,32'b0);
  @(negedge CLK);   

  $display ("\n#######################################################################");
  test_num = 87;
  $display( "\n\n@%t TEST: %d --- Z handling of BC2 in Read Mode from port A --- \n\n", $time, test_num);
  @(negedge CLK)
  begin  
    ME = 1'b1;
    WE = 1'b0;
    D = 32'b0;
    ADR = 10'b0;
    BC2 = 1'bZ;
  end 
  @(posedge CLK);
  #0.497;    
  if ( Q_BEHAV !== 32'bx)
  begin  
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC2 in Read Mode does not outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end    
  else  
  begin
    $display("\n\n@%t           Invalid BC2 in Read Mode outputs X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end   
  @(negedge CLK);
   BC2 = 1'b0; 
   WE = 1'b0;
  @(negedge CLK); 
  read_mem(1,"",32'bx);
  if (err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid BC2 corrupts Entire memory in Read Mode \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC2 does not corrupt Entire memory in Read Mode\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end 
  @(negedge CLK);   
  write_mem(1,"","");
  @(negedge CLK);   
  read_mem("",10'd0,32'b0);
  @(negedge CLK);


  $display ("\n#######################################################################");
  test_num = 88;
  $display( "\n\n@%t TEST: %d --- Z handling of BC2 in Write Mode from port A --- \n\n", $time, test_num);
  
  @(negedge CLK)
  begin  
    ME = 1'b1;
    WE = 1'b1;
    D = 32'b0;
    ADR = 10'b0;
    BC2 = 1'bZ;
  end   
  @(posedge CLK);
  #0.497;
  if ( Q_BEHAV === 32'bx)
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC2 in Write Mode outputs X\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid BC2 in Write Mode does not output X \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLK);
   BC2 = 1'b0; 
   WE = 1'b0;
  @(negedge CLK); 
  read_mem(1,"",32'bx);
  if (err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid BC2 corrupts Entire memory in Write Mode \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end 
  else 
  begin   
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Invalid BC2 does not corrupt Entire memory in Write Mode\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end 
  @(negedge CLK);   
  restart_clk = 1;
  @(negedge CLK);   
  write_mem(1,"","");
  @(negedge CLK);   
  read_mem("",10'd0,32'b0);
`endif
  $display ("\n#######################################################################");
  test_num = 89;
  $display( "\n\n@%t TEST: %d --- BC1 & BC2 Assertion during Light Sleep Mode from port A --- \n\n", $time, test_num);
 for (bc0_i = 0; bc0_i < 2; bc0_i = bc0_i + 1 )
 begin
   BC0 = bc0_i;
 $display("@%t  ============= When BC0 = %d ================ ", $time, bc0_i);
  @(negedge CLK);   
   BC1 = 1'b0; 
   BC2 = 1'b0; 
   LS = 1'b1;
  @(negedge CLK);   
   BC1 = 1'b1; 
  @(negedge CLK);   
   LS = 1'b0;
  @(negedge CLK);   
   BC1 = 1'b0; 
  @(negedge CLK);   
  read_mem("",10'd0,32'bx);
  read_mem("",10'd1,32'bx);
  read_mem("",10'd2,32'bx);

  write_mem(1,"","");
  read_mem("",10'd0,32'b0);

  @(negedge CLK);
   BC1 = 1'b0;
   BC2 = 1'b0;
   LS = 1'b1;
  @(negedge CLK);
   BC2 = 1'b1;
  @(negedge CLK);   
   LS = 1'b0;
  @(negedge CLK);
   BC2 = 1'b0;
  @(negedge CLK);
  read_mem("",10'd0,32'bx);
  read_mem("",10'd1,32'bx);
  read_mem("",10'd2,32'bx);

  write_mem(1,"","");
  read_mem("",10'd0,32'b0);
 end // for (bc0_i = 0

  @(negedge CLK);   
   restart_clk = 1;
  @(negedge CLK);   





  write_mem(1,"","");
  @(negedge CLK);
  read_mem("",10'd0,32'b0);

  $display ("\n#######################################################################");
  test_num = 90;
  $display( "\n\n@%t TEST: %d ---  Test for bank assuming LSB or MSB of address is bank bit --- \n\n", $time, test_num);
  @(negedge CLK);
  ADR = 0;
  $display("@%t    Writing 0 at %b", $time,ADR);
  write_mem("",ADR, 32'd0);
  @(negedge CLK);
  ADR[0] = 1;
  $display("@%t    Writing 32'b11111111111111111111111111111111 at %b", $time,ADR);
  write_mem("",ADR, 32'b11111111111111111111111111111111);
  @(negedge CLK);
  ADR[9] = 1;
  $display("@%t    Writing 32'b10101010101010101010101010101010 at %b", $time,ADR);
  write_mem("",ADR, 32'b10101010101010101010101010101010);
  @(negedge CLK);
  ADR[0] = 0;
  $display("@%t    Writing 32'b01010101010101010101010101010101 at %b", $time,ADR);
  write_mem("",ADR, 32'b01010101010101010101010101010101);
  @(negedge CLK);
  ADR = 0;
  WE = 1'b0;
  $display("@%t    Reading 0 at %b", $time,ADR);
  @(negedge CLK);
  ADR[0] = 1;
  $display("@%t    Reading 32'b11111111111111111111111111111111 at %b", $time,ADR);
  @(negedge CLK);
  ADR[9] = 1;
  $display("@%t    Reading 32'b10101010101010101010101010101010 at %b", $time,ADR);
  @(negedge CLK);
  ADR[0] = 0;
  $display("@%t    Reading 32'b01010101010101010101010101010101 at %b", $time,ADR);
  @(negedge CLK);
  ME = 1'b0;
  $display("@%t    Disable memory enable for 4 cycles. Output should not change", $time);
  @(negedge CLK);
  ADR = 0;
  $display(" Address is %b now ",ADR);
  @(negedge CLK);
  ADR[0] = 1;
  $display(" Address is %b now ",ADR);
  @(negedge CLK);
  ADR[9] = 1;
  $display(" Address is %b now ",ADR);
  @(negedge CLK);
  ADR[0] = 0;
  $display(" Address is %b now ",ADR);
  @(negedge CLK);
  ME = 1'b1;

  $display( "\n\n@%t TEST:  --------- Timing tests start ---------- \n\n", $time);

  $display ("\n#######################################################################");
  test_num = 91;
  $display( "\n\n@%t TEST: %d --- Going to check Tcq & Tcqx with ME pin is high and WE pin is low   --- \n\n", $time, test_num);
    assist_initial("");
  write_mem("",10'd0, 32'd0);
  @(negedge CLK);
    ME = 1'b1;
  @(negedge CLK);
  ADR = 1;    
  @(negedge CLK)
  begin
    ME = 1'b1;
    WE = 1'b0;
    ADR = 0;    
    D = 0; 
  end
  @(posedge CLK)
  begin
    #0.388;
    if (Q_BEHAV !== 32'bx)
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Dataout hold after clock rises(Tcqx) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end   
    else 
    begin
      $display("\n\n@%t           Dataout hold after clock rises(Tcqx) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
   #0.10899999999999999 
    if (Q_BEHAV !== 32'b0)
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock to Dataout delay(Tcq) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end   
    else
    begin
      $display("\n\n@%t           Clock to Dataout delay(Tcq) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end  
  end
  @(negedge CLK);


  $display ("\n#######################################################################");
  test_num = 92;
  $display( "\n\n@%t TEST: %d --- Going to check Tcqrm0 & Tcqrm0x with ME pin is high and WE pin is low   --- \n\n", $time, test_num);
    assist_initial("");
  write_mem("",10'd0, 32'd0);
  @(negedge CLK);
    ME = 1'b1;
  @(negedge CLK);
  ADR = 1;    
  @(negedge CLK)
  begin
    ME = 1'b1;
    WE = 1'b0;
    ADR = 0;    
    D = 0; 
    RM = 4'd0;
    RME = 1'b1; 
    WA = 2'b11;
WPULSE = 3'b000;

  end
  @(posedge CLK)
  begin
    #1.0439999999999998;
    if (Q_BEHAV !== 32'bx)
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Dataout hold after clock rises(Tcqrm0x) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end   
    else 
    begin
      $display("\n\n@%t           Dataout hold after clock rises(Tcqrm0x) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
   #0.3420000000000001 
    if (Q_BEHAV !== 32'b0)
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock to Dataout delay(Tcqrm0) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end   
    else
    begin
      $display("\n\n@%t           Clock to Dataout delay(Tcqrm0) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end  
  end
  @(negedge CLK);
    RM = 4'd0;
    RME = 1'b0; 


  $display ("\n#######################################################################");
  test_num = 93;
  $display( "\n\n@%t TEST: %d --- Going to check Tcqrm1 & Tcqrm1x with ME pin is high and WE pin is low   --- \n\n", $time, test_num);
    assist_initial("");
  write_mem("",10'd0, 32'd0);
  @(negedge CLK);
    ME = 1'b1;
  @(negedge CLK);
  ADR = 1;    
  @(negedge CLK)
  begin
    ME = 1'b1;
    WE = 1'b0;
    ADR = 0;    
    D = 0; 
    RM = 4'd1;
    RME = 1'b1; 
    WA = 2'b11;
WPULSE = 3'b000;

  end
  @(posedge CLK)
  begin
    #0.903;
    if (Q_BEHAV !== 32'bx)
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Dataout hold after clock rises(Tcqrm1x) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end   
    else 
    begin
      $display("\n\n@%t           Dataout hold after clock rises(Tcqrm1x) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
   #0.402 
    if (Q_BEHAV !== 32'b0)
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock to Dataout delay(Tcqrm1) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end   
    else
    begin
      $display("\n\n@%t           Clock to Dataout delay(Tcqrm1) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end  
  end
  @(negedge CLK);
    RM = 4'd0;
    RME = 1'b0; 


  $display ("\n#######################################################################");
  test_num = 94;
  $display( "\n\n@%t TEST: %d --- Going to check Tcqrm2 & Tcqrm2x with ME pin is high and WE pin is low   --- \n\n", $time, test_num);
    assist_initial("");
  write_mem("",10'd0, 32'd0);
  @(negedge CLK);
    ME = 1'b1;
  @(negedge CLK);
  ADR = 1;    
  @(negedge CLK)
  begin
    ME = 1'b1;
    WE = 1'b0;
    ADR = 0;    
    D = 0; 
    RM = 4'd2;
    RME = 1'b1; 
    WA = 2'b10;
WPULSE = 3'b000;

  end
  @(posedge CLK)
  begin
    #0.557;
    if (Q_BEHAV !== 32'bx)
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Dataout hold after clock rises(Tcqrm2x) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end   
    else 
    begin
      $display("\n\n@%t           Dataout hold after clock rises(Tcqrm2x) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
   #0.1449999999999999 
    if (Q_BEHAV !== 32'b0)
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock to Dataout delay(Tcqrm2) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end   
    else
    begin
      $display("\n\n@%t           Clock to Dataout delay(Tcqrm2) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end  
  end
  @(negedge CLK);
    RM = 4'd0;
    RME = 1'b0; 


  $display ("\n#######################################################################");
  test_num = 95;
  $display( "\n\n@%t TEST: %d --- Going to check Tcqrm3 & Tcqrm3x with ME pin is high and WE pin is low   --- \n\n", $time, test_num);
    assist_initial("");
  write_mem("",10'd0, 32'd0);
  @(negedge CLK);
    ME = 1'b1;
  @(negedge CLK);
  ADR = 1;    
  @(negedge CLK)
  begin
    ME = 1'b1;
    WE = 1'b0;
    ADR = 0;    
    D = 0; 
    RM = 4'd3;
    RME = 1'b1; 
    WA = 2'b10;
WPULSE = 3'b000;

  end
  @(posedge CLK)
  begin
    #0.388;
    if (Q_BEHAV !== 32'bx)
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Dataout hold after clock rises(Tcqrm3x) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end   
    else 
    begin
      $display("\n\n@%t           Dataout hold after clock rises(Tcqrm3x) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
   #0.10899999999999999 
    if (Q_BEHAV !== 32'b0)
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock to Dataout delay(Tcqrm3) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end   
    else
    begin
      $display("\n\n@%t           Clock to Dataout delay(Tcqrm3) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end  
  end
  @(negedge CLK);
    RM = 4'd0;
    RME = 1'b0; 

 

  $display ("\n#######################################################################");
  test_num = 96;
  $display( "\n\n@%t TEST: %d --- Going to check Tcl, Tch & Tcc violations --- \n\n", $time, test_num);
  @(negedge CLK);
    assist_initial("");
  @(negedge CLK)
  begin
    ME = 1'b0;
    WE = 1'b0;
    ADR = 0;    
    D = 0; 
  end
   for (vec= 1; vec <=7; vec= vec+1)
   begin
     $display ("Creating patterns for Tch violations \n %t", $time);
     // Tch violations
       create_pattern(vec,"Tch");
       if ( vec == 7 )
         check_output(1,1,"Tch");
       else
         check_output(0,0,"Tch");
   end
   for (vec= 1; vec <=7; vec= vec+1)
   begin
     $display ("Creating patterns for Tcl violations \n %t", $time);
     // Tcl violations
     if ( vec != 6 )
     begin
       create_pattern(vec,"Tcl");
       if ( vec == 5 || vec == 7 )
         check_output(1,1,"Tcl");
       else
         check_output(0,0,"Tcl");
     end
   end
   for (vec= 1; vec <=7; vec= vec+1)
   begin
     $display ("Creating patterns for Tcx violations \n %t", $time);
     // Tcx violations
     if ( vec != 6 )
     begin
       create_pattern(vec,"Tcx");
       if ( vec == 7 )
         check_output(1,1,"Tcx");
       else
         check_output(0,0,"Tcx");
     end
   end

// loop start for Tcc 
  @(negedge CLK);
    assist_initial("");

   for (j= 0; j <=6; j= j+1)
   begin
     if (j == 0)
     begin
       assign param_name = "Tccn_rmezo";
       assign param_val_tcc = 0.566;
       @(negedge CLK);
       RME = 1'b0;
     end
     if (j == 1)
     begin
       assign param_name = "Tccn_rm0";
       assign param_val_tcc = 2.094;
       @(negedge CLK);
       RME = 1'b1;
       RM = 4'd0;
       WA = 2'b11;
WPULSE = 3'b000;

     end
     if (j == 2)
     begin
       assign param_name = "Tccn_rm1";
       assign param_val_tcc = 1.305;
       @(negedge CLK);
       RME = 1'b1;
       RM = 4'd1;
       WA = 2'b11;
WPULSE = 3'b000;

     end
     if (j == 3)
     begin
       assign param_name = "Tccn_rm2";
       assign param_val_tcc = 0.771;
       @(negedge CLK);
       RME = 1'b1;
       RM = 4'd2;
       WA = 2'b10;
WPULSE = 3'b000;

     end
     if (j == 4)
     begin
       assign param_name = "Tccn_rm3";
       assign param_val_tcc = 0.566;
       @(negedge CLK);
       RME = 1'b1;
       RM = 4'd3;
       WA = 2'b10;
WPULSE = 3'b000;

     end
     if (j == 5)
     begin
       assign param_name = "Tccn_rm4";
       assign param_val_tcc = 7777.000;
       @(negedge CLK);
       RME = 1'b1;
       RM = 4'd4;
       WA = 2'b01;
WPULSE = 3'b000;

     end
     if (j == 6)
     begin
       assign param_name = "Tccn_rm5";
       assign param_val_tcc = 7777.000;
       @(negedge CLK);
       RME = 1'b1;
       RM = 4'd5;
       WA = 2'b01;
WPULSE = 3'b000;

     end
     for (vec= 1; vec <=7; vec= vec+1)
     begin
       $display ("Creating patterns for %s negedge to negedge violations \n %t j is %d vec is %d", param_name, $time, j, vec);
       // Tcc violations
       if ( vec != 5 && vec != 6 )
       begin
         create_pattern(vec,param_name);
         if ( vec == 7 )
           check_output(1,1,param_name);
         else
           check_output(0,0,param_name);
       end
     end
   end

  @(negedge CLK);
    assist_initial("");

   for (j= 0; j <=6; j= j+1)
   begin
     if (j == 0)
     begin
       assign param_name = "Tccp_rmezo";
       assign param_val_tcc = 0.566;
       @(negedge CLK);
       RME = 1'b0;
     end
     if (j == 1)
     begin
       assign param_name = "Tccp_rm0";
       assign param_val_tcc = 2.094;
       @(negedge CLK);
       RME = 1'b1;
       RM = 4'd0;
       WA = 2'b11;
WPULSE = 3'b000;

     end
     if (j == 2)
     begin
       assign param_name = "Tccp_rm1";
       assign param_val_tcc = 1.305;
       @(negedge CLK);
       RME = 1'b1;
       RM = 4'd1;
       WA = 2'b11;
WPULSE = 3'b000;

     end
     if (j == 3)
     begin
       assign param_name = "Tccp_rm2";
       assign param_val_tcc = 0.771;
       @(negedge CLK);
       RME = 1'b1;
       RM = 4'd2;
       WA = 2'b10;
WPULSE = 3'b000;

     end
     if (j == 4)
     begin
       assign param_name = "Tccp_rm3";
       assign param_val_tcc = 0.566;
       @(negedge CLK);
       RME = 1'b1;
       RM = 4'd3;
       WA = 2'b10;
WPULSE = 3'b000;

     end
     if (j == 5)
     begin
       assign param_name = "Tccp_rm4";
       assign param_val_tcc = 7777.000;
       @(negedge CLK);
       RME = 1'b1;
       RM = 4'd4;
       WA = 2'b01;
WPULSE = 3'b000;

     end
     if (j == 6)
     begin
       assign param_name = "Tccp_rm5";
       assign param_val_tcc = 7777.000;
       @(negedge CLK);
       RME = 1'b1;
       RM = 4'd5;
       WA = 2'b01;
WPULSE = 3'b000;

     end
     for (vec= 1; vec <=7; vec= vec+1)
     begin
       $display ("Creating patterns for Tcc posedge to posedge violations \n %t", $time);
       // Tcc violations
       if ( vec != 6 )
       begin
         create_pattern(vec,param_name);
         if (  vec == 7 )
             check_output(1,1,param_name);
         else
           check_output(0,0,param_name);
       end
     end
   end
  @(negedge CLK);
    assist_initial("");
    @(negedge CLK);
    RME = 1'b0;
    RM = 4'd0;
  $display ("\n#######################################################################");
  test_num = 97;
  $display( "\n\n@%t TEST: %d --- Going to check Tch, Tcl & Tcc violations of CLK --- \n\n", $time, test_num);
  write_mem("",10'd0, 32'd0);
  read_mem("",10'd0,32'b0);
  restart_clk = 1'b1;
  @(negedge CLK)
  begin
    ME = 1'b1;
    WE = 1'b0;
    ADR = 0;    
    D = 0; 
  end
  @(negedge CLK);
  no_clk = 1;
  #7790.0;
  CLK = 1'b1;
  #0.06999999999999999;
  CLK = 1'b0;
    #0.497;
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Clock high pulse width(Tch) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end   
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock high pulse width(Tch) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end   
  restart_clk = 1'b1;
  @(negedge CLK);
    ME = 1'b0;
  read_mem(1,"",32'bx);
  if ( err_cnt == 0 )
  begin
    $display("\n\n@%t           Clock high pulse width(Tch) violation corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock high pulse width(Tch) violation does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  write_mem(1,"","");
   read_mem("",10'd0,32'b0);
  @(negedge CLK);
  @(negedge CLK)
    no_clk = 1;
    #7790.0;
    CLK = 1'b1;
    #0.42399999999999993;
    CLK = 1'b0;
    #0.142;
    CLK = 1'b1;
    #0.497;
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Clock low pulse width(Tcl) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock low pulse width(Tcl) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  restart_clk = 1'b1;
  @(negedge CLK);
    ME = 1'b0;
  read_mem(1,"",32'bx);
  if ( err_cnt == 0 )
  begin 
    $display("\n\n@%t           Clock low pulse width(Tcl) violation corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock low pulse width(Tcl) violation does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  $display ("\n#######################################################################");
  test_num = 98;
  $display( "\n\n@%t TEST: %d --- Going to check Tccrm0 violations of CLK   --- \n\n", $time, test_num);
  write_mem(1,"","");
   read_mem("",10'd0,32'b0);
  @(negedge CLK);
    RME = 1'b1;
    WA = 2'b11;
WPULSE = 3'b000;

  RM = 4'd0;
  @(negedge CLK);
    no_clk = 1;
    #7790.0;
    CLK = 1'b1;
    #1.9509999999999998;
    CLK = 1'b0;
    #0.143;
    CLK = 1'b1;
    #1.95;
    CLK = 1'b0;
    #7790.0;
    CLK = 1'b1;
    #1.386;
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Clock cycle time(Tccrm0) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm0) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  restart_clk = 1'b1;
  @(negedge CLK);
    read_mem(1,"",32'bx);
    if (err_cnt == 0)
    begin    
      $display("\n\n@%t           Clock cycle time(Tccrm0) violation corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm0) violation does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end    
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 99;
  $display( "\n\n@%t TEST: %d --- Going to check Tccrm1 violations of CLK   --- \n\n", $time, test_num);
  write_mem(1,"","");
   read_mem("",10'd0,32'b0);
  @(negedge CLK);
    RME = 1'b1;
    WA = 2'b11;
WPULSE = 3'b000;

  RM = 4'd1;
  @(negedge CLK);
    no_clk = 1;
    #7790.0;
    CLK = 1'b1;
    #1.162;
    CLK = 1'b0;
    #0.143;
    CLK = 1'b1;
    #1.161;
    CLK = 1'b0;
    #7790.0;
    CLK = 1'b1;
    #1.305;
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Clock cycle time(Tccrm1) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm1) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  restart_clk = 1'b1;
  @(negedge CLK);
    read_mem(1,"",32'bx);
    if (err_cnt == 0)
    begin    
      $display("\n\n@%t           Clock cycle time(Tccrm1) violation corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm1) violation does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end    
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 100;
  $display( "\n\n@%t TEST: %d --- Going to check Tccrm2 violations of CLK   --- \n\n", $time, test_num);
  write_mem(1,"","");
   read_mem("",10'd0,32'b0);
  @(negedge CLK);
    RME = 1'b1;
    WA = 2'b10;
WPULSE = 3'b000;

  RM = 4'd2;
  @(negedge CLK);
    no_clk = 1;
    #7790.0;
    CLK = 1'b1;
    #0.628;
    CLK = 1'b0;
    #0.143;
    CLK = 1'b1;
    #0.627;
    CLK = 1'b0;
    #7790.0;
    CLK = 1'b1;
    #0.702;
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Clock cycle time(Tccrm2) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm2) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  restart_clk = 1'b1;
  @(negedge CLK);
    read_mem(1,"",32'bx);
    if (err_cnt == 0)
    begin    
      $display("\n\n@%t           Clock cycle time(Tccrm2) violation corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm2) violation does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end    
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 101;
  $display( "\n\n@%t TEST: %d --- Going to check Tccrm3 violations of CLK   --- \n\n", $time, test_num);
  write_mem(1,"","");
   read_mem("",10'd0,32'b0);
  @(negedge CLK);
    RME = 1'b1;
    WA = 2'b10;
WPULSE = 3'b000;

  RM = 4'd3;
  @(negedge CLK);
    no_clk = 1;
    #7790.0;
    CLK = 1'b1;
    #0.42299999999999993;
    CLK = 1'b0;
    #0.143;
    CLK = 1'b1;
    #0.42199999999999993;
    CLK = 1'b0;
    #7790.0;
    CLK = 1'b1;
    #0.497;
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Clock cycle time(Tccrm3) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm3) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  restart_clk = 1'b1;
  @(negedge CLK);
    read_mem(1,"",32'bx);
    if (err_cnt == 0)
    begin    
      $display("\n\n@%t           Clock cycle time(Tccrm3) violation corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm3) violation does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end    
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 102;
  $display( "\n\n@%t TEST: %d --- Going to check Tccrm4 violations of CLK   --- \n\n", $time, test_num);
  write_mem(1,"","");
   read_mem("",10'd0,32'b0);
  @(negedge CLK);
    RME = 1'b1;
    WA = 2'b01;
WPULSE = 3'b000;

  RM = 4'd4;
  @(negedge CLK);
    no_clk = 1;
    #7790.0;
    CLK = 1'b1;
    #7776.857;
    CLK = 1'b0;
    #0.143;
    CLK = 1'b1;
    #7776.856;
    CLK = 1'b0;
    #7790.0;
    CLK = 1'b1;
    #7777.001;
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Clock cycle time(Tccrm4) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm4) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  restart_clk = 1'b1;
  @(negedge CLK);
    read_mem(1,"",32'bx);
    if (err_cnt == 0)
    begin    
      $display("\n\n@%t           Clock cycle time(Tccrm4) violation corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm4) violation does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end    
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 103;
  $display( "\n\n@%t TEST: %d --- Going to check Tccrm5 violations of CLK   --- \n\n", $time, test_num);
  write_mem(1,"","");
   read_mem("",10'd0,32'b0);
  @(negedge CLK);
    RME = 1'b1;
    WA = 2'b01;
WPULSE = 3'b000;

  RM = 4'd5;
  @(negedge CLK);
    no_clk = 1;
    #7790.0;
    CLK = 1'b1;
    #7776.857;
    CLK = 1'b0;
    #0.143;
    CLK = 1'b1;
    #7776.856;
    CLK = 1'b0;
    #7790.0;
    CLK = 1'b1;
    #7777.001;
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Clock cycle time(Tccrm5) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm5) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  restart_clk = 1'b1;
  @(negedge CLK);
    read_mem(1,"",32'bx);
    if (err_cnt == 0)
    begin    
      $display("\n\n@%t           Clock cycle time(Tccrm5) violation corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm5) violation does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end    
  @(negedge CLK);
  write_mem(1,"","");
   read_mem("",10'd0,32'b0);
  @(negedge CLK);
    RME = 1'b1;
    WA = 2'b01;
WPULSE = 3'b000;

  RM = 4'd6;
  @(negedge CLK);
    no_clk = 1;
    #7790.0;
    CLK = 1'b1;
    #7776.857;
    CLK = 1'b0;
    #0.143;
    CLK = 1'b1;
    #7776.856;
    CLK = 1'b0;
    #7790.0;
    CLK = 1'b1;
    #7777.001;
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Clock cycle time(Tccrm5) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm5) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  restart_clk = 1'b1;
  @(negedge CLK);
    read_mem(1,"",32'bx);
    if (err_cnt == 0)
    begin    
      $display("\n\n@%t           Clock cycle time(Tccrm5) violation corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm5) violation does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end    
  @(negedge CLK);
  write_mem(1,"","");
   read_mem("",10'd0,32'b0);
  @(negedge CLK);
    RME = 1'b1;
    WA = 2'b01;
WPULSE = 3'b000;

  RM = 4'd7;
  @(negedge CLK);
    no_clk = 1;
    #7790.0;
    CLK = 1'b1;
    #7776.857;
    CLK = 1'b0;
    #0.143;
    CLK = 1'b1;
    #7776.856;
    CLK = 1'b0;
    #7790.0;
    CLK = 1'b1;
    #7777.001;
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Clock cycle time(Tccrm5) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm5) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  restart_clk = 1'b1;
  @(negedge CLK);
    read_mem(1,"",32'bx);
    if (err_cnt == 0)
    begin    
      $display("\n\n@%t           Clock cycle time(Tccrm5) violation corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm5) violation does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end    
  @(negedge CLK);
  @(negedge CLK);
    assist_initial("");
    RME = 1'b0;
  @(negedge CLK);
  write_mem(1,"","");
   read_mem("",10'd0,32'b0);
  @(negedge CLK)
    no_clk = 1;
    #7790.0;
    CLK = 1'b1;
    #0.42299999999999993;
    CLK = 1'b0;
    #0.143;
    CLK = 1'b1;
    #0.42199999999999993;
    CLK = 1'b0;
    #0.497
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Clock cycle time(Tcc) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end   
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tcc) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end   
   restart_clk = 1'b1;
  read_mem(1,"",32'bx);
  if ( err_cnt == 0 )
  begin    
    $display("\n\n@%t           Clock cycle time(Tcc) violation corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tcc) violation does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end    
  #10;
  write_mem(1,"","");
  read_mem("",10'd0,32'b0);
  @(negedge CLK);
  ADR = 0;
  $display ("\n#######################################################################");
  test_num = 104;
  $display( "\n\n@%t TEST: %d --- Going to check first valid write after Tcl, Tch & Tcc violations --- \n\n", $time, test_num);
  @(negedge CLK)
  begin
    ME = 1'b1;
    WE = 1'b0;
    ADR = 0;    
    D = 0; 
  end
  @(negedge CLK);
  @(posedge CLK)
  begin
    no_clk = 1;
    #0.06999999999999999;
    CLK = 1'b0;
    WE = 1'b1;
    ADR = 0;    
    D = 0; 
    #0.497;
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Clock high pulse width(Tch) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end   
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock high pulse width(Tch) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end   
  end
  #7790.0;
  CLK = 1'b1;
  #7790.0;
  CLK = 1'b0;
    WE = 1'b0;
    ADR = 0;
  #7790.0;
  CLK = 1'b1;
    #0.497;
  if (Q_BEHAV === 32'b0)
  begin
    $display("\n\n@%t           first valid write after Clock high pulse width(Tch) violation successfull \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: first valid write after Clock high pulse width(Tch) violation unsuccessfull\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  restart_clk = 1'b1;
  write_mem(1,"","");
 
  @(negedge CLK);
  @(negedge CLK)
  begin
    no_clk = 1;
    #25;
    CLK = 1'b1;
    #0.42399999999999993;
    CLK = 1'b0;
    #0.142;
    CLK = 1'b1;
    #7790.0;
    CLK = 1'b0;
    WE = 1'b1;
    ADR = 0;
    D = 0;
    #7790.0;
    CLK = 1'b1;
    #0.497;
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Clock low pulse width(Tcl) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock low pulse width(Tcl) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  end
  #7790.0;
  CLK = 1'b0;
    WE = 1'b0;
    ADR = 0;
  #7790.0;
  CLK = 1'b1;
    #0.497;
  if (Q_BEHAV === 32'b0)
  begin 
    $display("\n\n@%t           first valid write after Clock low pulse width(Tcl) violation successfull \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: first valid write after Clock low pulse width(Tcl) violation unsuccessfull\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  restart_clk = 1'b1;
  write_mem(1,"","");
  read_mem("",10'd0,32'b0);
 
  @(negedge CLK)
  begin
    no_clk = 1;
    #25;
    CLK = 1'b1;
    #0.42299999999999993;
    CLK = 1'b0;
    #0.143;
    CLK = 1'b1;
    #0.42199999999999993;
    CLK = 1'b0;
    WE = 1'b1;
    ADR = 0;
    D = 0;
   #7790.0;
   CLK = 1'b1;
    #0.497;
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Clock cycle time(Tcc) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end   
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tcc) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end   
  end
  #7790.0;
  CLK = 1'b0;
  WE = 1'b0;
  ADR = 0;
  #7790.0;
  CLK = 1'b1;
    #0.497;
  if (Q_BEHAV === 32'b0)
  begin
    $display("\n\n@%t           first valid write after Clock cycle time(Tcc) violation successfull \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: first valid write after Clock cycle time(Tcc) violation unsuccessfull\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end    
  restart_clk = 1'b1;
  write_mem(1,"","");
  read_mem("",10'd0,32'b0);
  @(negedge CLK);
  ADR = 0;
  $display ("\n#######################################################################");
  test_num = 105;
  $display( "\n\n@%t TEST: %d --- Going to check Tchtest1 && Tcltest1 violations of CLK --- \n\n", $time, test_num);
  write_mem("",10'd0, 32'd0);
  read_mem("",10'd0, 32'd0);
  restart_clk = 1'b1;
  @(negedge CLK);
  @(negedge CLK)
  begin
    ME = 1'b1;
    #2.0949999999999998;
    TEST1 = 1'b1;
    WE = 1'b0;
    D = 0; 
    ADR = 0;    
  end
  @(negedge CLK);
  no_clk = 1;
  #7790.0;
  CLK = 1'b1;
  #1.3840000000000001;
  CLK = 1'b0;
    #0.234;
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Clock high pulse width(Tchtest1) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end   
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock high pulse width(Tchtest1) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end   
  restart_clk = 1'b1;
  read_mem(1,"",32'bx);
  if ( err_cnt == 0 )
  begin
    $display("\n\n@%t           Clock high pulse width(Tchtest1) violation corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock high pulse width(Tchtest1) violation does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLK);
  #2.0949999999999998;
  TEST1 = 1'b0;
  write_mem(1,"","");
  read_mem("",10'd0, 32'd0);
  @(negedge CLK);
  @(negedge CLK);
  #2.0949999999999998;
  TEST1 = 1'b1;
  @(negedge CLK);
  no_clk = 1;
  #7790.0;
  CLK = 1'b1;
  #0.33399999999999996;
  CLK = 1'b0;
  #0.232;
  CLK = 1'b1;
    #0.186;
    if (Q_BEHAV === 32'bx)
    begin
      $display("\n\n@%t           Clock low pulse width(Tcltest1) is modelled correctly \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock low pulse width(Tcltest1) is not modelled correctly\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
  restart_clk = 1'b1;
  read_mem(1,"",32'bx);
  if ( err_cnt == 0 )
  begin 
    $display("\n\n@%t           Clock low pulse width(Tcltest1) violation corrupts entire memory \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: Clock low pulse width(Tcltest1) violation does not corrupt entire memory\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLK);
  #2.0949999999999998;
  TEST1 = 1'b0;
  write_mem(1,"","");
  read_mem("",10'd0, 32'd0);
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 106;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on ADR in Read mode  --- \n\n", $time, test_num);
  setuphold("ADR","Tac",$realtobits(0.094),0,0,0,2'b01,2'b00,2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 107;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on ADR in Read mode  --- \n\n", $time, test_num);
  setuphold("ADR","Tac",$realtobits(0.094),0,1,0,2'b10,2'b01,2'b11);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 108;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on ADR in Read mode  --- \n\n", $time, test_num);
  setuphold("ADR","Tcax",$realtobits(0.107),1,0,0,2'b01,2'b00,2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 109;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on ADR in Read mode  --- \n\n", $time, test_num);
  setuphold("ADR","Tcax",$realtobits(0.107),1,1,0,2'b10,2'b01,2'b11);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 110;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on ADR in Write mode  --- \n\n", $time, test_num);
  setuphold("ADR","Tac",$realtobits(0.094),0,0,1,2'b01,2'b00,2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 111;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on ADR in Write mode  --- \n\n", $time, test_num);
  setuphold("ADR","Tac",$realtobits(0.094),0,1,1,2'b10,2'b00,2'b11);
  @(negedge CLK);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 112;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on ADR in Write mode  --- \n\n", $time, test_num);
  setuphold("ADR","Tcax",$realtobits(0.107),1,0,1,2'b01,2'b00,2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 113;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on ADR in Write mode  --- \n\n", $time, test_num);
  setuphold("ADR","Tcax",$realtobits(0.107),1,1,1,2'b10,2'b00,2'b11);
  @(negedge CLK);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 114;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on LS when BC0 = 0 in Write mode  --- \n\n", $time, test_num);
  setuphold("LS","Tfls0c",$realtobits(0.622),0,0,1,2'b01,2'b00,2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 115;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on LS when BC0 = 0 in Write mode  --- \n\n", $time, test_num);
  setuphold("LS","Tfls0c",$realtobits(0.622),0,1,1,2'b10,2'b01,2'b11);
  $display ("\n#######################################################################");
  test_num = 116;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on LS when BC0 = 0 in Read mode  --- \n\n", $time, test_num);
  setuphold("LS","Tfls0c",$realtobits(0.622),0,0,0,2'b01,2'b00,2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 117;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on LS when BC0 = 0 in Read mode  --- \n\n", $time, test_num);
  setuphold("LS","Tfls0c",$realtobits(0.622),0,1,0,2'b10,2'b01,2'b11);

  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 118;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on LS when BC0 = 1 in Write mode  --- \n\n", $time, test_num);
  setuphold("LS","Tfls1c",$realtobits(0.352),0,0,1,2'b01,2'b00,2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 119;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on LS when BC0 = 1 in Write mode  --- \n\n", $time, test_num);
  setuphold("LS","Tfls1c",$realtobits(0.352),0,1,1,2'b10,2'b01,2'b11);
  $display ("\n#######################################################################");
  test_num = 120;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on LS when BC0 = 1 in Read mode  --- \n\n", $time, test_num);
  setuphold("LS","Tfls1c",$realtobits(0.352),0,0,0,2'b01,2'b00,2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 121;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on LS when BC0 = 1 in Read mode  --- \n\n", $time, test_num);
  setuphold("LS","Tfls1c",$realtobits(0.352),0,1,0,2'b10,2'b01,2'b11);
  $display ("\n#######################################################################");
  test_num = 122;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on LS when BC0 = 0 in Write mode  --- \n\n", $time, test_num);
  setuphold("LS","Tlsx",$realtobits(0.100),1,0,1,2'b01,2'b00,2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 123;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on LS when BC0 = 0 in Write mode  --- \n\n", $time, test_num);
  setuphold("LS","Tlsx",$realtobits(0.100),1,1,1,2'b10,2'b01,2'b11);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 124;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on LS when BC0 = 0 in Read mode  --- \n\n", $time, test_num);
  setuphold("LS","Tlsx",$realtobits(0.100),1,0,0,2'b01,2'b00,2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 125;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on LS when BC0 = 0 in Read mode  --- \n\n", $time, test_num);
  setuphold("LS","Tlsx",$realtobits(0.100),1,1,0,2'b10,2'b01,2'b11);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 126;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on LS when BC0 = 1 in Write mode  --- \n\n", $time, test_num);
  setuphold("LS_BC0_1","Tlsx",$realtobits(0.100),1,0,1,2'b01,2'b00,2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 127;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on LS when BC0 = 1 in Write mode  --- \n\n", $time, test_num);
  setuphold("LS_BC0_1","Tlsx",$realtobits(0.100),1,1,1,2'b10,2'b01,2'b11);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 128;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on LS when BC0 = 1 in Read mode  --- \n\n", $time, test_num);
  setuphold("LS_BC0_1","Tlsx",$realtobits(0.100),1,0,0,2'b01,2'b00,2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 129;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on LS when BC0 = 1 in Read mode  --- \n\n", $time, test_num);
  setuphold("LS_BC0_1","Tlsx",$realtobits(0.100),1,1,0,2'b10,2'b01,2'b11);
  @(negedge CLK);


  @(negedge CLK);
  write_mem(1,"","");
  read_mem("",10'd0,32'b0);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 130;
  $display( "\n\n@%t TEST: %d --- Synchronous CLK & ADR events in Read mode  --- \n\n", $time, test_num);
  syncevent("ADR",0,2'b10,2'b01,2'b11);
  @(negedge CLK); 
  $display ("\n#######################################################################");
  test_num = 131;
  $display( "\n\n@%t TEST: %d --- Synchronous CLK & ADR events in Write mode  --- \n\n", $time, test_num); 
  syncevent("ADR",1,2'b10,2'b00,2'b11); 
  
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 132;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on ME in Read mode  --- \n\n", $time, test_num);
  setuphold("ME","Tmc",$realtobits(0.130),0,0,0,2'b01,2'b00,2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 133;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on ME in Read mode  --- \n\n", $time, test_num);
  setuphold("ME","Tmc",$realtobits(0.130),0,1,0,2'b10,2'b01,2'b11);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 134;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on ME in Read mode  --- \n\n", $time, test_num);
  setuphold("ME","Tcmx",$realtobits(0.049),1,0,0,2'b01,2'b00,2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 135;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on ME in Read mode  --- \n\n", $time, test_num);
  setuphold("ME","Tcmx",$realtobits(0.049),1,1,0,2'b10,2'b01,2'b11);
  @(negedge CLK);
  write_mem(1,"","");
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 136;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on ME in Read mode  during LS high --- \n\n", $time, test_num);
  setuphold("ME_LS_H","Tmc",$realtobits(0.130),0,0,0,2'b01,2'b00,2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 137;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on ME in Read mode  during LS high --- \n\n", $time, test_num);
  setuphold("ME_LS_H","Tmc",$realtobits(0.130),0,1,0,2'b10,2'b01,2'b11);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 138;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on ME in Read mode  during LS high --- \n\n", $time, test_num);
  setuphold("ME_LS_H","Tcmx",$realtobits(0.049),1,0,0,2'b01,2'b00,2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 139;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on ME in Read mode  during LS high --- \n\n", $time, test_num);
  setuphold("ME_LS_H","Tcmx",$realtobits(0.049),1,1,0,2'b10,2'b01,2'b11);
  @(negedge CLK);
  write_mem(1,"","");
  @(negedge CLK);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 140;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on ME in Read mode  when ADR is X --- \n\n", $time, test_num);
  setuphold("ME_X","Tmc",$realtobits(0.130),0,1,0,2'b10,2'b01,2'b11);
  @(negedge CLK);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 141;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on ME in Read mode  when ADR is X --- \n\n", $time, test_num);
  setuphold("ME_X","Tcmx",$realtobits(0.049),1,1,0,2'b10,2'b01,2'b11);
  @(negedge CLK);
  write_mem(1,"","");
  $display ("\n#######################################################################");
  test_num = 142;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on ME in Write mode  --- \n\n", $time, test_num);
  setuphold("ME","Tmc",$realtobits(0.130),0,0,1,2'b01,2'b00,2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 143;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on ME in Write mode  --- \n\n", $time, test_num);
  setuphold("ME","Tmc",$realtobits(0.130),0,1,1,2'b10,2'b00,2'b11);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 144;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on ME in Write mode  --- \n\n", $time, test_num);
  setuphold("ME","Tcmx",$realtobits(0.049),1,0,1,2'b01,2'b00,2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 145;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on ME in Write mode  --- \n\n", $time, test_num);
  setuphold("ME","Tcmx",$realtobits(0.049),1,1,1,2'b10,2'b00,2'b11);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 146;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on ME in Write mode  during LS high --- \n\n", $time, test_num);
  setuphold("ME_LS_H","Tmc",$realtobits(0.130),0,0,1,2'b01,2'b00,2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 147;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on ME in Write mode  during LS high --- \n\n", $time, test_num);
  setuphold("ME_LS_H","Tmc",$realtobits(0.130),0,1,1,2'b10,2'b00,2'b11);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 148;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on ME in Write mode  during LS high --- \n\n", $time, test_num);
  setuphold("ME_LS_H","Tcmx",$realtobits(0.049),1,0,1,2'b01,2'b00,2'b01);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 149;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on ME in Write mode  during LS high --- \n\n", $time, test_num);
  setuphold("ME_LS_H","Tcmx",$realtobits(0.049),1,1,1,2'b10,2'b00,2'b11);
  @(negedge CLK);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 150;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on ME in Write mode  when ADR is X --- \n\n", $time, test_num);
  setuphold("ME_X","Tmc",$realtobits(0.130),0,1,1,2'b01,2'b00,2'b11);
  @(negedge CLK);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 151;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on ME in Write mode  when ADR is X --- \n\n", $time, test_num);
  setuphold("ME_X","Tcmx",$realtobits(0.049),1,1,1,2'b01,2'b00,2'b11);
  @(negedge CLK);

  @(negedge CLK); 
  $display ("\n#######################################################################");
  test_num = 152;
  $display( "\n\n@%t TEST: %d --- Synchronous CLK & ME events in Read mode  --- \n\n", $time, test_num); 
  syncevent("ME",0,2'b10,2'b01,2'b11); 
  @(negedge CLK);  
  $display ("\n#######################################################################");
  test_num = 153;
  $display( "\n\n@%t TEST: %d --- Synchronous CLK & ME events in Write mode  --- \n\n", $time, test_num);  
  syncevent("ME",1,2'b10,2'b00,2'b11);  
  @(negedge CLK);  
   
  $display ("\n#######################################################################");
  test_num = 154;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on D in Read mode  --- \n\n", $time, test_num);
  setuphold("D","Tdc",$realtobits(0.054),0,0,0,2'b00,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 155;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on D in Read mode  --- \n\n", $time, test_num);
  setuphold("D","Tdc",$realtobits(0.054),0,1,0,2'b00,2'b00,2'b00);
  $display ("\n#######################################################################");
  test_num = 156;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on D in Write mode  When Write Enable Inactive --- \n\n", $time, test_num);
  setuphold("D_WE0","Tdc",$realtobits(0.054),0,1,0,2'b00,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 157;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on D in Read mode  --- \n\n", $time, test_num);
  setuphold("D","Tcdx",$realtobits(0.126),1,0,0,2'b00,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 158;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on D in Read mode  --- \n\n", $time, test_num);
  setuphold("D","Tcdx",$realtobits(0.126),1,1,0,2'b00,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 159;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on D in Write mode  When Write Enable Inactive --- \n\n", $time, test_num);
  setuphold("D_WE0","Tcdx",$realtobits(0.126),1,1,0,2'b00,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 160;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on D in Write mode  --- \n\n", $time, test_num);
  setuphold("D","Tdc",$realtobits(0.054),0,0,1,2'b01,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 161;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on D in Write mode  --- \n\n", $time, test_num);
  setuphold("D","Tdc",$realtobits(0.054),0,1,1,2'b10,2'b00,2'b10);
  @(negedge CLK);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 162;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on D in Write mode  --- \n\n", $time, test_num);
  setuphold("D","Tcdx",$realtobits(0.126),1,0,1,2'b01,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 163;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on D in Write mode  --- \n\n", $time, test_num);
  setuphold("D","Tcdx",$realtobits(0.126),1,1,1,2'b10,2'b00,2'b10);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 164;
  $display( "\n\n@%t TEST: %d --- Going to check Bitwise Setup Violation on D in Write mode  --- \n\n", $time, test_num);
     write_mem("",10'd0, 32'd0);
  for ( d_num = 0; d_num < 32; d_num = d_num + 1 ) 
  begin
    @(negedge CLK);
    $display ("\n@%t  Check Setup Violation with D[%0d] bit", $time, d_num);
     ME = 1'b1;
     WE = 1'b1;
     D   = 32'b11111111111111111111111111111111;
     #7789.947;
     D[d_num]   = ~D[d_num];
    @(negedge CLK);
     WE = 1'b0;
     data_expect = 32'b11111111111111111111111111111111;
     data_expect[d_num] = 1'bX;
     read_mem("",10'd0,data_expect);
    @(negedge CLK);
     ME = 1'b1;
     WE = 1'b1;
     D   = 32'b00000000000000000000000000000000;
     D[d_num]   = 1'b1;
     #7789.947;
     D[d_num]   = ~D[d_num];
    @(negedge CLK);
     WE = 1'b0;
     data_expect = 32'd0;
     data_expect[d_num] = 1'bX;
     read_mem("",10'd0,data_expect);
    @(negedge CLK);
  end
  @(negedge CLK);
   write_mem("",10'd0, 32'd0);

  $display ("\n#######################################################################");
  test_num = 165;
  $display( "\n\n@%t TEST: %d --- Going to check Bitwise Hold Violation Tcdx on D in Write mode  --- \n\n", $time, test_num);
  write_mem("",10'd0, 32'd0);
  for ( d_num = 0; d_num < 32; d_num = d_num + 1 ) 
  begin
    @(negedge CLK);
    $display ("\n@%t  Check Hold Violation with D[%0d] bit", $time, d_num);
     ME = 1'b1;
     WE = 1'b1;
     D   = 32'b00000000000000000000000000000000;
    @(posedge CLK);
     #0.125;
     D[d_num]   = ~D[d_num];
    @(negedge CLK);
     WE = 1'b0;
     data_expect = 32'd0;
     data_expect[d_num] = 1'bX;
     read_mem("",10'd0,data_expect);
     write_mem("",10'd0, 32'd0);
    @(negedge CLK);
     ME = 1'b1;
     WE = 1'b1;
     D   = 32'b00000000000000000000000000000000;
     D[d_num]   = 1'b1;
    @(posedge CLK);
     #0.125;
     D[d_num]   = ~D[d_num];
    @(negedge CLK);
     WE = 1'b0;
     data_expect = 32'd0;
     data_expect[d_num] = 1'bX;
     read_mem("",10'd0,data_expect);
    @(negedge CLK);
  end
  @(negedge CLK);
   write_mem("",10'd0, 32'd0);
  $display ("\n#######################################################################");
  test_num = 166;
  $display( "\n\n@%t TEST: %d --- Going to check Bitwise Setup Violation on D in Write mode with output bits high  --- \n\n", $time, test_num);
  write_mem("",10'd0, 32'b11111111111111111111111111111111);
  for ( d_num = 0; d_num < 32; d_num = d_num + 1 )
  begin
    @(negedge CLK);
    $display ("\n@%t  Check Setup Violation with D[%0d] bit", $time, d_num);
     ME = 1'b1;
     WE = 1'b1;
     D   = 32'b11111111111111111111111111111111;
     #7789.947;
     D[d_num]   = ~D[d_num];
    @(negedge CLK);
     WE = 1'b0;
     data_expect = 32'b11111111111111111111111111111111;
     data_expect[d_num] = 1'bX;
     read_mem("",10'd0,data_expect);
  end
  @(negedge CLK);
   write_mem("",10'd0, 32'd0);
  $display ("\n#######################################################################");
  test_num = 167;
  $display( "\n\n@%t TEST: %d --- Going to check Bitwise Hold Violation on D in Write mode with output bits high  --- \n\n", $time, test_num);
  write_mem("",10'd0, 32'b11111111111111111111111111111111);
  for ( d_num = 0; d_num < 32; d_num = d_num + 1 ) 
  begin
    @(negedge CLK);
    $display ("\n@%t  Check Hold Violation with D[%0d] bit", $time, d_num);
     ME = 1'b1;
     WE = 1'b1;
     D   = 32'b11111111111111111111111111111111;
    @(posedge CLK);
     #0.125;
     D[d_num]   = ~D[d_num];
    @(negedge CLK);
     WE = 1'b0;
     data_expect = 32'b11111111111111111111111111111111;
     data_expect[d_num] = 1'bX;
     read_mem("",10'd0,data_expect);
    @(negedge CLK);
  end
  @(negedge CLK);
   write_mem("",10'd0, 32'd0);
    write_mem(1,"","");
    read_mem("",10'd0,32'd0);


  @(negedge CLK);  
  $display ("\n#######################################################################");
  test_num = 168;
  $display( "\n\n@%t TEST: %d --- Synchronous CLK & D events in Read mode  --- \n\n", $time, test_num);  
  syncevent("D",0,2'b10,2'b00,2'b00);  
  @(negedge CLK);   
  $display ("\n#######################################################################");
  test_num = 169;
  $display( "\n\n@%t TEST: %d --- Synchronous CLK & D events in Write mode  --- \n\n", $time, test_num);   
  syncevent("D",1,2'b10,2'b00,2'b10);   
    


  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 170;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on WE  --- \n\n", $time, test_num);
  setuphold("WE","Twc",$realtobits(0.064),0,0,0,2'b01,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 171;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on WE  --- \n\n", $time, test_num);
  setuphold("WE","Twc",$realtobits(0.064),0,1,0,2'b10,2'b01,2'b10);
  @(negedge CLK);
  @(negedge CLK);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 172;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on WE  when ADR is X  --- \n\n", $time, test_num);
  setuphold("WE_X","Twc",$realtobits(0.064),0,1,0,2'b10,2'b01,2'b11);
  @(negedge CLK);
  @(negedge CLK);
  write_mem(1,"","");

  @(negedge CLK);
  ADR = 0;
  $display ("\n#######################################################################");
  test_num = 173;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on WE  --- \n\n", $time, test_num);
  setuphold("WE","Tcwx",$realtobits(0.112),1,0,0,2'b01,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 174;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on WE  --- \n\n", $time, test_num);
  setuphold("WE","Tcwx",$realtobits(0.112),1,1,0,2'b10,2'b01,2'b10);
  @(negedge CLK);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 175;
  $display( "\n\n@%t TEST: %d --- Synchronous CLK & WE events  --- \n\n", $time, test_num);
  syncevent("WE",1,2'b10,2'b01,2'b10);
    
  $display ("\n#######################################################################");
  test_num = 176;
  $display( "\n\n@%t TEST: %d --- Going to check Setup rise constraint on LS in Read mode  --- \n\n", $time, test_num);
  write_mem(1,"","");
  WE = 1'b0;
  @(negedge CLK);
  LS = 1'b0;
  #(7790.0 - 0.063);
  LS = 1'b1;
  @(posedge CLK)
  begin
   #0.497
    if ( Q_BEHAV === 32'bx )
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: The parameter Trlsc not modelled effectively\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           The parameter Trlsc modelled effectively \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLK);
  LS = 1'b0;
  read_mem(1,"","");
  if (err_cnt == 0)
  begin
    $display ("\n@%t            The Parameter Trlsc is modelled effectively", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1 ;
    $display ("\n@%t               ERROR_MODEL: The Parameter Trlsc is not modelled effectively ", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLK);
  @(negedge CLK);


  $display ("\n#######################################################################");
  test_num = 177;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Rise Violation on LS in Read mode  --- \n\n", $time, test_num);
  write_mem(1,"","");
  WE = 1'b0;
  @(negedge CLK);
  LS = 1'b0;
  #((7790.0 - 0.063)+0.001);
  LS = 1'b1;
  @(posedge CLK)
  begin
   #0.497
    if ( Q_BEHAV !== 32'bx )
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: The parameter Trlsc not modelled effectively\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           The parameter Trlsc modelled effectively \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLK);
  LS = 1'b0;
  read_mem(1,"",32'bx);
  if (err_cnt == 0)
  begin
    $display ("\n@%t            The Parameter Trlsc is modelled effectively", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1 ;
    $display ("\n@%t               ERROR_MODEL: The Parameter Trlsc is not modelled effectively ", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  write_mem(1,"","");
  @(negedge CLK);

  $display ("\n#######################################################################");
  test_num = 178;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Rise Violation on LS in Write mode  --- \n\n", $time, test_num);
  write_mem(1,"","");
  read_mem("",10'd0,32'b0);
  WE = 1'b1;
  @(negedge CLK);
  LS = 1'b0;
  #((7790.0 - 0.063)+0.001);
  LS = 1'b1;
  @(posedge CLK)
  begin
    #0.497
    if ( Q_BEHAV !== 32'bx )
    begin
      test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: The parameter Trlsc not modelled effectively\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           The parameter Trlsc modelled effectively \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLK);
  WE = 1'b0;
  LS = 1'b0;
  read_mem(1,"",32'bx);
  if (err_cnt == 0)
  begin
    $display ("\n@%t            The Parameter Trlsc is modelled effectively", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1 ;
    $display ("\n@%t               ERROR_MODEL: The Parameter Trlsc is not modelled effectively ", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  write_mem(1,"","");
  read_mem("",10'd0,32'b0);


  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 179;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on TEST1 in Read mode  --- \n\n", $time, test_num);
  setuphold("TEST1","TT1C",$realtobits(0.083),0,0,0,2'b00,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 180;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on TEST1 in Read mode  --- \n\n", $time, test_num);
  setuphold("TEST1","TT1C",$realtobits(0.083),0,1,0,2'b10,2'b01,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 181;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on TEST1 in Read mode  --- \n\n", $time, test_num);
  setuphold("TEST1","TCT1X",$realtobits(2.094),1,0,0,2'b00,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 182;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on TEST1  in Read mode  --- \n\n", $time, test_num);
  setuphold("TEST1","TCT1X",$realtobits(2.094),1,1,0,2'b10,2'b01,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 183;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on TEST1 in Write mode  --- \n\n", $time, test_num);
  setuphold("TEST1","TT1C",$realtobits(0.083),0,0,1,2'b01,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 184;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on TEST1 in Write mode  --- \n\n", $time, test_num);
  setuphold("TEST1","TT1C",$realtobits(0.083),0,1,1,2'b01,2'b00,2'b10);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 185;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on TEST1 in Write mode  --- \n\n", $time, test_num);
  setuphold("TEST1","TCT1X",$realtobits(2.094),1,0,1,2'b01,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 186;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on TEST1  in Write mode  --- \n\n", $time, test_num);
  setuphold("TEST1","TCT1X",$realtobits(2.094),1,1,1,2'b10,2'b00,2'b10);
  @(negedge CLK);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 187;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on TEST_RNM in Read mode  --- \n\n", $time, test_num);
  setuphold("TEST_RNM","Ttrnmc",$realtobits(0.083),0,0,0,2'b00,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 188;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on TEST_RNM in Read mode  --- \n\n", $time, test_num);
  setuphold("TEST_RNM","Ttrnmc",$realtobits(0.083),0,1,0,2'b10,2'b01,2'b11);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 189;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on TEST_RNM in Read mode  --- \n\n", $time, test_num);
  setuphold("TEST_RNM","Tctrnmx",$realtobits(2.094),1,0,0,2'b00,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 190;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on TEST_RNM  in Read mode  --- \n\n", $time, test_num);
  setuphold("TEST_RNM","Tctrnmx",$realtobits(2.094),1,1,0,2'b10,2'b01,2'b11);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 191;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on TEST_RNM in Write mode  --- \n\n", $time, test_num);
  setuphold("TEST_RNM","Ttrnmc",$realtobits(0.083),0,0,1,2'b01,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 192;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on TEST_RNM in Write mode  --- \n\n", $time, test_num);
  setuphold("TEST_RNM","Ttrnmc",$realtobits(0.083),0,1,1,2'b01,2'b00,2'b11);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 193;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on TEST_RNM in Write mode  --- \n\n", $time, test_num);
  setuphold("TEST_RNM","Tctrnmx",$realtobits(2.094),1,0,1,2'b01,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 194;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on TEST_RNM  in Write mode  --- \n\n", $time, test_num);
  setuphold("TEST_RNM","Tctrnmx",$realtobits(2.094),1,1,1,2'b10,2'b00,2'b11);
  @(negedge CLK);

  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 195;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on RM[2:0] in Read mode  --- \n\n", $time, test_num);
  setuphold("RM","Trmc",$realtobits(0.384),0,0,0,2'b00,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 196;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on RM[2:0] in Read mode  --- \n\n", $time, test_num);
  setuphold("RM","Trmc",$realtobits(0.384),0,1,0,2'b10,2'b01,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 197;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on RM[2:0] in Read mode  --- \n\n", $time, test_num);
  setuphold("RM","Tcrmx",$realtobits(0.045),1,0,0,2'b00,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 198;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on RM[2:0] in Read mode  --- \n\n", $time, test_num);
  setuphold("RM","Tcrmx",$realtobits(0.045),1,1,0,2'b10,2'b01,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 199;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on RM[3] in Read mode  --- \n\n", $time, test_num);
  setuphold("RM","Trm3c",$realtobits(0.622),0,0,0,2'b00,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 200;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on RM[3] in Read mode  --- \n\n", $time, test_num);
  setuphold("RM","Trm3c",$realtobits(0.622),0,1,0,2'b10,2'b01,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 201;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on RM[3] Read mode  --- \n\n", $time, test_num);
  setuphold("RM","Tcrm3x",$realtobits(2.094),1,0,0,2'b00,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 202;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on RM[3] Read mode  --- \n\n", $time, test_num);
  setuphold("RM","Tcrm3x",$realtobits(2.094),1,1,0,2'b10,2'b01,2'b00);
  @(negedge CLK);
  RM = 4'b0011;


  $display ("\n#######################################################################");
  test_num = 203;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on RM[2:0] in Write mode  --- \n\n", $time, test_num);
  setuphold("RM","Trmc",$realtobits(0.384),0,0,1,2'b01,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 204;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on RM[2:0] in Write mode  --- \n\n", $time, test_num);
  setuphold("RM","Trmc",$realtobits(0.384),0,1,1,2'b10,2'b00,2'b10);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 205;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on RM[2:0] in Write mode  --- \n\n", $time, test_num);
  setuphold("RM","Tcrmx",$realtobits(0.045),1,0,1,2'b01,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 206;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on RM[2:0] in Write mode  --- \n\n", $time, test_num);
  setuphold("RM","Tcrmx",$realtobits(0.045),1,1,1,2'b10,2'b00,2'b10);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 207;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on RM[3] in Write mode  --- \n\n", $time, test_num);
  setuphold("RM","Trm3c",$realtobits(0.622),0,0,1,2'b01,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 208;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on RM[3] in Write mode  --- \n\n", $time, test_num);
  setuphold("RM","Trm3c",$realtobits(0.622),0,1,1,2'b10,2'b00,2'b10);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 209;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on RM[3] in Write mode  --- \n\n", $time, test_num);
  setuphold("RM","Tcrm3x",$realtobits(2.094),1,0,1,2'b01,2'b00,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 210;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on RM[3] in Write mode  --- \n\n", $time, test_num);
  setuphold("RM","Tcrm3x",$realtobits(2.094),1,1,1,2'b10,2'b00,2'b10);
  @(negedge CLK);
  RM = 4'b0011;
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 211;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on RME in Read mode  --- \n\n", $time, test_num);
  setuphold("RME","Trmec",$realtobits(0.384),0,0,0,2'b00,2'b00,2'b00);
  @(negedge CLK);
    RME = 1'b1;
  $display ("\n#######################################################################");
  test_num = 212;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on RME in Read mode  --- \n\n", $time, test_num);
  setuphold("RME","Trmec",$realtobits(0.384),0,1,0,2'b10,2'b01,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 213;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on RME in Read mode  --- \n\n", $time, test_num);
  setuphold("RME","Tcrmex",$realtobits(0.045),1,0,0,2'b00,2'b00,2'b00);
  @(negedge CLK);
    RME = 1'b1;
  $display ("\n#######################################################################");
  test_num = 214;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on RME in Read mode  --- \n\n", $time, test_num);
  setuphold("RME","Tcrmex",$realtobits(0.045),1,1,0,2'b10,2'b01,2'b00);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 215;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on RME in Write mode  --- \n\n", $time, test_num);
  setuphold("RME","Trmec",$realtobits(0.384),0,0,1,2'b01,2'b00,2'b00);
  @(negedge CLK);
    RME = 1'b1;
  $display ("\n#######################################################################");
  test_num = 216;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on RME in Write mode  --- \n\n", $time, test_num);
  setuphold("RME","Trmec",$realtobits(0.384),0,1,1,2'b10,2'b00,2'b10);
  @(negedge CLK);
  $display ("\n#######################################################################");
  test_num = 217;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on RME in Write mode  --- \n\n", $time, test_num);
  setuphold("RME","Tcrmex",$realtobits(0.045),1,0,1,2'b01,2'b00,2'b00);
  @(negedge CLK);
    RME = 1'b1;
  $display ("\n#######################################################################");
  test_num = 218;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on RME in Write mode  --- \n\n", $time, test_num);
  setuphold("RME","Tcrmex",$realtobits(0.045),1,1,1,2'b10,2'b00,2'b10);
  @(negedge CLK);
  RM = 4'b0011;
  RM = 4'b0011;

   write_mem(1,"","");
   read_mem("",10'd0,32'b0);

  @(negedge CLK);
   $display ("\n#######################################################################");
  test_num = 219;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on WA in Read Mode  --- \n\n", $time, test_num);
   setuphold("WA","Twac",$realtobits(0.384),0,0,0,2'b10,2'b00,2'b00);
  @(negedge CLK);
   $display ("\n#######################################################################");
  test_num = 220;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on WA in Read Mode  --- \n\n", $time, test_num);
   setuphold("WA","Twac",$realtobits(0.384),0,1,0,2'b10,2'b00,2'b00);
   read_mem("",10'd0,32'b0);

  $display ("\n#######################################################################");
  test_num = 221;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on WA in Read mode  --- \n\n", $time, test_num);
  setuphold("WA","Tcwax",$realtobits(2.094),1,0,0,2'b10,2'b00,2'b00);
  @(negedge CLK);
   $display ("\n#######################################################################");
  test_num = 222;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on WA in Read Mode  --- \n\n", $time, test_num);
  setuphold("WA","Tcwax",$realtobits(2.094),1,1,0,2'b10,2'b00,2'b00);
   read_mem("",10'd0,32'b0);

  @(negedge CLK);
   $display ("\n#######################################################################");
  test_num = 223;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on WA in Write Mode  --- \n\n", $time, test_num);
   setuphold("WA","Twac",$realtobits(0.384),0,0,1,2'b10,2'b00,2'b01);
  @(negedge CLK);
   $display ("\n#######################################################################");
  test_num = 224;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on WA in Write Mode  --- \n\n", $time, test_num);
   setuphold("WA","Twac",$realtobits(0.384),0,1,1,2'b10,2'b00,2'b11);
   read_mem("",10'd0,32'b0);

  $display ("\n#######################################################################");
  test_num = 225;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on WA in Write mode  --- \n\n", $time, test_num);
  setuphold("WA","Tcwax",$realtobits(2.094),1,0,1,2'b10,2'b00,2'b01);
  @(negedge CLK);
   $display ("\n#######################################################################");
  test_num = 226;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on WA in Write Mode  --- \n\n", $time, test_num);
  setuphold("WA","Tcwax",$realtobits(2.094),1,1,1,2'b10,2'b00,2'b11);
   read_mem("",10'd0,32'b0);

   read_mem("",10'd0,32'b0);

  @(negedge CLK);
    assist_initial("WA");
  @(negedge CLK);
   $display ("\n#######################################################################");
  test_num = 227;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on WPULSE in Write Mode  --- \n\n", $time, test_num);
   setuphold("WPULSE","Twpc",$realtobits(0.384),0,0,1,2'b10,2'b00,2'b01);
  @(negedge CLK);
   $display ("\n#######################################################################");
  test_num = 228;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on WPULSE in Write Mode  --- \n\n", $time, test_num);
   setuphold("WPULSE","Twpc",$realtobits(0.384),0,1,1,2'b10,2'b00,2'b11);
   read_mem("",10'd0,32'b0);

  $display ("\n#######################################################################");
  test_num = 229;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on WPULSE in Write mode  --- \n\n", $time, test_num);
  setuphold("WPULSE","Tcwpx",$realtobits(2.094),1,0,1,2'b10,2'b00,2'b01);
  @(negedge CLK);
   $display ("\n#######################################################################");
  test_num = 230;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on WPULSE in Write Mode  --- \n\n", $time, test_num);
  setuphold("WPULSE","Tcwpx",$realtobits(2.094),1,1,1,2'b10,2'b00,2'b11);
   read_mem("",10'd0,32'b0);


  @(negedge CLK);
    assist_initial("WPULSE");
   write_mem(1,"","");
   read_mem("",10'd0,32'b0);
  @(negedge CLK);
   $display ("\n#######################################################################");
  test_num = 231;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on BC0 in Light Sleep Mode  --- \n\n", $time, test_num);
   setuphold("BC0","Tbc0c",$realtobits(0.622),0,0,0,2'b01,2'b00,2'b01);
  @(negedge CLK);
   $display ("\n#######################################################################");
  test_num = 232;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on BC0 in Light Sleep Mode  --- \n\n", $time, test_num);
   setuphold("BC0","Tbc0c",$realtobits(0.622),0,1,0,2'b01,2'b00,2'b11);
   read_mem("",10'd0,32'b0);
  @(negedge CLK);
   $display ("\n#######################################################################");
  test_num = 233;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on BC1 in Light Sleep Mode  --- \n\n", $time, test_num);
   setuphold("BC1","Tbc1c",$realtobits(0.222),0,0,0,2'b01,2'b00,2'b01);
  @(negedge CLK);
   $display ("\n#######################################################################");
  test_num = 234;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on BC1 in Light Sleep Mode  --- \n\n", $time, test_num);
   setuphold("BC1","Tbc1c",$realtobits(0.222),0,1,0,2'b01,2'b00,2'b11);
   read_mem("",10'd0,32'b0);
  @(negedge CLK);
   $display ("\n#######################################################################");
  test_num = 235;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on BC2 in Light Sleep Mode  --- \n\n", $time, test_num);
   setuphold("BC2","Tbc2c",$realtobits(0.222),0,0,0,2'b01,2'b00,2'b01);
  @(negedge CLK);
   $display ("\n#######################################################################");
  test_num = 236;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on BC2 in Light Sleep Mode  --- \n\n", $time, test_num);
   setuphold("BC2","Tbc2c",$realtobits(0.222),0,1,0,2'b01,2'b00,2'b11);
   read_mem("",10'd0,32'b0);
  write_mem(1,"","");
  read_mem(1,"","");
`ifdef code_coverage
  @(negedge CLK);
  ME = 1'b1;
  WE = 1'b0;
  ADR = 0;
  D = 0;
  @(negedge CLK);
  WE = 1'bx;
  @(negedge CLK);
  WE = 1'b0;
  @(negedge CLK);
  WE = 1'b1;
  #7789.999
  ADR = 1;
  @(negedge CLK);
  WE = 1'b0;
  ADR = 0;
  @(negedge CLK);
  ME = 1'b1;
  @(negedge CLK);
  WE = 1'bx;
  D = 32'bx;
  @(negedge CLK);
  WE = 1'b0;
  D = 32'b0;
  @(negedge CLK);
  D[0] = 1'bx;
  @(negedge CLK);
  D = 32'b0;
  @(negedge CLK);
  WE = 1'bx;
  @(negedge CLK);
  WE = 1'b0;
  @(negedge CLK);
  ADR = 10'bx;
  D = 32'bx;
  WE = 1'b1;
  @(negedge CLK);
  ADR = 10'b0;
  D = 32'b0;
  WE = 1'b0;
  @(negedge CLK);
  D = 32'bx;
  WE = 1'bx;
  @(negedge CLK);
  D = 32'b0;
  WE = 1'b0;
  @(negedge CLK);
  D = 32'bx;
  WE = 1'b1;
  @(negedge CLK);
  D = 32'b0;
  WE = 1'b0;
  @(negedge CLK);
  WE = 1'b1;
  ADR = 10'bx;
  @(negedge CLK);
  WE = 1'b0;
  ADR = 10'b0;
  @(negedge CLK);
  WE = 1'b1;
  ADR = 10'bx;
  D = 32'bx;
  @(negedge CLK);
  WE = 1'b0;
  ADR = 10'b0;
  D = 32'b0;
  @(negedge CLK);
  WE = 1'b0;
  ADR = 10'bx;
  @(negedge CLK);
  ADR = 10'b0;
  @(negedge CLK);
  WE = 1'bx;
  @(negedge CLK);
  WE = 1'b0;
  @(negedge CLK);
  #7789.999 ADR = 10'd1;
  WE = ~WE;
  D = ~D;
  @(negedge CLK);
  ADR = 10'b0;
  D = 32'b0;
  WE = 1'b0;
  @(negedge CLK);
  #7789.999 ADR = 10'd1;
  WE = ~WE;
  D = ~D;
  @(negedge CLK);
  ADR = 10'b0;
  D = 32'b0;
  WE = 1'b0;
  @(negedge CLK);
  ME = 1'b0;
  @(negedge CLK);
  ADR = 10'b0;
  @(negedge CLK);
  ME = 1'b1;
  @(negedge CLK);
  WE = 1'b1;
  ADR = 10'bx;
  TEST1 = 1'bx;
  @(negedge CLK);
  WE = 1'b0;
  ADR = 10'b0;
  TEST1 = 1'b0;
  @(negedge CLK);
  ME = 1'b1;
  WE = 1'b1;
  D = 32'b0;
  ADR = 10'b0;
  #7789.999 ADR =  10'd1;
  D = 32'b1;
 @(negedge CLK);
  WE = 1'b0;
  ADR = 10'b0;
  D = 32'b0;


  @(negedge CLK);
  #2.0949999999999998;
  TEST1 = 1'b1;
  ME = 1'b1;
  WE = 1'b0;
  ADR = 10'bx;
  @(posedge CLK);
  ADR = 10'b0;
  @(negedge CLK);
  @(negedge CLK);
  #2.0949999999999998;
  TEST1 = 1'b0;
  @(negedge CLK);
  force test.top_behav.u0.mes_all_valid = 1'b0;
  write_mem("",10'd0, 32'd0);
  @(negedge CLK);
  force test.top_behav.u0.mes_all_valid = 1'b1;
  @(negedge CLK);
  release test.top_behav.u0.mes_all_valid ;
  #2.0949999999999998;
  TEST1 = 1'b1;
  write_mem(1,"","");
  @(negedge CLK);
  #2.0949999999999998;
  TEST1 = 1'b0;
  @(negedge CLK);
  @(negedge CLK);
#5;
simul_clk = 0;
  @(negedge CLK);
  #10;
  simul_clk = 1;
  @(negedge CLK);
  coverage_1;
  coverage_2;
  @(negedge CLK);
  #5;
  simul_clk = 0;
   @(negedge CLK);
// Setup/hold condition for Address: ADR is : ENADR
 
  ADR = 0;
  ME = 1'b1;
  @(negedge CLK);
  #7789.999;
  WE = ~WE;
  @(posedge CLK);
  #0.001;
  WE = ~WE;
  @(negedge CLK);

  ADR = 0;
  ME = 1'b1;
  WE = 1'b1;
  @(negedge CLK);
  #7789.999;
  D = ~D;
  @(posedge CLK);
  #0.001;
  D = ~D;
  @(negedge CLK);

  ADR = 0;
  ME = 1'b1;
  @(negedge CLK);
  #7789.999;
  TEST1 = ~TEST1;
  @(posedge CLK);
  #0.001;
  TEST1 = ~TEST1;
  @(negedge CLK);

  RME = 1'b1;
  ME = 1'b1;
  ADR = 0;
  @(negedge CLK);
  #7789.999;
  RME = ~RME;
  @(posedge CLK);
  #0.001;
  RME = ~RME;
  @(negedge CLK);

  @(negedge CLK);
  #7789.999;
  RM = ~RM;
  @(posedge CLK);
  #0.001;
  RM = ~RM;
  @(negedge CLK);

  RME = 1'b0;
  

`else
`endif
  
 $display( "\n\n@%t TEST:  --------- All Memory test over ---------- \n\n", $time);


 $display("\n####################################################################################");
 $display("\n                    ********** TEST SUMMARY **********\n");
 $display("\n1.  No. of test_status Errors is  %d", test_status);
 $display("\n2.  Please check ERROR_MODEL messages in the verilog.log file");
 $display("    for the cause of test_status Errors");
 $display("\n3.  Please check OP in the verilog.log file for any mismatch");
 $display("    between  verilog and vhdl memory model!\n");
 $display("\n####################################################################################");


#1000 $finish;
end //initial

endmodule
