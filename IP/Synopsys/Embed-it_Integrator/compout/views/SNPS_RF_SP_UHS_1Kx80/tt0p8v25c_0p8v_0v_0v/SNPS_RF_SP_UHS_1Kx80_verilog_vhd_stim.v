//---------------------------------------------------------------------
//               Copyright(c) Synopsys, Inc.                           
//     All Rights reserved - Unpublished -rights reserved under        
//     the Copyright laws of the United States of America.             
//                                                                     
//  U.S. Patents: 7,093,156 B1 and 7,406,620 B2 (and more pending).    
//                                                                     
//  This file includes the Confidential information of Synopsys, Inc.  
//  and GLOBALFOUNDRIES.                                               
//  The receiver of this Confidential Information shall not disclose   
//  it to any third party and shall protect its confidentiality by     
//  using the same degree of care, but not less than a reasonable      
//  degree of care, as the receiver uses to protect receiver's own     
//  Confidential Information.                                          
//  Licensee acknowledges and agrees that all output generated for     
//  Licensee by Synopsys, Inc. as described in the pertinent Program   
//  Schedule(s), or generated by Licensee through use of any Compiler  
//  licensed hereunder contains information that complies with the     
//  Virtual Component Identification Physical Tagging Standard (VCID)  
//  as maintained by the Virtual Socket Interface Alliance (VSIA).     
//  Such information may be expressed in GDSII Layer 63 or other such  
//  layer designated by the VSIA, hardware definition languages, or    
//  other formats.  Licensee is not authorized to alter or change any  
//  such information.                                                  
//---------------------------------------------------------------------
//                                                                     
//  Built for linux64 and running on linux64.                          
//                                                                     
//  Software           : Rev: S-2021.09-SP1                            
//  Library Format     : Rev: 1.05.00                                  
//  Compiler Name      : gf22nsd42p11s1drl128sa04p1                    
//  Platform           : Linux3.10.0-957.5.1.el7.x86_64                
//                     : #1 SMP Wed Dec 19 10:46:58 EST 2018x86_64     
//  Date of Generation : Tue May 10 13:58:31 CEST 2022                 
//                                                                     
//---------------------------------------------------------------------
//   --------------------------------------------------------------     
//                       Template Revision : 4.5.4                      
//   --------------------------------------------------------------     
//                 * Synchronous, 2-Port Register File *              
//             * Verilog Testbench ( Functional & Timing ) *          
// * Verilog Testbench for comparison of Behavioral verilog & Behavioral VHDL models * 
//                THIS IS A SYNCHRONOUS 2-PORT MEMORY MODEL           
//                                                                    
//   Memory Name:SNPS_RF_SP_UHS_1Kx80                                 
//   Memory Size:1024 words x 80 bits                                 
//                                                                    
//                               PORT NAME                            
//                               ---------                            
//               Output Ports                                         
//                                   QB[79:0]                         
//               Input Ports:                                         
//                                   ADRA[9:0]                        
//                                   DA[79:0]                         
//                                   WEA                              
//                                   MEA                              
//                                   CLKA                             
//                                   TEST1A                           
//                                   TEST_RNMA                        
//                                   RMEA                             
//                                   RMA[3:0]                         
//                                   WA[1:0]                          
//                                   WPULSE[2:0]                      
//                                   LS                               
//                                   ADRB[9:0]                        
//                                   MEB                              
//                                   CLKB                             
//                                   TEST1B                           
//                                   RMEB                             
//                                   RMB[3:0]                         

`timescale 1 ns / 1 ps 

module test;

wire [79:0] QB;
wire [79:0] QB_BEHAV;
reg [9:0] ADRA;
reg [79:0] DA;
reg WEA;
reg MEA;
reg CLKA;
reg TEST1A;
reg TEST_RNMA;
reg RMEA;
reg [3:0] RMA;
reg [1:0] WA;
reg [2:0] WPULSE;
reg LS;
reg [9:0] ADRB;
reg MEB;
reg CLKB;
reg TEST1B;
reg RMEB;
reg [3:0] RMB;
reg [10*10:1] param_name;
real param_val_tcc;
integer vec;
integer j;
integer test_status;
integer i;
integer i_n;
integer test_num;
integer err_cnt_test;
integer err_cnt;
integer simul_clk;
integer no_clk;
integer no_tclk;
integer no_clkA,no_clkB;
integer no_tclkA,no_tclkB;
integer wa_addr, wp_addr;
reg restart_clk;
reg [123 : 0] input_val;
reg [123 : 0] input_val_init;
reg QB_tmp ;
reg flag;
reg flagrtl;
reg nodftmaskb;
integer d_num;
reg [79:0] data_expect;
reg MEA_pos, MEA_neg;
reg MEB_pos, MEB_neg;
 
integer temp_addr;
SNPS_RF_SP_UHS_1Kx80_behav  top_behav (  .QB( QB_BEHAV), .ADRA( ADRA), .DA( DA), .WEA( WEA), .MEA( MEA), .CLKA( CLKA), .TEST1A( TEST1A), .TEST_RNMA( TEST_RNMA), .RMEA( RMEA), .RMA( RMA), .WA( WA), .WPULSE( WPULSE), .LS( LS), .ADRB( ADRB), .MEB( MEB), .CLKB( CLKB), .TEST1B( TEST1B), .RMEB( RMEB), .RMB( RMB) );
SNPS_RF_SP_UHS_1Kx80  top_struct (  .QB( QB), .ADRA( ADRA), .DA( DA), .WEA( WEA), .MEA( MEA), .CLKA( CLKA), .TEST1A( TEST1A), .TEST_RNMA( TEST_RNMA), .RMEA( RMEA), .RMA( RMA), .WA( WA), .WPULSE( WPULSE), .LS( LS), .ADRB( ADRB), .MEB( MEB), .CLKB( CLKB), .TEST1B( TEST1B), .RMEB( RMEB), .RMB( RMB) );
`define True    1'b1
`define False   1'b0
`define Mid     1'bx
`define Highz   1'bz
initial begin
  `ifdef VIRAGE_MONITOR_SIGNALS
     $monitor ( "Time = %t QB=%h ADRA=%h DA=%h WEA=%h MEA=%h CLKA=%h TEST1A=%h TEST_RNMA=%h RMEA=%h RMA=%h WA=%h WPULSE=%h LS=%h ADRB=%h MEB=%h CLKB=%h TEST1B=%h RMEB=%h RMB=%h ", $realtime, QB, ADRA, DA, WEA, MEA, CLKA, TEST1A, TEST_RNMA, RMEA, RMA, WA, WPULSE, LS, ADRB, MEB, CLKB, TEST1B, RMEB, RMB);
  `endif 
    //$vcdplusfile("SNPS_RF_SP_UHS_1Kx80.vpd");
    //$vcdpluson;
    //$dumpfile("SNPS_RF_SP_UHS_1Kx80.vcd");
    //$dumpvars();
    //$shm_open("waves.shm"); 
    //$shm_probe("AC"); 
    //$sdf_annotate( "SNPS_RF_SP_UHS_1Kx80.sdf");
end

task assist_initial;
input [8*9:1] signal;
begin
  if ( (signal == "WA") || (signal == "") )
    WA = 2'b10;
  if ( (signal == "WPULSE") || (signal == "") )
    WPULSE = 3'b000;
end
endtask
reg [79:0] OP_QB;

task compare_QB;
  output [79:0] OP_QB;
  input [79:0] QB;
  input [79:0] QB_BEHAV;

    if ( QB === 80'bz && QB_BEHAV === 80'bz )
      OP_QB = 80'b0;
    else if ( QB === 80'bx && QB_BEHAV === 80'bx  )
      OP_QB = 80'b0;
    else begin
      for ( i = 0; i <= 79; i = i + 1 ) begin
         OP_QB[i] = (((QB_BEHAV[i] === 1'bx && QB[i] === 1'bx) || ( QB_BEHAV[i] === 1'bz && QB[i] === 1'bz))?0:(QB_BEHAV[i] ^ QB[i]));
      end
    end
endtask

always @( QB or QB_BEHAV ) begin
  #0;
    if ( (|( QB ^ QB )) == 0 && (|( QB_BEHAV ^ QB_BEHAV )) == 0 ) begin
     #0.001 compare_QB ( OP_QB, QB, QB_BEHAV );
    end
    else if ( QB === 80'bz && QB_BEHAV === 80'bz )
      OP_QB = 80'b0;
    else if ( QB === 80'bx && QB_BEHAV === 80'bx  )
      OP_QB = 80'b0;
    else begin
      OP_QB = 80'b0;
      #0.001 compare_QB ( OP_QB, QB, QB_BEHAV );
    end
end

always @(OP_QB) begin
   if ( OP_QB !== 80'b0 ) begin
     test_status = test_status + 1;
     $display( $realtime, , "ERROR_MODEL: QB = %h, QB_BEHAV = %h", QB, QB_BEHAV );
   end
   else begin
     $display( $realtime, , "OP_QB = %h", OP_QB );
   end
end

`define True    1'b1
`define False   1'b0

wire [3:0] RMA_int;
assign RMA_int = ((RMEA===1'b1)?RMA:((RMEA===1'b0)?4'b0011:4'bx));

reg PARAM_FALSE = 1'b0;
always @(top_behav.notif_clka_CLKB_rise_rise_rec)
begin
  if ( PARAM_FALSE === 1'b1 ) begin
    test_status = test_status + 1;
    $display ("\n\n@%t  ERROR_MODEL: False Violation Observed \n\n", $time);
  end
end

always @(top_behav.notif_clkb_CLKA_rise_rise_rec)
begin
  if ( PARAM_FALSE === 1'b1 ) begin
    test_status = test_status + 1;
    $display ("\n\n@%t  ERROR_MODEL: False Violation Observed \n\n", $time);
  end
end













task write_mema;
input [9:0] addr_incr; //address increments by this value
input [9:0] address_w; //if null,entire memory is written.
input [79:0] data; //if null,data=0 in case of single location,else data=addr.
integer k;
integer j;
integer l;
reg [79:0]  i;
begin  
  i = data;
  @(negedge CLKA)
  begin
    MEA = 1'b1;
  end
  if ( addr_incr == "" ) 
  begin
    @(negedge CLKA)
    begin
      WEA = 1'b1;
      ADRA = address_w;
      DA = i;
    end
    @(posedge CLKA)
    begin
      #0.023;
       
      WEA = 1'b0; 
    end 
  end
  else
  begin
    k = addr_incr;
    for ( j=0; j<= 1023; j= j+k)
    begin
      @(negedge CLKA)
      begin
        WEA = 1'b1;
        ADRA = j;
        DA = i;
      end
      @(posedge CLKA)
      begin
      #0.023;
        
        WEA = 1'b0;
      end
      if ( data == "" && address_w !== 10'bx)
      begin
        i = i + k;
        if (i > 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111) i = 0;
      end
    end
  end
end
endtask


task write_mema_inv;
input [9:0] addr_incr; //address increments by this value
input [9:0] address_w; //if null,entire memory is written.
input [79:0] data; //if null,data=0 in case of single location,else data=addr.
integer k;
integer j;
reg [79:0]  i;
begin   
  if ( data == "" )
    i = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  else  
    i = data;
  @(negedge CLKA)
  begin 
    MEA = 1'b1;
  end
  if ( addr_incr == "" )
    k = 1;
  else
    k = addr_incr;
  for ( j=0; j<= 1023; j= j+k)
  begin
    @(negedge CLKA)
    begin
      WEA = 1'b1;
      ADRA = j;
      DA = i;
    end
    @(posedge CLKA)
    begin
      #0.023;
      
      WEA = 1'b0;
    end
    if ( data == "" )
    begin
      if ( i == 0 )
       i = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
      else 
       i = i - k;
    end
  end  
end  
endtask  

task enablesignalsa;
input [8*16:1] signal;   // signal
input [8*15:1] param_name; // timing parameter name
input [64:1] param;     // delay
input oper1;            // setup/hold
input oper2;            // constraint/violation
input mode;            // read/write
real paramr;
begin
  paramr = $bitstoreal(param);
  @(negedge CLKA)
  begin
    if (signal == "MEA")
      MEA = 1'b0;
    else
      MEA = 1'b1;
    if (signal == "LS")
      LS = 1'b1;
    else if (signal != "MEA")
      LS = 1'b0;
    if (signal == "ADRA" && oper1 == 0 )
      ADRA = 10'd1023;
    else
      ADRA = 0;
    if (signal == "ADRA_OR" && oper1 == 1 )
      ADRA = 10'd1023;
    if (signal == "DA" && oper1 == 0 )
      DA   = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
    else
      DA   = 0;
    if ( mode == 1 )
    begin
      WEA = 1'b1;
      MEB = 1'b0;
    end
    else
      WEA = 1'b0;
    if (signal == "TEST1A" && oper1 == 0 )
      TEST1A = 1'b1;
    else if ( signal == "TEST1A" && oper1 == 1 )
    if ( signal == "TEST1A" && oper1 == 1 )
      begin
      #2.0349999999999997;
      
      TEST1A = 1'b1;
      end
    else
      TEST1A = 1'b0;
    if (signal == "WEA_ADRA_X" )
    begin
      ADRA = 10'bx;
      ADRA <= @(negedge CLKA) 10'b0;
    end
  if (signal == "RMA" && oper1 == 0 )
  begin
    if (param_name == "Trmc" || param_name == "Tcrmx")
      RMA[2:0] = 3'b111;
    else if (param_name == "Trm3c" || param_name == "Tcrm3x")
      RMA[3] = 1'b1;
    RMEA = 1'b1;
  end
  if (signal == "RMA" && oper1 == 1 )
  begin
    RMA = 5;
    RMEA = 1'b1;
  end
  if (signal == "TEST_RNMA")
    TEST_RNMA = 1'b1;
  end
  if ( oper1 == 0 )
  begin
    if ( oper2 == 0 )
      #(72.035 - paramr);
    else
      #((72.035 - paramr)+0.001);
    if (signal == "MEA")
      MEA = ~MEA;
    else if (signal == "ADRA")
      ADRA = 0;
    else if (signal == "ADRA_OR")
      ADRA = 10'd1023;
    else if (signal == "LS")
      LS = ~LS;
    else if (signal == "WPULSE")
      WPULSE = ~WPULSE;
    else if (signal == "WA")
      WA = ~WA;
    else if (signal == "DA")
      DA = 0;
    else if (signal == "WEA")
      WEA = ~WEA;
    else if (signal == "WEA_ADRA_X")
      WEA = ~WEA;
    else if (signal == "TEST1A")
      TEST1A = ~TEST1A;
    else if (signal == "TEST_RNMA")
      TEST_RNMA = ~TEST_RNMA;
    else if (signal == "RMA")
    begin
     if (param_name == "Trmc") 
      RMA[2:0] = ~RMA[2:0];
     else if (param_name == "Trm3c")
      RMA[3] = ~RMA[3];
    end
    else if (signal == "RMEA")
      RMEA = ~RMEA;
  end
  if ( oper1 == 1 )
  begin
    if (signal == "TEST1A")
    @(negedge CLKA);
    else
    @(posedge CLKA);
    if ( oper2 == 0 )
      if (paramr < 0.00)
      begin
        @(negedge CLKA);
        #(72.035 + paramr);
      end
      else
      begin
      #( paramr);
      end
    else
     if ( paramr > 0.001 )
      #(paramr-0.001);
     else if (paramr < 0.00)
     begin
       @(negedge CLKA);
       #(72.035 + paramr - 0.001);
     end
    if (signal == "MEA")
      MEA = ~MEA;
    else if (signal == "ADRA")
      ADRA = ~ADRA;
    else if (signal == "ADRA_OR")
      ADRA = 0;
    else if (signal == "DA")
      DA = ~DA;
    else if (signal == "WEA")
      WEA = ~WEA;
    else if (signal == "WEA_ADRA_X")
      WEA = ~WEA;
    else if (signal == "LS")
      LS = ~LS;
    else if (signal == "WPULSE")
      WPULSE = ~WPULSE;
    else if (signal == "WA")
      WA = ~WA;
    else if (signal == "TEST1A")
    begin
      TEST1A = ~TEST1A;
  WEA = 1'b0;
   end
    else if (signal == "TEST_RNMA")
      TEST_RNMA = ~TEST_RNMA;
    else if (signal == "RMA")
    begin
     if (param_name == "Tcrmx") 
      RMA[2:0] = ~RMA[2:0];
     else if (param_name == "Tcrm3x")
      RMA[3] = ~RMA[3];
    end
    else if (signal == "RMEA")
      RMEA = ~RMEA;
    if ( signal == "RMEB" && oper1 == 1 )
    begin 
      if ( paramr > 0.353 )
       #0.001;
      else 
       #(0.353 - paramr + 0.001 + 0.001);
    end
    else
    begin
    if ( RMEB === 1'b0 )
      if ( paramr > 2.3799999999999994 )
       #0.001;
      else 
       #(2.3799999999999994 - paramr + 0.001 + 0.001);
    else
      begin
      if(oper1 === 1'b1 && paramr < 0.0)
      @(posedge CLKB);
      rmdel_tcq;
      end
   end
  end
end
endtask

task setupholda;
input [8*16:1] signal; // name of signal under test
input [8*15:1] param_name; // timing parameter name
input [64:1] param_val; //del
input oper1;       //setup/hold
input oper2;       //constraint/violation
input mode;        //read/write
input [1:0] chk;         //outputchk/memchk/both/XNW
input [1:0] outstat;     //no X/X/new data/prev data
input [1:0] memstat;     //read clean loc/read clean entire mem/corrupt loc/corrupt all
integer stat;
reg ref_clkA;
begin
  err_cnt = 0;
  stat = 0;
  assign ref_clkA = CLKA;
  enablesignalsa(signal,param_name,param_val,oper1,oper2,mode);
  if (signal == "ADRA_OR")
  begin
  signal = "ADRA";
  end
  if (signal == "WEA_ADRA_X")
  begin
  signal = "WEA";
  end
  if ( chk != 2'b01 )
  begin
    if ( oper1 == 0 )
    begin    // setup
      @(posedge CLKB);
      rmdel_tcq;
    end
    if ( outstat == 2'b00 )
    begin
      if (QB_BEHAV !== 80'bx) stat = 0;
      else stat = 1;
    end
    else if ( outstat == 2'b01 )
    begin
      if (QB_BEHAV === 80'bx) stat = 0;
      else stat = 1;
    end
    else if ( outstat == 2'b10 )
    begin
      if (QB_BEHAV === 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111) stat = 0;
      else stat = 1;
    end
    else if ( outstat == 2'b11 )
    begin
      if (QB_BEHAV === 80'd0) stat = 0;
      else stat = 1;
    end
    if (stat == 0)
    begin
      $display ("\n@%t            The Parameter %s is modelled effectively", $time, param_name);
      $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1 ;
      $display ("\n@%t               ERROR_MODEL: The Parameter %s is not modelled effectively ", $time, param_name);
      $display ("\n@%t            FAIL\n", $time);
    end
    #10;
  end
  @(negedge CLKA);
  WEA = 1'b0;
  if ( signal == "TEST1A" && oper1 == 1 ) 
    TEST1A  = 1'b0;
  begin
  WA = 2'b0;
  WPULSE = 3'b0;
  end
  if (signal == "MEA")
    LS = 1'b0;
  if ( chk != 2'b00 )
  begin
    if ( memstat == 2'b00 )
      read_memb("",10'd0,80'b0);
    else if ( memstat == 2'b01 )
      read_memb(1,"","");
    else if ( memstat == 2'b10 )
    begin
      if ( chk == 2'b11 )
      begin
        read_memb("",10'd1023,80'bx);
        write_mema("",10'd1023,80'b0);
      end
      else
      begin
        read_memb("",10'd0,80'bx);
        write_mema("",10'd0,80'b0);
      end
    end
    else if ( memstat == 2'b11 )
    begin
      read_memb(1,"",80'bx);
      write_mema(1,"","");
    end
  end

  if (err_cnt == 0)
  begin
    $display ("\n@%t            The Parameter %s is modelled effectively", $time, param_name);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1 ;
    $display ("\n@%t               ERROR_MODEL: The Parameter %s is not modelled effectively ", $time, param_name);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKA);
end
endtask

task synceventa;
input [8*16:1] signal; // name of signal under test
input mode;        //read/write
input [1:0] chk;         //outputchk/memchk/both/XNW
input [1:0] outstat;     //no X/X/new data/prev data
input [1:0] memstat;     //read clean loc/read clean entire mem/corrupt loc/corrupt all
integer stat;
begin
  err_cnt = 0;
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    if (signal == "ADRA"  )
      ADRA = 10'd1023;
    else
      ADRA = 0;
    DA   = 0;
    if ( mode == 1 )
    begin
      WEA = 1'b1;
      MEB = 1'b0;
    end
    else
      WEA = 1'b0;
  end
  @(posedge CLKA);
  if (signal == "MEA")
    MEA = ~MEA;
  else if (signal == "ADRA")
    ADRA = ~ADRA;
  else if (signal == "DA")
    DA = ~DA;
  else if (signal == "WEA")
    WEA = ~WEA;
  #0.346;
  if ( chk != 2'b01 )
  begin
    if ( outstat == 2'b00 )
    begin
      if (QB_BEHAV !== 80'bx) stat = 0;
      else stat = 1;
    end
    else if ( outstat == 2'b01 )
    begin
      if (QB_BEHAV === 80'bx) stat = 0;
      else stat = 1;
    end
    else if ( outstat == 2'b10 )
    begin
      if (QB_BEHAV === 80'd0) stat = 0;
      else stat = 1;
    end
    if (stat == 0)
    begin
      $display ("\n@%t            Synchronous CLKA & %s events modelled effectively", $time, signal);
      $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1 ;
      $display ("\n@%t            ERROR_MODEL: Synchronous CLKA & %s events not modelled effectively", $time, signal);
      $display ("\n@%t            FAIL\n", $time);
    end
  end
  #10;
  @(negedge CLKA);
  if ( signal == "MEA" )
    MEA = 1'b1;
  WEA = 1'b0;
  if ( chk != 2'b00 )
  begin
    if ( memstat == 2'b00 )
      read_memb("",10'd0,80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000);
    else if ( memstat == 2'b01 )
      read_memb(1,"","");
    else if ( memstat == 2'b10 )
    begin
      if ( chk == 2'b11 )
      begin
        read_memb("",10'd1023,80'bx);
        write_mema("",10'd1023,80'b0);
      end
      else
      begin
        read_memb("",10'd0,80'bx);
        write_mema("",10'd0,80'b0);
      end
    end  
    else if ( memstat == 2'b11 )
    begin
      read_memb(1,"",80'bx);
      write_mema(1,"","");
    end
  end  
end
endtask






reg [79:0] QB_prev;



task read_memb;
input [9:0] addr_incr; //address increments by this value
input [9:0] address_r; //if null,entire memory is read.
input [79:0] data; //if null,data=0 in case of single location,else data=addr.
integer k;
integer j;
integer l;
reg [79:0]  i;
begin
  err_cnt = 0;
  i = data;
  @(negedge CLKB)
  begin
    MEB = 1'b1;
    WEA = 1'b0;
  end
  if ( addr_incr == "" )
  begin
    @(negedge CLKB);
    ADRB = address_r;
    @(posedge CLKB);
        if (RMEB === 1'b1)
    begin
     if(RMB === 4'd0)
        #0.354;
      else if(RMB === 4'd1)
        #0.350;
      else if(RMB === 4'd2)
        #0.349;
      else if(RMB === 4'd3)
        #0.346;
      else if(RMB === 4'd4)
        #0.343;
      else if(RMB === 4'd5)
        #0.340;
      else if(RMB === 4'd6)
        #0.340;
      else if(RMB === 4'd7)
        #0.340;
      else
        #0.354;
   end
   else
   #0.346;

    #0.0;
    if (QB_BEHAV !== i)
    begin
      err_cnt = err_cnt + 1;
      test_status = test_status + 1;
      $display ("\n ERROR_MODEL: Mismatch observed at ADRB %d, simulated value = %h, expected value = %h at time %t  ", ADRB, QB_BEHAV, i, $time);
      $display ("\n@%t            FAIL\n", $time);
    end
  end
  else
  begin
    k = addr_incr;
    for ( j=0; j<= 1023; j= j+k)
    begin
      @(negedge CLKB);
      ADRB = j;
      @(posedge CLKB);
        if (RMEB === 1'b1)
    begin
     if(RMB === 4'd0)
        #0.354;
      else if(RMB === 4'd1)
        #0.350;
      else if(RMB === 4'd2)
        #0.349;
      else if(RMB === 4'd3)
        #0.346;
      else if(RMB === 4'd4)
        #0.343;
      else if(RMB === 4'd5)
        #0.340;
      else if(RMB === 4'd6)
        #0.340;
      else if(RMB === 4'd7)
        #0.340;
      else
        #0.354;
   end
   else
   #0.346;

      #0.0;
      if (QB_BEHAV !== i)
      begin
        err_cnt = err_cnt + 1;
        test_status = test_status + 1;
        $display ("\n ERROR_MODEL: Mismatch observed at ADRB %d, simulated value = %h, expected value = %h at time %t  ", ADRB, QB_BEHAV, i, $time);
        $display ("\n@%t            FAIL\n", $time);
      end
      if ( data == "" && address_r !== 10'bx)
      begin
        i = i + k;
        if (i > 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111) i = 0;
      end
    end
  end
end
endtask




task read_memb_inv;
input [9:0] addr_incr; //address increments by this value
input [9:0] addr; //if null,entire memory is read.
input [79:0] data; //if null,data=0 in case of single location,else data=addr.
integer k;
integer j;
reg [79:0]  i;
begin
  err_cnt = 0;
  if ( data == "" )
    i = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  else
    i = data;
  if ( addr_incr == "" )
    k = 1;
  else
    k = addr_incr;
  @(negedge CLKB)
  begin  
    MEB = 1'b1;
  end
  for ( j=0; j<= 1023; j= j+k)
  begin
    @(negedge CLKB);
    ADRB = j;
    @(posedge CLKB);
    #0.346;
    if (QB_BEHAV !== i)
    begin
      err_cnt = err_cnt + 1;
      test_status = test_status + 1;
      $display ("\n ERROR_MODEL: Mismatch observed at ADRB %d, simulated value = %h, expected value = %h at time %t  ", ADRB, QB_BEHAV, i, $time);
      $display ("\n@%t            FAIL\n", $time);
    end
    if ( data == "" )
    begin
      if ( i == 0 )
        i = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
      else
        i = i - k;
    end
  end
end
endtask

task read_mem_test1b;
input [9:0] addr_incr; //address increments by this value
input [9:0] address_r; //if null,entire memory is read.
input [79:0] data; //if null,data=0 in case of single location,else data=addr.
integer k;
integer j;
integer l;
reg [79:0]  i;
begin
  err_cnt = 0;
  i = data;
  @(negedge CLKB);
  MEB = 1'b1;
  @(negedge CLKB)
  begin
    WEA = 1'b0;
  end
  if ( addr_incr == "" )
  begin
    @(negedge CLKB);
    ADRB = address_r;
    @(posedge CLKB);
      #0.149;
    
    if (QB_BEHAV !== 80'bx)
    begin
      err_cnt = err_cnt + 1;
      $display ("\n ERROR_MODEL: Mismatch observed at ADRB %d, simulated value = %h, expected value = %h at time %t  ",ADRB, QB_BEHAV,temp_addr, $realtime);
    end
    @(negedge CLKB);
    #0.35;
    if (QB_BEHAV !== i)
    begin
      err_cnt = err_cnt + 1;
      test_status = test_status + 1;
      $display ("\n ERROR_MODEL: Mismatch observed at ADRB %d, simulated value = %h, expected value = %h at time %t  ", ADRB, QB_BEHAV, i, $time);
      $display ("\n@%t            FAIL\n", $time);
    end
  end
  else
  begin
    k = addr_incr;
    for ( j=0; j<= 1023; j= j+k)
    begin
      @(negedge CLKB);
      ADRB = j;
      @(posedge CLKB);
      #0.149;
      
      if (QB_BEHAV !== 80'bx)
      begin
        err_cnt = err_cnt + 1;
        $display ("\n ERROR_MODEL: Mismatch observed at ADRB %d, simulated value = %h, expected value = %h at time %t  ",ADRB, QB_BEHAV,temp_addr, $realtime);
      end
      @(negedge CLKB);
      #0.35;
      if (QB_BEHAV !== i)
      begin
        err_cnt = err_cnt + 1;
        test_status = test_status + 1;
        $display ("\n ERROR_MODEL: Mismatch observed at ADRB %d, simulated value = %h, expected value = %h at time %t  ", ADRB, QB_BEHAV, i, $time);
        $display ("\n@%t            FAIL\n", $time);
      end
      if ( data == "" && address_r !== 10'bx)
      begin
        i = i + k;
        if (i > 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111) i = 0;
      end
    end
  end
  @(negedge CLKB);
end
endtask


task rmdel_tcsep;
begin
    if (RMEB === 1'b1 && RMEA === 1'b1)
    begin
        if(RMB === 4'd0 && RMA === 4'd0 && (WA === 2'b11) && (WPULSE === 3'b000))
          #2.035; // tcseprm0
        else if(RMB === 4'd1 && RMA === 4'd1 && (WA === 2'b11) && (WPULSE === 3'b000))
          #0.852; //tcseprm1
        else if(RMB === 4'd2 && RMA === 4'd2 && (WA === 2'b10) && (WPULSE === 3'b000))
          #0.808; //tcseprm2
        else if(RMB === 4'd3 && RMA === 4'd3 && (WA === 2'b10) && (WPULSE === 3'b000))
          #0.559; //tcseprm3
        else if(RMB === 4'd4 && RMA === 4'd4 && (WA === 2'b01) && (WPULSE === 3'b000))
          #0.528; //tcseprm4
        else if(RMB === 4'd5 && RMA === 4'd5 && (WA === 2'b01) && (WPULSE === 3'b000))
          #0.503; //tcseprm5
        else if(RMB === 4'd6 && RMA === 4'd6 && (WA === 2'b01) && (WPULSE === 3'b000))
          #0.503; //tcseprm5
        else if(RMB === 4'd7 && RMA === 4'd7 && (WA === 2'b01) && (WPULSE === 3'b000))
          #0.503; //tcseprm5
        else
          #2.035;//tcseprm0
      end
      else if (RMEB === 1'b0 && RMEA === 1'b0 && (WA === 2'b10) && (WPULSE === 3'b000))
        #0.559;//tcsep
      else
        #2.035;//tcseprm0

end
endtask


task rmdel_tcq;
begin
      if (RMEB === 1'b1)
    begin
     if(RMB === 4'd0)
        #0.354;
      else if(RMB === 4'd1)
        #0.350;
      else if(RMB === 4'd2)
        #0.349;
      else if(RMB === 4'd3)
        #0.346;
      else if(RMB === 4'd4)
        #0.343;
      else if(RMB === 4'd5)
        #0.340;
      else if(RMB === 4'd6)
        #0.340;
      else if(RMB === 4'd7)
        #0.340;
      else
        #0.354;
   end
   else
   #0.346;

end
endtask
task enablesignalsb;
input [8*16:1] signal;   // signal
input [8*15:1] param_name; // timing parameter name
input [64:1] param;     // delay
input oper1;            // setup/hold
input oper2;            // constraint/violation
input mode;            // read/write
real paramr;
begin
  paramr = $bitstoreal(param);
  @(negedge CLKB)
  begin
    if (signal == "MEB")
      MEB = 1'b0;
    else
      MEB = 1'b1;
    if (signal == "LS")
      LS = 1'b1;
    else if (signal != "MEB")
      LS = 1'b0;
    if (signal == "ADRB" && oper1 == 0 )
      ADRB = 10'd1023;
    else
      ADRB = 0;
    if (signal == "ADRB_OR" && oper1 == 1 )
      ADRB = 10'd1023;
    if (signal == "TEST1B" && oper1 == 0 )
      TEST1B = 1'b1;
    else if ( signal == "TEST1B" && oper1 == 1 )
    if ( signal == "TEST1B" && oper1 == 1 )
      begin
      #2.0349999999999997;
      
      TEST1B = 1'b1;
      end
    else
      TEST1B = 1'b0;
  if (signal == "RMB" && oper1 == 0 )
  begin
    if (param_name == "Trmc" || param_name == "Tcrmx")
      RMB[2:0] = 3'b111;
    else if (param_name == "Trm3c" || param_name == "Tcrm3x")
      RMB[3] = 1'b1;
    RMEB = 1'b1;
  end
  if (signal == "RMB" && oper1 == 1 )
  begin
    RMB = 5;
    RMEB = 1'b1;
  end
  end
  if ( oper1 == 0 )
  begin
    if ( oper2 == 0 )
      #(72.035 - paramr);
    else
      #((72.035 - paramr)+0.001);
    if (signal == "MEB")
      MEB = ~MEB;
    else if (signal == "ADRB")
      ADRB = 0;
    else if (signal == "ADRB_OR")
      ADRB = 10'd1023;
    else if (signal == "LS")
      LS = ~LS;
    else if (signal == "TEST1B")
      TEST1B = ~TEST1B;
    else if (signal == "RMB")
    begin
     if (param_name == "Trmc") 
      RMB[2:0] = ~RMB[2:0];
     else if (param_name == "Trm3c")
      RMB[3] = ~RMB[3];
    end
    else if (signal == "RMEB")
      RMEB = ~RMEB;
  end
  if ( oper1 == 1 )
  begin
    if (signal == "TEST1B")
    @(negedge CLKB);
    else
    @(posedge CLKB);
    if ( oper2 == 0 )
      if (paramr < 0.00)
      begin
        @(negedge CLKB);
        #(72.035 + paramr);
      end
      else
      begin
      #( paramr);
      end
    else
     if ( paramr > 0.001 )
      #(paramr-0.001);
     else if (paramr < 0.00)
     begin
       @(negedge CLKB);
       #(72.035 + paramr - 0.001);
     end
    if (signal == "MEB")
      MEB = ~MEB;
    else if (signal == "ADRB")
      ADRB = ~ADRB;
    else if (signal == "ADRB_OR")
      ADRB = 0;
    else if (signal == "LS")
      LS = ~LS;
    else if (signal == "TEST1B")
    begin
      TEST1B = ~TEST1B;
   end
    else if (signal == "RMB")
    begin
     if (param_name == "Tcrmx") 
      RMB[2:0] = ~RMB[2:0];
     else if (param_name == "Tcrm3x")
      RMB[3] = ~RMB[3];
    end
    else if (signal == "RMEB")
      RMEB = ~RMEB;
    if ( signal == "RMEB" && oper1 == 1 )
    begin 
      if ( paramr > 0.353 )
       #0.001;
      else 
       #(0.353 - paramr + 0.001 + 0.001);
    end
    else
    begin
    if ( RMEB === 1'b0 )
      if ( paramr > 0.345 )
       #0.001;
      else 
       #(0.345 - paramr + 0.001 + 0.001);
    else
      begin
      if(oper1 === 1'b1 && paramr < 0.0)
      @(posedge CLKB);
      rmdel_tcq;
      end
   end
  end
end
endtask

task setupholdb;
input [8*16:1] signal; // name of signal under test
input [8*15:1] param_name; // timing parameter name
input [64:1] param_val; //del
input oper1;       //setup/hold
input oper2;       //constraint/violation
input mode;        //read/write
input [1:0] chk;         //outputchk/memchk/both/XNW
input [1:0] outstat;     //no X/X/new data/prev data
input [1:0] memstat;     //read clean loc/read clean entire mem/corrupt loc/corrupt all
integer stat;
reg ref_clkB;
begin
  err_cnt = 0;
  stat = 0;
  assign ref_clkB = CLKB;
  enablesignalsb(signal,param_name,param_val,oper1,oper2,mode);
  if (signal == "ADRB_OR")
  begin
  signal = "ADRB";
  end
  if ( chk != 2'b01 )
  begin
    if ( oper1 == 0 )
    begin    // setup
      @(posedge CLKB);
      rmdel_tcq;
    end
    if ( outstat == 2'b00 )
    begin
      if ( signal == "TEST1B" && oper1 == 1 )
      #0.35;
      if (QB_BEHAV !== 80'bx) stat = 0;
      else stat = 1;
    end
    else if ( outstat == 2'b01 )
    begin
      if (QB_BEHAV === 80'bx) stat = 0;
      else stat = 1;
    end
    else if ( outstat == 2'b10 )
    begin
      if (QB_BEHAV === 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111) stat = 0;
      else stat = 1;
    end
    else if ( outstat == 2'b11 )
    begin
      if (QB_BEHAV === 80'd0) stat = 0;
      else stat = 1;
    end
    if (stat == 0)
    begin
      $display ("\n@%t            The Parameter %s is modelled effectively", $time, param_name);
      $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1 ;
      $display ("\n@%t               ERROR_MODEL: The Parameter %s is not modelled effectively ", $time, param_name);
      $display ("\n@%t            FAIL\n", $time);
    end
    #10;
  end
  @(negedge CLKB);
  WEA = 1'b0;
  if ( signal == "TEST1B" && oper1 == 1 ) 
    TEST1B  = 1'b0;
  if (signal == "MEB")
    LS = 1'b0;
  if ( chk != 2'b00 )
  begin
    if ( memstat == 2'b00 )
      read_memb("",10'd0,80'b0);
    else if ( memstat == 2'b01 )
      read_memb(1,"","");
    else if ( memstat == 2'b10 )
    begin
      if ( chk == 2'b11 )
      begin
        read_memb("",10'd1023,80'bx);
        write_mema("",10'd1023,80'b0);
      end
      else
      begin
        read_memb("",10'd0,80'bx);
        write_mema("",10'd0,80'b0);
      end
    end
    else if ( memstat == 2'b11 )
    begin
      read_memb(1,"",80'bx);
      write_mema(1,"","");
    end
  end

  if (err_cnt == 0)
  begin
    $display ("\n@%t            The Parameter %s is modelled effectively", $time, param_name);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1 ;
    $display ("\n@%t               ERROR_MODEL: The Parameter %s is not modelled effectively ", $time, param_name);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKB);
end
endtask

task synceventb;
input [8*16:1] signal; // name of signal under test
input mode;        //read/write
input [1:0] chk;         //outputchk/memchk/both/XNW
input [1:0] outstat;     //no X/X/new data/prev data
input [1:0] memstat;     //read clean loc/read clean entire mem/corrupt loc/corrupt all
integer stat;
begin
  err_cnt = 0;
  @(negedge CLKB)
  begin
    MEB = 1'b1;
    if (signal == "ADRB"  )
      ADRB = 10'd1023;
    else
      ADRB = 0;
    DA   = 0;
    if ( mode == 1 )
    begin
      WEA = 1'b1;
    end
    else
      WEA = 1'b0;
  end
  @(posedge CLKB);
  if (signal == "MEB")
    MEB = ~MEB;
  else if (signal == "ADRB")
    ADRB = ~ADRB;
  else if (signal == "DA")
    DA = ~DA;
  else if (signal == "WEA")
    WEA = ~WEA;
  #0.346;
  if ( chk != 2'b01 )
  begin
    if ( outstat == 2'b00 )
    begin
      if (QB_BEHAV !== 80'bx) stat = 0;
      else stat = 1;
    end
    else if ( outstat == 2'b01 )
    begin
      if (QB_BEHAV === 80'bx) stat = 0;
      else stat = 1;
    end
    else if ( outstat == 2'b10 )
    begin
      if (QB_BEHAV === 80'd0) stat = 0;
      else stat = 1;
    end
    if (stat == 0)
    begin
      $display ("\n@%t            Synchronous CLKB & %s events modelled effectively", $time, signal);
      $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1 ;
      $display ("\n@%t            ERROR_MODEL: Synchronous CLKB & %s events not modelled effectively", $time, signal);
      $display ("\n@%t            FAIL\n", $time);
    end
  end
  #10;
  @(negedge CLKB);
  if ( signal == "MEB" )
    MEB = 1'b1;
  WEA = 1'b0;
  if ( chk != 2'b00 )
  begin
    if ( memstat == 2'b00 )
      read_memb("",10'd0,80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000);
    else if ( memstat == 2'b01 )
      read_memb(1,"","");
    else if ( memstat == 2'b10 )
    begin
      if ( chk == 2'b11 )
      begin
        read_memb("",10'd1023,80'bx);
        write_mema("",10'd1023,80'b0);
      end
      else
      begin
        read_memb("",10'd0,80'bx);
        write_mema("",10'd0,80'b0);
      end
    end  
    else if ( memstat == 2'b11 )
    begin
      read_memb(1,"",80'bx);
      write_mema(1,"","");
    end
  end  
end
endtask
task create_patternA;
input integer pat;
input [8*15:1] viol; // Tch,Tcl,Tccn,Tccp
begin
  @(negedge CLKA);
  no_clk = 1;
  if (pat === 1)
  begin
    $display (" %t Pattern %d MEA = 1 CLK 0->1->0->1->0 checking for %s", $time, pat, viol);
    MEA = 1'b1;
    #72.035;
    CLKA = 1'b1;
    #72.035; 
    CLKA = 1'b0;
    if (viol == "Tch")
    begin
      #72.035; 
      CLKA = 1'b1;
      #0.077; //tch-tpr
      CLKA = ~CLKA;
    end
    if (viol == "Tcx")
    begin
      #72.035; 
      CLKA = 1'bX;
      #72.035; 
      CLKA = 1'b0;
    end
    if (viol == "Tcl")
    begin
      #0.096; //tcl-tpr
      CLKA = ~CLKA;
    end
    if (viol == "Tccn_rmezo" || viol == "Tccn_rm0" || viol == "Tccn_rm1" || viol == "Tccn_rm2" || viol == "Tccn_rm3" || viol == "Tccn_rm4" || viol == "Tccn_rm5")
    begin
      #0.097; //tcl
      CLKA = ~CLKA;
      #(param_val_tcc - 0.097 - 0.001);
      CLKA = ~CLKA;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #72.035; 
      CLKA = 1'b1;
      #0.078; //tch
      CLKA = ~CLKA;
      #(param_val_tcc - 0.078 - 0.001);
      CLKA = ~CLKA;
    end
  end
  if (pat === 2)
  begin
    $display (" %t Pattern %d MEA = 1 CLK 0->1 MEA = 0 CLK->0->1->0 checking for %s", $time, pat, viol);
    MEA = 1'b1;
    #72.035; 
    CLKA = 1'b1;
    #0.023;
    MEA = 1'b0;
    #72.035; 
    CLKA = 1'b0;
    if (viol == "Tch")
    begin
      #72.035; 
      CLKA = 1'b1;
      #0.077; //tch-tpr
      CLKA = ~CLKA;
    end
    if (viol == "Tcx")
    begin
      #72.035; 
      CLKA = 1'bX;
      #72.035; 
      CLKA = 1'b0;
    end
    if (viol == "Tcl")
    begin
      #0.096; //tcl-tpr
      CLKA = ~CLKA;
    end
    if (viol == "Tccn_rmezo" || viol == "Tccn_rm0" || viol == "Tccn_rm1" || viol == "Tccn_rm2" || viol == "Tccn_rm3" || viol == "Tccn_rm4" || viol == "Tccn_rm5")
    begin
      #0.097; //tcl
      CLKA = ~CLKA;
      #(param_val_tcc - 0.097 - 0.001);
      CLKA = ~CLKA;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #72.035; 
      CLKA = 1'b1;
      #0.078; //tch
      CLKA = ~CLKA;
      #(param_val_tcc - 0.078 - 0.001);
      CLKA = ~CLKA;
    end
  end
  if (pat === 3)
  begin
    $display (" %t Pattern %d MEA = 0 CLK 0->1->0 MEA = 1 CLK=0->1->0 checking for %s", $time, pat, viol);
    MEA = 1'b0;
    #72.035; 
    CLKA = 1'b1;
    #72.035; 
    CLKA = 1'b0;
    #0.001;
    MEA = 1'b1;
    if (viol == "Tch")
    begin
      #72.035; 
      CLKA = 1'b1;
      #0.077; //tch-tpr
      CLKA = ~CLKA;
    end
    if (viol == "Tcx")
    begin
      #72.035; 
      CLKA = 1'bX;
      #72.035; 
      CLKA = 1'b0;
    end
    if (viol == "Tcl")
    begin
      #0.095; //tch-tpr
      CLKA = ~CLKA;
    end
    if (viol == "Tccn_rmezo" || viol == "Tccn_rm0" || viol == "Tccn_rm1" || viol == "Tccn_rm2" || viol == "Tccn_rm3" || viol == "Tccn_rm4" || viol == "Tccn_rm5")
    begin
      #0.096; //tcl-tpr
      CLKA = ~CLKA;
      #(param_val_tcc - 0.097 - 0.001);
      CLKA = ~CLKA;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #72.035; 
      CLKA = 1'b1;
      #0.078; //tch
      CLKA = ~CLKA;
      #(param_val_tcc - 0.078 - 0.001);
      CLKA = ~CLKA;
    end
    #72.035;
    MEA = 1'b0;
  end
  if (pat === 4)
  begin
    $display (" %t Pattern %d MEA = 0 CLK 0->1 MEA = 0->1->0 CLK=1->0->1->0 checking for %s", $time, pat, viol);
    MEA = 1'b0;
    #72.035; 
    CLKA = 1'b1;
    #0.023;
    MEA = 1'b1;
    #72.035; 
    MEA = 1'b0;
    #10; 
    CLKA = 1'b0;
    if (viol == "Tch")
    begin
      #72.035; 
      CLKA = 1'b1;
      #0.077; //tch-tpr
      CLKA = ~CLKA;
    end
    if (viol == "Tcx")
    begin
      #72.035; 
      CLKA = 1'bX;
      #72.035; 
      CLKA = 1'b0;
    end
    if (viol == "Tcl")
    begin
      #0.096; //tcl-tpr
      CLKA = ~CLKA;
    end
    if (viol == "Tccn_rmezo" || viol == "Tccn_rm0" || viol == "Tccn_rm1" || viol == "Tccn_rm2" || viol == "Tccn_rm3" || viol == "Tccn_rm4" || viol == "Tccn_rm5")
    begin
      #0.097; //tcl
      CLKA = ~CLKA;
      #(param_val_tcc - 0.097 - 0.001);
      CLKA = ~CLKA;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #72.035; 
      CLKA = 1'b1;
      #0.078; //tch
      CLKA = ~CLKA;
      #(param_val_tcc - 0.078 - 0.001);
      CLKA = ~CLKA;
    end
  end
  if (pat === 5)
  begin
    $display (" %t Pattern %d MEA = 0 CLK 0->1->0 MEA = 0->1->0 CLK=0->1->0 checking for %s", $time, pat, viol);
    MEA = 1'b0;
    #72.035; 
    CLKA = 1'b1;
    #72.035; 
    CLKA = 1'b0;   
    if (viol == "Tcl")
    begin
      #0.096; //tcl-tpr
      CLKA = ~CLKA;
    end
    #72.035; 
    MEA = 1'b1;
    #72.035; 
    MEA = 1'b0;
    if (viol == "Tch")
    begin
      #72.035; 
      CLKA = 1'b1;
      #0.077; //tch-tpr
      CLKA = ~CLKA;
    end
    if (viol == "Tcx")
    begin
      #72.035; 
      CLKA = 1'bX;
      #72.035; 
      CLKA = 1'b0;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #72.035; 
      CLKA = 1'b1;
      #0.078; //tch
      CLKA = ~CLKA;
      #(param_val_tcc - 0.078 - 0.001);
      CLKA = ~CLKA;
    end
  end
  if (pat === 6)
  begin
    $display (" %t Pattern %d MEA = 0 CLK 0->1->0 CLK=0->1 MEA = 0->1->0 CLK=1->0 checking for %s", $time, pat, viol);
    MEA = 1'b0;
    #72.035; 
    CLKA = 1'b1;
    #72.035; 
    CLKA = 1'b0;
    if (viol == "Tch")
    begin
      #72.035;
      CLKA = 1'b1;
      #0.023;
      MEA = 1'b1;
      #0.001;
      MEA = 1'b0;
      #(0.078 - 0.025);
      CLKA = ~CLKA;
    end
  end
  if (pat === 7)
  begin
    $display (" %t Pattern %d MEA = 0 CLK 0->1->0->1->0 checking for %s", $time, pat, viol);
    MEA = 1'b0;
    #72.035; 
    CLKA = 1'b1;
    #72.035; 
    CLKA = 1'b0;
    if (viol == "Tch")
    begin
      #72.035;
      CLKA = 1'b1;
      #0.077; //tch-tpr
      CLKA = ~CLKA;
    end
    if (viol == "Tcx")
    begin
      #72.035; 
      CLKA = 1'bX;
      #72.035; 
      CLKA = 1'b0;
    end
    if (viol == "Tcl")
    begin
      MEA = 1'b1;
      #72.035; 
      CLKA = 1'b1;
      #72.035; 
      CLKA = 1'b0;
      #72.035; 
      MEA = 1'b0;
      #72.035; 
      CLKA = 1'b1;
      #72.035; 
      CLKA = 1'b0;
      #0.096; //tcl-tpr
      CLKA = ~CLKA;
    end
    if (viol == "Tccn_rmezo" || viol == "Tccn_rm0" || viol == "Tccn_rm1" || viol == "Tccn_rm2" || viol == "Tccn_rm3" || viol == "Tccn_rm4" || viol == "Tccn_rm5")
    begin
      #0.097; //tcl
      CLKA = ~CLKA;
      #(param_val_tcc - 0.097 - 0.001);
      CLKA = ~CLKA;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #72.035; 
      CLKA = 1'b1;
      #0.078; //tch
      CLKA = ~CLKA;
      #(param_val_tcc - 0.078 - 0.001);
      CLKA = ~CLKA;
    end
    #72.035;
    MEA = 1'b1;
  end
  if (pat === 8)
  begin
    $display (" %t Pattern %d MEA = 0 CLK 0->1->0 CLK=0->1 MEA = 0->1 CLK=1->0->1 checking for %s", $time, pat, viol);
    MEA = 1'b0;
    #72.035; 
    CLKA = 1'b1;
    #72.035; 
    CLKA = 1'b0;
    if (viol == "Tccn_rmezo" || viol == "Tccn_rm0" || viol == "Tccn_rm1" || viol == "Tccn_rm2" || viol == "Tccn_rm3" || viol == "Tccn_rm4" || viol == "Tccn_rm5")
    begin
      #0.097; //tcl
      CLKA = ~CLKA;
      #0.023
      MEA = 1'b1;
      #(0.078 - 0.022);
      CLKA = ~CLKA;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #72.035; 
      CLKA = 1'b1;
      #0.023
      MEA = 1'b1;
      #(0.078 - 0.022);
      CLKA = ~CLKA;
      #0.097; //tcl
      CLKA = ~CLKA;
    end
  end
end
endtask

task check_outputA;
input integer q_stat; // 0->Output is X, 1-> Output is not X
input integer mem_stat; // 0->Memory is X, 1->Memory is not X
input [8*15:1] viol; // Tch,Tcl,Tccn,Tccp
begin
  fork
  join
  restart_clk = 1'b1;
  @(negedge CLKA)
    MEA = 1'b0;
    MEB = 1'b0;
  if (mem_stat == 0)
  begin
    read_memb(1,"",80'bx);
    if ( err_cnt == 0 )
    begin
      $display( "%t Timing parameter(viol) is %s ", $time, viol);
      $display("\n\n@%t           Clock violation corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      $display( "%t Timing parameter(viol) is %s ", $time, viol);
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock violation does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
  @(negedge CLKA)
    write_mema(1,"","");
  @(negedge CLKA)
    read_memb("",10'd0,80'b0);
  end
  else
  begin
    read_memb(1,"","");
    if ( err_cnt == 0 )
    begin
      $display( "%t Timing parameter(viol) is %s ", $time, viol);
      $display("\n\n@%t           Clock violation does not corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      $display( "%t Timing parameter(viol) is %s ", $time, viol);
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock violation corrupts entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    @(negedge CLKA)
    read_memb("",10'd0,80'b0);
  end
  @(negedge CLKA)
    MEA = 1'b0;
    MEB = 1'b0;
end
endtask
task create_patternB;
input integer pat;
input [8*15:1] viol; // Tch,Tcl,Tccn,Tccp
begin
  @(negedge CLKB);
  no_clk = 1;
  if (pat === 1)
  begin
    $display (" %t Pattern %d MEB = 1 CLK 0->1->0->1->0 checking for %s", $time, pat, viol);
    MEB = 1'b1;
    #72.035;
    CLKB = 1'b1;
    #72.035; 
    CLKB = 1'b0;
    if (viol == "Tch")
    begin
      #72.035; 
      CLKB = 1'b1;
      #0.077; //tch-tpr
      CLKB = ~CLKB;
    end
    if (viol == "Tcx")
    begin
      #72.035; 
      CLKB = 1'bX;
      #72.035; 
      CLKB = 1'b0;
    end
    if (viol == "Tcl")
    begin
      #0.096; //tcl-tpr
      CLKB = ~CLKB;
    end
    if (viol == "Tccn_rmezo" || viol == "Tccn_rm0" || viol == "Tccn_rm1" || viol == "Tccn_rm2" || viol == "Tccn_rm3" || viol == "Tccn_rm4" || viol == "Tccn_rm5")
    begin
      #0.097; //tcl
      CLKB = ~CLKB;
      #(param_val_tcc - 0.097 - 0.001);
      CLKB = ~CLKB;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #72.035; 
      CLKB = 1'b1;
      #0.078; //tch
      CLKB = ~CLKB;
      #(param_val_tcc - 0.078 - 0.001);
      CLKB = ~CLKB;
    end
  end
  if (pat === 2)
  begin
    $display (" %t Pattern %d MEB = 1 CLK 0->1 MEB = 0 CLK->0->1->0 checking for %s", $time, pat, viol);
    MEB = 1'b1;
    #72.035; 
    CLKB = 1'b1;
    #0.023;
    MEB = 1'b0;
    #72.035; 
    CLKB = 1'b0;
    if (viol == "Tch")
    begin
      #72.035; 
      CLKB = 1'b1;
      #0.077; //tch-tpr
      CLKB = ~CLKB;
    end
    if (viol == "Tcx")
    begin
      #72.035; 
      CLKB = 1'bX;
      #72.035; 
      CLKB = 1'b0;
    end
    if (viol == "Tcl")
    begin
      #0.096; //tcl-tpr
      CLKB = ~CLKB;
    end
    if (viol == "Tccn_rmezo" || viol == "Tccn_rm0" || viol == "Tccn_rm1" || viol == "Tccn_rm2" || viol == "Tccn_rm3" || viol == "Tccn_rm4" || viol == "Tccn_rm5")
    begin
      #0.097; //tcl
      CLKB = ~CLKB;
      #(param_val_tcc - 0.097 - 0.001);
      CLKB = ~CLKB;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #72.035; 
      CLKB = 1'b1;
      #0.078; //tch
      CLKB = ~CLKB;
      #(param_val_tcc - 0.078 - 0.001);
      CLKB = ~CLKB;
    end
  end
  if (pat === 3)
  begin
    $display (" %t Pattern %d MEB = 0 CLK 0->1->0 MEB = 1 CLK=0->1->0 checking for %s", $time, pat, viol);
    MEB = 1'b0;
    #72.035; 
    CLKB = 1'b1;
    #72.035; 
    CLKB = 1'b0;
    #0.001;
    MEB = 1'b1;
    if (viol == "Tch")
    begin
      #72.035; 
      CLKB = 1'b1;
      #0.077; //tch-tpr
      CLKB = ~CLKB;
    end
    if (viol == "Tcx")
    begin
      #72.035; 
      CLKB = 1'bX;
      #72.035; 
      CLKB = 1'b0;
    end
    if (viol == "Tcl")
    begin
      #0.095; //tch-tpr
      CLKB = ~CLKB;
    end
    if (viol == "Tccn_rmezo" || viol == "Tccn_rm0" || viol == "Tccn_rm1" || viol == "Tccn_rm2" || viol == "Tccn_rm3" || viol == "Tccn_rm4" || viol == "Tccn_rm5")
    begin
      #0.096; //tcl-tpr
      CLKB = ~CLKB;
      #(param_val_tcc - 0.097 - 0.001);
      CLKB = ~CLKB;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #72.035; 
      CLKB = 1'b1;
      #0.078; //tch
      CLKB = ~CLKB;
      #(param_val_tcc - 0.078 - 0.001);
      CLKB = ~CLKB;
    end
    #72.035;
    MEB = 1'b0;
  end
  if (pat === 4)
  begin
    $display (" %t Pattern %d MEB = 0 CLK 0->1 MEB = 0->1->0 CLK=1->0->1->0 checking for %s", $time, pat, viol);
    MEB = 1'b0;
    #72.035; 
    CLKB = 1'b1;
    #0.023;
    MEB = 1'b1;
    #72.035; 
    MEB = 1'b0;
    #10; 
    CLKB = 1'b0;
    if (viol == "Tch")
    begin
      #72.035; 
      CLKB = 1'b1;
      #0.077; //tch-tpr
      CLKB = ~CLKB;
    end
    if (viol == "Tcx")
    begin
      #72.035; 
      CLKB = 1'bX;
      #72.035; 
      CLKB = 1'b0;
    end
    if (viol == "Tcl")
    begin
      #0.096; //tcl-tpr
      CLKB = ~CLKB;
    end
    if (viol == "Tccn_rmezo" || viol == "Tccn_rm0" || viol == "Tccn_rm1" || viol == "Tccn_rm2" || viol == "Tccn_rm3" || viol == "Tccn_rm4" || viol == "Tccn_rm5")
    begin
      #0.097; //tcl
      CLKB = ~CLKB;
      #(param_val_tcc - 0.097 - 0.001);
      CLKB = ~CLKB;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #72.035; 
      CLKB = 1'b1;
      #0.078; //tch
      CLKB = ~CLKB;
      #(param_val_tcc - 0.078 - 0.001);
      CLKB = ~CLKB;
    end
  end
  if (pat === 5)
  begin
    $display (" %t Pattern %d MEB = 0 CLK 0->1->0 MEB = 0->1->0 CLK=0->1->0 checking for %s", $time, pat, viol);
    MEB = 1'b0;
    #72.035; 
    CLKB = 1'b1;
    #72.035; 
    CLKB = 1'b0;   
    if (viol == "Tcl")
    begin
      #0.096; //tcl-tpr
      CLKB = ~CLKB;
    end
    #72.035; 
    MEB = 1'b1;
    #72.035; 
    MEB = 1'b0;
    if (viol == "Tch")
    begin
      #72.035; 
      CLKB = 1'b1;
      #0.077; //tch-tpr
      CLKB = ~CLKB;
    end
    if (viol == "Tcx")
    begin
      #72.035; 
      CLKB = 1'bX;
      #72.035; 
      CLKB = 1'b0;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #72.035; 
      CLKB = 1'b1;
      #0.078; //tch
      CLKB = ~CLKB;
      #(param_val_tcc - 0.078 - 0.001);
      CLKB = ~CLKB;
    end
  end
  if (pat === 6)
  begin
    $display (" %t Pattern %d MEB = 0 CLK 0->1->0 CLK=0->1 MEB = 0->1->0 CLK=1->0 checking for %s", $time, pat, viol);
    MEB = 1'b0;
    #72.035; 
    CLKB = 1'b1;
    #72.035; 
    CLKB = 1'b0;
    if (viol == "Tch")
    begin
      #72.035;
      CLKB = 1'b1;
      #0.023;
      MEB = 1'b1;
      #0.001;
      MEB = 1'b0;
      #(0.078 - 0.025);
      CLKB = ~CLKB;
    end
  end
  if (pat === 7)
  begin
    $display (" %t Pattern %d MEB = 0 CLK 0->1->0->1->0 checking for %s", $time, pat, viol);
    MEB = 1'b0;
    #72.035; 
    CLKB = 1'b1;
    #72.035; 
    CLKB = 1'b0;
    if (viol == "Tch")
    begin
      #72.035;
      CLKB = 1'b1;
      #0.077; //tch-tpr
      CLKB = ~CLKB;
    end
    if (viol == "Tcx")
    begin
      #72.035; 
      CLKB = 1'bX;
      #72.035; 
      CLKB = 1'b0;
    end
    if (viol == "Tcl")
    begin
      MEB = 1'b1;
      #72.035; 
      CLKB = 1'b1;
      #72.035; 
      CLKB = 1'b0;
      #72.035; 
      MEB = 1'b0;
      #72.035; 
      CLKB = 1'b1;
      #72.035; 
      CLKB = 1'b0;
      #0.096; //tcl-tpr
      CLKB = ~CLKB;
    end
    if (viol == "Tccn_rmezo" || viol == "Tccn_rm0" || viol == "Tccn_rm1" || viol == "Tccn_rm2" || viol == "Tccn_rm3" || viol == "Tccn_rm4" || viol == "Tccn_rm5")
    begin
      #0.097; //tcl
      CLKB = ~CLKB;
      #(param_val_tcc - 0.097 - 0.001);
      CLKB = ~CLKB;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #72.035; 
      CLKB = 1'b1;
      #0.078; //tch
      CLKB = ~CLKB;
      #(param_val_tcc - 0.078 - 0.001);
      CLKB = ~CLKB;
    end
    #72.035;
    MEB = 1'b1;
  end
  if (pat === 8)
  begin
    $display (" %t Pattern %d MEB = 0 CLK 0->1->0 CLK=0->1 MEB = 0->1 CLK=1->0->1 checking for %s", $time, pat, viol);
    MEB = 1'b0;
    #72.035; 
    CLKB = 1'b1;
    #72.035; 
    CLKB = 1'b0;
    if (viol == "Tccn_rmezo" || viol == "Tccn_rm0" || viol == "Tccn_rm1" || viol == "Tccn_rm2" || viol == "Tccn_rm3" || viol == "Tccn_rm4" || viol == "Tccn_rm5")
    begin
      #0.097; //tcl
      CLKB = ~CLKB;
      #0.023
      MEB = 1'b1;
      #(0.078 - 0.022);
      CLKB = ~CLKB;
    end
    if (viol == "Tccp_rmezo" || viol == "Tccp_rm0" || viol == "Tccp_rm1" || viol == "Tccp_rm2" || viol == "Tccp_rm3" || viol == "Tccp_rm4" || viol == "Tccp_rm5")
    begin
      #72.035; 
      CLKB = 1'b1;
      #0.023
      MEB = 1'b1;
      #(0.078 - 0.022);
      CLKB = ~CLKB;
      #0.097; //tcl
      CLKB = ~CLKB;
    end
  end
end
endtask

task check_outputB;
input integer q_stat; // 0->Output is X, 1-> Output is not X
input integer mem_stat; // 0->Memory is X, 1->Memory is not X
input [8*15:1] viol; // Tch,Tcl,Tccn,Tccp
begin
  fork
    begin
    rmdel_tcq;
      if (q_stat == 0)
      begin
        if (QB_BEHAV !== 80'bx)
        begin
          $display( "%t Timing parameter(viol) is %s ", $time, viol);
          test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
        end   
        else
        begin
          $display( "%t Timing parameter(viol) is %s ", $time, viol);
          $display("\n\n@%t           Clock  is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
        end 
      end 
      else
      begin
        if (QB_BEHAV === 80'bx)
        begin
          $display( "%t Timing parameter(viol) is %s ", $time, viol);
          test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
        end   
        else
        begin
          $display( "%t Timing parameter(viol) is %s ", $time, viol);
          $display("\n\n@%t           Clock  is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
        end 
      end
    end
  join
  restart_clk = 1'b1;
  @(negedge CLKB)
    MEB = 1'b0;
    MEB = 1'b0;
  if (mem_stat == 0)
  begin
    read_memb(1,"",80'bx);
    if ( err_cnt == 0 )
    begin
      $display( "%t Timing parameter(viol) is %s ", $time, viol);
      $display("\n\n@%t           Clock violation corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      $display( "%t Timing parameter(viol) is %s ", $time, viol);
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock violation does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
  @(negedge CLKB)
    write_mema(1,"","");
  @(negedge CLKB)
    read_memb("",10'd0,80'b0);
  end
  else
  begin
    read_memb(1,"","");
    if ( err_cnt == 0 )
    begin
      $display( "%t Timing parameter(viol) is %s ", $time, viol);
      $display("\n\n@%t           Clock violation does not corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      $display( "%t Timing parameter(viol) is %s ", $time, viol);
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock violation corrupts entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    @(negedge CLKB)
    read_memb("",10'd0,80'b0);
  end
  @(negedge CLKB)
    MEB = 1'b0;
    MEB = 1'b0;
end
endtask
initial
begin
  no_clk = 0;
  no_tclk = 0;
  no_clkA = 0;
  no_clkB = 0;
  no_tclkA = 0;
  no_tclkB = 0;
  nodftmaskb = 0;
  `ifdef VIRAGE_FAST_VERILOG
    flagrtl = 1;
  `else
    `ifdef rtlmodel
      flagrtl = 1;
    `else
      flagrtl = 0;
    `endif
  `endif
  simul_clk = 0;
  test_num = 0;
  test_status = 0;
  OP_QB = 0;
  ADRA = {10{1'b0}};
  DA = {80{1'b0}};
  WEA = 1'b0;
  MEA = 1'b0;
  #0;
  CLKA = 1'b0;
  TEST1A = 1'b0;
  TEST_RNMA = 1'b0;
  RMEA = 1'b0;
  RMA = {4{1'b0}};
  assist_initial("WA");
  assist_initial("WPULSE");
  LS = 1'b0;
  ADRB = {10{1'b0}};
  MEB = 1'b0;
  #0;
  CLKB = 1'b0;
  TEST1B = 1'b0;
  RMEB = 1'b0;
  RMB = {4{1'b0}};
end

task coverage_1;
  integer i, j, m, n, file1, cnt, count;
  reg [21 :0] control_sig;
  reg [43 :0] pattern_sel;
  reg [121 :0] pattern_reg;
  begin

 // CLKA = x test
      @(negedge CLKA);
      CLKA = 1'bx;
      #100;      
      CLKA = 1'b1;
      #0;
      CLKA = 1'bx;
      #100;      
      CLKA = 1'b1;
      @(negedge CLKB);
      CLKB = 1'bx;
      #100;      
      CLKB = 1'b1;
      #0;
      CLKB = 1'bx;
      #100;      
      CLKB = 1'b1;
    // end clk = x test 

  file1 = $fopen("coverage_1_mismatch.log");
  for (cnt = 100; cnt > 0; cnt = cnt -1) begin
  for(j = 0; j <= 21; j = j + 1) begin
    @(posedge CLKB) begin
      if (pattern_sel[j*2] == 0 && pattern_sel[j*2 + 1] == 0) 
      control_sig[j] = 1'b0;
      else if (pattern_sel[j*2] == 0 && pattern_sel[j*2 + 1] == 1) 
      control_sig[j] = 1'b1;
      else if (pattern_sel[j*2] == 1 && pattern_sel[j*2 + 1] == 0) 
      control_sig[j] = 1'bx;
      else 
      control_sig[j] = 1'b0;
    end
  end

  @(posedge CLKB) begin
    for(m = 0; m <= 43; m = m + 1) begin
      pattern_sel[m] = $random; 
    end
  end

  @(posedge CLKB) begin
    for(n = 0; n<= 121 ; n = n + 1) begin
      if ( n<= 0)
         count = 0;
      pattern_reg[n] = control_sig[count];
      if (count >= 21 ) begin 
        count = 0;
      end else begin
        count=count+1;
      end
    end
  end
 @(posedge CLKB) begin
     ADRA[9:0] = pattern_reg[9:0];
     DA[79:0] = pattern_reg[89:10];
     WEA = pattern_reg[90];
     MEA = pattern_reg[91];
     TEST1A = pattern_reg[92];
     TEST_RNMA = pattern_reg[93];
     RMEA = pattern_reg[94];
     RMA[3:0] = pattern_reg[98:95];
     WA[1:0] = pattern_reg[100:99];
     WPULSE[2:0] = pattern_reg[103:101];
     LS = pattern_reg[104];
     ADRB[9:0] = pattern_reg[114:105];
     MEB = pattern_reg[115];
     TEST1B = pattern_reg[116];
     RMEB = pattern_reg[117];
     RMB[3:0] = pattern_reg[121:118];

      if( QB !== QB_BEHAV ) begin
          test_status = test_status + 1;
          $fwrite (file1, "\n ERROR : Mismatch observed at pattern \n");
          $fwrite (file1, "\n ADRA = %x ",ADRA );
          $fwrite (file1, "\n DA = %x ",DA );
          $fwrite (file1, "\n WEA = %x ",WEA );
          $fwrite (file1, "\n MEA = %x ",MEA );
          $fwrite (file1, "\n TEST1A = %x ",TEST1A );
          $fwrite (file1, "\n TEST_RNMA = %x ",TEST_RNMA );
          $fwrite (file1, "\n RMEA = %x ",RMEA );
          $fwrite (file1, "\n RMA = %x ",RMA );
          $fwrite (file1, "\n WA = %x ",WA );
          $fwrite (file1, "\n WPULSE = %x ",WPULSE );
          $fwrite (file1, "\n LS = %x ",LS );
          $fwrite (file1, "\n ADRB = %x ",ADRB );
          $fwrite (file1, "\n MEB = %x ",MEB );
          $fwrite (file1, "\n TEST1B = %x ",TEST1B );
          $fwrite (file1, "\n RMEB = %x ",RMEB );
          $fwrite (file1, "\n RMB = %x ",RMB );
          $fwrite (file1, "\n QB value = %h \n QB_BEHAV value = %h at time %t ",  QB, QB_BEHAV, $time );
          $fwrite (file1, "\n ***************************************************************************************");
           $display ("\n ERROR_MODEL: Mismatch observed QB  value = %h, QB_BEHAV value = %h at time %t  ", QB , QB_BEHAV, $time);
      end 
end 
end 

  for (cnt = 100; cnt > 0; cnt = cnt -1) begin
  for(j = 0; j <= 21; j = j + 1) begin
    @(posedge CLKB) begin
      if (pattern_sel[j*2] == 0 && pattern_sel[j*2 + 1] == 0) 
      control_sig[j] = 1'b0;
      else if (pattern_sel[j*2] == 0 && pattern_sel[j*2 + 1] == 1) 
      control_sig[j] = 1'b1;
      else if (pattern_sel[j*2] == 1 && pattern_sel[j*2 + 1] == 0) 
      control_sig[j] = 1'bx;
      else 
      control_sig[j] = 1'b0;
    end
  end

  @(posedge CLKB) begin
    for(m = 0; m <= 43; m = m + 1) begin
      pattern_sel[m] = $random; 
    end
  end

  @(posedge CLKB) begin
    for(n = 0; n<= 121 ; n = n + 1) begin
      pattern_reg[n] = $random;
    end
  end
 @(posedge CLKB) begin
     ADRA[9:0] = pattern_reg[9:0];
     DA[79:0] = pattern_reg[89:10];
     WEA = control_sig[0];
     MEA = control_sig[1];
     TEST1A = control_sig[2];
     TEST_RNMA = control_sig[3];
     RMEA = control_sig[4];
     RMA[3:0] = control_sig[ 8:5];
     WA[1:0] = control_sig[ 10:9];
     WPULSE[2:0] = control_sig[ 13:11];
     LS = control_sig[14];
     ADRB[9:0] = pattern_reg[99:90];
     MEB = control_sig[15];
     TEST1B = control_sig[16];
     RMEB = control_sig[17];
     RMB[3:0] = control_sig[ 21:18];
      if( QB !== QB_BEHAV ) begin
          test_status = test_status + 1;
          $fwrite (file1, "\n ERROR : Mismatch observed at pattern \n");
          $fwrite (file1, "\n ADRA = %x ", ADRA );
          $fwrite (file1, "\n DA = %x ", DA );
          $fwrite (file1, "\n WEA = %x ", WEA );
          $fwrite (file1, "\n MEA = %x ", MEA );
          $fwrite (file1, "\n TEST1A = %x ", TEST1A );
          $fwrite (file1, "\n TEST_RNMA = %x ", TEST_RNMA );
          $fwrite (file1, "\n RMEA = %x ", RMEA );
          $fwrite (file1, "\n RMA = %x ", RMA );
          $fwrite (file1, "\n WA = %x ", WA );
          $fwrite (file1, "\n WPULSE = %x ", WPULSE );
          $fwrite (file1, "\n LS = %x ", LS );
          $fwrite (file1, "\n ADRB = %x ", ADRB );
          $fwrite (file1, "\n MEB = %x ", MEB );
          $fwrite (file1, "\n TEST1B = %x ", TEST1B );
          $fwrite (file1, "\n RMEB = %x ", RMEB );
          $fwrite (file1, "\n RMB = %x ", RMB );
          $fwrite (file1, "\n QB_BEHAV value = %h \n QB_BEHAV value = %h at time %t ",  QB, QB_BEHAV, $time );
          $fwrite (file1, "\n ***************************************************************************************");
           $display ("\n ERROR_MODEL: Mismatch observed QB simulated value = %h, QB_BEHAV value = %h at time %t  ", QB , QB_BEHAV, $time);
      end 
end 
end 
$fclose(file1);
end 
endtask

task coverage_2;
  integer i, j, m, q, n, count, cnt, loop_var, file1;
  reg [99 :0] add_data_pattern;
  reg [2 :0] control_sig;
  reg [2 :0] counter;
  reg [5 :0] pattern_sel;
  begin
  file1 = $fopen("coverage_2_mismatch.log");
  loop_var = 8;
  counter = 0;
  test_num = test_num + 1;
  ADRA = 0;
  DA = 0;
  WEA = 0;
  MEA = 0;
  TEST1A = 0;
  TEST_RNMA = 0;
  RMEA = 0;
  RMA = 0;
  WA = 0;
  WPULSE = 0;
  LS = 0;
  ADRB = 0;
  MEB = 0;
  TEST1B = 0;
  RMEB = 0;
  RMB = 0;
   for (cnt = loop_var; cnt > 0; cnt = cnt -1) begin
   counter <= counter +1;
   control_sig = counter;
     for(n = 0; n<= 99 ; n = n + 1) begin
       add_data_pattern[n] = $random;
     end
  @(negedge CLKA);
  @(negedge CLKA) begin
     #5;
     ADRA[9:0] = add_data_pattern[9:0];
     DA[79:0] = add_data_pattern[89:10];
     WEA = control_sig[0];
     MEA = control_sig[1];
  end 
  @(negedge CLKB);
  @(negedge CLKB) begin
     #5;
     ADRB[9:0] = add_data_pattern[99:90];
     MEB = control_sig[2];
  end 
  @(posedge CLKB);
     #2.001;
     if( QB !== QB_BEHAV ) begin
        test_status = test_status + 1;
          $fwrite (file1, "\n ERROR : Mismatch observed at pattern \n");
          $fwrite (file1, "\n ADRA = %x ", ADRA );
          $fwrite (file1, "\n DA = %x ", DA );
          $fwrite (file1, "\n WEA = %x ", WEA );
          $fwrite (file1, "\n MEA = %x ", MEA );
          $fwrite (file1, "\n TEST1A = %x ", TEST1A );
          $fwrite (file1, "\n TEST_RNMA = %x ", TEST_RNMA );
          $fwrite (file1, "\n RMEA = %x ", RMEA );
          $fwrite (file1, "\n RMA = %x ", RMA );
          $fwrite (file1, "\n WA = %x ", WA );
          $fwrite (file1, "\n WPULSE = %x ", WPULSE );
          $fwrite (file1, "\n LS = %x ", LS );
          $fwrite (file1, "\n ADRB = %x ", ADRB );
          $fwrite (file1, "\n MEB = %x ", MEB );
          $fwrite (file1, "\n TEST1B = %x ", TEST1B );
          $fwrite (file1, "\n RMEB = %x ", RMEB );
          $fwrite (file1, "\n RMB = %x ", RMB );
          $fwrite (file1, "\n QB value = %h \n QB_BEHAV value = %h at time %t ",  QB, QB_BEHAV, $time );
          $fwrite (file1, "\n ***************************************************************************************");
        $display ("\n ERROR_MODEL: Mismatch observed QB value = %h, QB_BEHAV value = %h at time %t  ", QB , QB_BEHAV, $time);
      end 
    end 
    $fclose(file1);
  @(negedge CLKA);
  ADRA = 10'b0;
  @(negedge CLKB);
  ADRB = 10'b0;
  end 
endtask

always
begin
 if (restart_clk)
 begin
  #72.035; 
  CLKA = 1'b0;
  CLKB = 1'b0;
  no_clk = 0;
  no_clkA = 0;
  no_clkB = 0;
  #72.035; 
  restart_clk = 1'b0;
 end
 else
 begin
  if(simul_clk === 0 )
  begin
    #70;
    if(!no_clk && !no_clkA)
    CLKA = ~CLKA;
      #2.0349999999999997;
    if(!no_clk && !no_clkB)
    CLKB = ~CLKB;
  end
  else if ( simul_clk === 1) 
  begin
    #70;
    if(!no_clk)
    CLKA = ~CLKA;
    if(!no_clk)
    CLKB = ~CLKB;
  end
  else if ( simul_clk === 2 )
  begin
    #70;
    if(!no_clk)
    CLKA = ~CLKA;
    #0.557;
    if(!no_clk)
    CLKB = ~CLKB;
  end
  else if ( simul_clk === 3 )
  begin
    #70;
    if(!no_clk)
    CLKB = ~CLKB;
     #0.557;
    if(!no_clk)
    CLKA = ~CLKA;
  end
  else if ( simul_clk === 6 )
  begin
    #70;
    if(!no_clk)
    CLKA = ~CLKA;
    #2.0349999999999997;
    if(!no_clk)
    CLKB = ~CLKB;
  end
  else if(simul_clk === 12 )
  begin // CLKA and CLKB 180 degree out of phase
    #0.557;
    if(!no_clk)
    begin
      CLKA = ~CLKA;
      CLKB = ~CLKA;
    end
  end
 end
end

always @(negedge CLKA)
begin
  if (MEA_neg == 1'b1)
    MEA = 1'b1;
end

always @(posedge CLKA)
begin
  if (MEA_pos == 1'b1)
      #0.022 MEA = 1'b0;
end

always @(negedge CLKB)
begin
  if (MEB_neg == 1'b1)
    MEB = 1'b1;
end

always @(posedge CLKB)
begin
  if (MEB_pos == 1'b1)
      #0.022 MEB = 1'b0;
end


//flow
//initialize all variables to 0
//then call write and read task.

initial
begin
  restart_clk = 1'b0;
  simul_clk = 0; 
  MEA   = 1'b0;
  WEA   = 1'b0;
  DA   = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  MEB   = 1'b0;
  ADRA = 1023;
  ADRB = 1022;
  @(negedge CLKA);
  @(negedge CLKA);
  WEA   = 1'b1;
  @(negedge CLKA);
  MEA = 1'b1;
  @(negedge CLKB);
  MEB = 1'b1;
  @(negedge CLKA);
  MEA = 1'b0;
  #0.001;
  WEA = 1'b0;
  @(negedge CLKB);
  MEB = 1'b0;
  #0.001;
  @(negedge CLKA);
  MEA = 1'b1;
  WEA = 1'b1;
  @(negedge CLKB);
  MEB = 1'b1;
  @(negedge CLKA);
  MEA = 1'b0;
  WEA = 1'b0;
  @(negedge CLKB);
  MEB = 1'b0;
  MEA = 1'b1;
  MEB = 1'b1;
  @(negedge CLKA);
  MEA = 1'b0;
  @(negedge CLKB);
  MEB = 1'b0;
  @(negedge CLKA);
  MEA = 1'b1;
  @(negedge CLKB);
  MEB = 1'b1;
  MEA   = 1'b1;
  MEB   = 1'b1;
  #10;
   // Asymetric data pattern
  $display ("\n#######################################################################");
  test_num = 1;
  $display( "\n\n@%t TEST: %d --- Memory write through port A --- \n\n", $time, test_num);
  write_mema(1,"","");
  $display ("\n#######################################################################");
  test_num = 2;
  $display( "\n\n@%t TEST: %d --- Memory read through port B --- \n\n", $time, test_num);
  read_memb(1,"","");
  if ( err_cnt != 0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Memory read through port B Unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Memory read through port B Successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  $display ("\n#######################################################################");
  test_num = 3;
  $display( "\n\n@%t TEST: %d --- Memory write/read During Light Sleep Mode --- \n\n", $time, test_num);
  @(negedge CLKA);
   LS = 1'b0;
  @(negedge CLKA);
  $display("@%t    Writing in Memory data = Addr when LS = 1'b0", $time);
   write_mema(1,"","");
  @(negedge CLKA);
   ADRB = 10'd0;
  @(negedge CLKA);
   MEB = 1'b1;
  @(negedge CLKA);
  @(negedge CLKA);
   LS = 1'b1;
  @(negedge CLKA);
  @(negedge CLKA);
   RMA[3] = ~RMA[3];
  @(negedge CLKA);
   RMA[3] = ~RMA[3];
  @(negedge CLKA);
  @(negedge CLKB);
   RMB[3] = ~RMB[3];
  @(negedge CLKB);
   RMB[3] = ~RMB[3];
  @(negedge CLKB);
   RMA = 4'b0011;
  @(negedge CLKA);
  $display("@%t    Writing in Memory data = 1 when LS = 1'b1", $time);
   write_mema(1,"",80'b1);
  @(negedge CLKA);
    read_memb(1,10'dX,80'b0);
    if ( err_cnt != 0 )
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Output does not retain last state, Operation Unsuccessful Light Sleep Mode\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           Output retain last state, Operation Successful Light Sleep Mode \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  @(negedge CLKA);
  $display( "\n@%t --- Disable Light Sleep Mode Pin and read back the memory contents --- \n", $time);
  @(negedge CLKA);
   MEA = 1'b1;
   MEA = 1'b1;
   DA = 80'd2;
   WEA = 1'b1;
  @(posedge CLKA);
      #0.094;
    
   LS = 1'b0;
  @(negedge CLKA);
   WEA = 1'b0;
  repeat(10) @(negedge CLKA);
  read_memb(1,"","");
  if ( err_cnt != 0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Memory read through port B Unsuccessful after Light Sleep Mode disabled\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Memory read through port B Successful after Light Sleep Mode disabled \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLKA);
  #10;
  #10;
  @(negedge CLKA)
    write_mema(1,"","");
  $display ("\n#######################################################################");
  test_num = 4;
  $display( "\n\n@%t TEST: %d ---  TEST_RNMA Functionality Test  --- \n\n", $time, test_num);
  @(negedge CLKA);
   write_mema(1,"","");
  @(negedge CLKA);
   write_mema("",10'd1,80'd1);
  @(negedge CLKA);
   write_mema("",10'd0,80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010);
  @(negedge CLKB);
   read_memb("",10'd0,80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010);
  @(negedge CLKA);
   TEST_RNMA = 1'b1;
  @(negedge CLKA);
   write_mema("",10'd0,80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101);
  @(negedge CLKB);
   read_memb("",10'd1,80'd1);
  @(negedge CLKB);
   read_memb("",10'd0,80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010);
    if ( err_cnt == 0)
    begin
      $display("\n\n@%t           Read allowed but not write in TEST_RNMA mode. \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end 
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Write successful in TEST_RNMA mode.\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
  @(negedge CLKA);
   TEST_RNMA = 1'b0;
  @(negedge CLKB);
   read_memb("",10'd0,80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010);
    if ( err_cnt == 0)
    begin
      $display("\n\n@%t           Read allowed but not write in TEST_RNMA mode. \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end 
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Write successful in TEST_RNMA mode.\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
  @(negedge CLKA);
   write_mema("",10'd0,80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101);
  @(negedge CLKB);
   read_memb("",10'd0,80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101);
  @(negedge CLKA);
   TEST_RNMA = 1'b1;
  @(negedge CLKA);
   write_mema("",10'd0,80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010);
  @(negedge CLKB);
   read_memb("",10'd1,80'd1);
  @(negedge CLKB);
   read_memb("",10'd0,80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101);
    if ( err_cnt == 0)
    begin
      $display("\n\n@%t           Read allowed but not write in TEST_RNMA mode. \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end 
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Write successful in TEST_RNMA mode.\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
  @(negedge CLKA);
   TEST_RNMA = 1'b0;
  @(negedge CLKB);
   read_memb("",10'd0,80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101);
    if ( err_cnt == 0)
    begin
      $display("\n\n@%t           Read allowed but not write in TEST_RNMA mode. \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end 
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Write successful in TEST_RNMA mode.\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
  $display ("\n#######################################################################");
  test_num = 5;
  $display( "\n\n@%t TEST: %d ---  TEST_RNMA  transition in LS mode. --- \n\n", $time, test_num);
  @(negedge CLKA);
   write_mema(1,"","");
  write_mema("",10'd1,80'd1);
  write_mema("",10'd2,80'd2);
  write_mema("",10'd3,80'd3);
  @(negedge CLKB);
   MEB = 1'b1;
   ADRB = 10'd1;
  @(negedge CLKB);
   QB_prev = QB_BEHAV;
  @(negedge CLKA);
  @(negedge CLKA);
   LS = 1'b1;
  @(negedge CLKB);
   ADRB = 10'd2;
  @(posedge CLKB);
   #0.346;
    if (QB_BEHAV !== QB_prev)
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Read not allowed in Light sleep mode. Operation unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else 
    begin
      $display("\n\n@%t           Read unsuccessful in Light sleep mode. Operation successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  @(negedge CLKA);
   TEST_RNMA = 1'b1;
  @(negedge CLKB);
   ADRB = 10'd3;
  @(posedge CLKB);
   #0.346;
    if (QB_BEHAV !== QB_prev)
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Read not allowed in Light sleep mode with TEST_RNMA high Operation unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else 
    begin
      $display("\n\n@%t           Read unsuccessful in Light sleep mode even if TEST_RNMA is high. Operation successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  @(negedge CLKA);
   LS = 1'b0;
  @(posedge CLKB);
  #0.346;
    if (QB_BEHAV !== 80'd3)
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Read failed when TEST_RNMA is high. Operation unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else 
    begin
      $display("\n\n@%t           Read succeeded when TEST_RNMA is high. Operation successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end 
  @(negedge CLKA);
   TEST_RNMA = 1'b0;
  @(negedge CLKB);
   MEB = 1'b0;

  $display ("\n#######################################################################");
  test_num = 6;
  $display( "\n\n@%t TEST: %d ---  TEST_RNMA  transition in high phase of CLKA in TEST1A mode. --- \n\n", $time, test_num);
  @(negedge CLKA);
  write_mema("",10'd1,80'd1);
  write_mema("",10'd2,80'd2);
  write_mema("",10'd3,80'd3);
  @(negedge CLKA);
      #2.0349999999999997;
   
   TEST1A = 1'b1;
  @(negedge CLKB);
   MEB = 1'b1;
   ADRB = 10'd1;
  @(posedge CLKB);
   #0.346;
    if (QB_BEHAV !== 80'b1)
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Read unsuccessful in TEST1A mode. Operation unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else 
    begin
      $display("\n\n@%t           Read successful in TEST1A mode. Operation successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  @(negedge CLKB);
   MEB = 1'b0;
  @(negedge CLKA);
   MEA = 1'b1;
   WEA = 1'b1;
   ADRA = 10'd1;
  @(posedge CLKA);
      #2.0349999999999997;
   
   TEST_RNMA = 1'b1;
  @(negedge CLKA);
   MEA = 1'b0;
   WEA = 1'b0;
   TEST_RNMA = 1'b0;
  @(negedge CLKB);
   MEB = 1'b1;
  @(posedge CLKB);
   #0.346;
    if (QB_BEHAV !== 80'bx)
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: TEST_RNMA transition in TEST1A mode in high phase of CLKA does not corrupt location. Operation unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else 
    begin
      $display("\n\n@%t           TEST_RNMA transition in TEST1A mode in high phase of CLKA corrupts location. Operation successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  @(negedge CLKB);
   ADRB = 10'd2;
  @(posedge CLKB);
   #0.346;
    if (QB_BEHAV !== 80'd2)
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: TEST_RNMA transition in TEST1A mode in high phase of CLKA corrupts memory. Operation unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else 
    begin
      $display("\n\n@%t           TEST_RNMA transition in TEST1A mode in high phase of CLKA does not corrupt memory. Operation successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  @(negedge CLKA);
      #2.0349999999999997;
   
   TEST1A = 1'b0;
  @(negedge CLKB);
   MEB = 1'b0;
  @(negedge CLKA);
   write_mema(1,"","");

  $display ("\n#######################################################################");
  test_num = 7;
  $display( "\n\n@%t TEST: %d ---  Test for all RMA settings with RMEA = 1'b0 and RMEB = 1'b0  --- \n\n", $time, test_num);
  @(negedge CLKA);
  RMEA = 1'b0;
  @(negedge CLKB);
  RMEB = 1'b0;
  @(negedge CLKA);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = RMB = 4'd0 setting   ---- \n\n", $time, test_num);
  @(negedge CLKA);
  ADRA = 0;
  RMEA = 1'b0;
  RMA = 4'd0;
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
  RMEB = 1'b0;
  RMB = 4'd0;
  $display("@%t    Reading 0 at %b", $time,ADRA);
  @(negedge CLKB);
  read_memb("",10'b0, 80'd0);
  @(negedge CLKB);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = RMB = 4'd1 setting   ---- \n\n", $time, test_num);
  @(negedge CLKA);
  ADRA = 0;
  RMEA = 1'b0;
  RMA = 4'd1;
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
  RMEB = 1'b0;
  RMB = 4'd1;
  $display("@%t    Reading 0 at %b", $time,ADRA);
  @(negedge CLKB);
  read_memb("",10'b0, 80'd0);
  @(negedge CLKB);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = RMB = 4'd2 setting   ---- \n\n", $time, test_num);
  @(negedge CLKA);
  ADRA = 0;
  RMEA = 1'b0;
  RMA = 4'd2;
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
  RMEB = 1'b0;
  RMB = 4'd2;
  $display("@%t    Reading 0 at %b", $time,ADRA);
  @(negedge CLKB);
  read_memb("",10'b0, 80'd0);
  @(negedge CLKB);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = RMB = 4'd3 setting   ---- \n\n", $time, test_num);
  @(negedge CLKA);
  ADRA = 0;
  RMEA = 1'b0;
  RMA = 4'd3;
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
  RMEB = 1'b0;
  RMB = 4'd3;
  $display("@%t    Reading 0 at %b", $time,ADRA);
  @(negedge CLKB);
  read_memb("",10'b0, 80'd0);
  @(negedge CLKB);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = RMB = 4'd4 setting   ---- \n\n", $time, test_num);
  @(negedge CLKA);
  ADRA = 0;
  RMEA = 1'b0;
  RMA = 4'd4;
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
  RMEB = 1'b0;
  RMB = 4'd4;
  $display("@%t    Reading 0 at %b", $time,ADRA);
  @(negedge CLKB);
  read_memb("",10'b0, 80'd0);
  @(negedge CLKB);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = RMB = 4'd5 setting   ---- \n\n", $time, test_num);
  @(negedge CLKA);
  ADRA = 0;
  RMEA = 1'b0;
  RMA = 4'd5;
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
  RMEB = 1'b0;
  RMB = 4'd5;
  $display("@%t    Reading 0 at %b", $time,ADRA);
  @(negedge CLKB);
  read_memb("",10'b0, 80'd0);
  @(negedge CLKB);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = RMB = 4'd6 setting   ---- \n\n", $time, test_num);
  @(negedge CLKA);
  ADRA = 0;
  RMEA = 1'b0;
  RMA = 4'd6;
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
  RMEB = 1'b0;
  RMB = 4'd6;
  $display("@%t    Reading 0 at %b", $time,ADRA);
  @(negedge CLKB);
  read_memb("",10'b0, 80'd0);
  @(negedge CLKB);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = RMB = 4'd7 setting   ---- \n\n", $time, test_num);
  @(negedge CLKA);
  ADRA = 0;
  RMEA = 1'b0;
  RMA = 4'd7;
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
  RMEB = 1'b0;
  RMB = 4'd7;
  $display("@%t    Reading 0 at %b", $time,ADRA);
  @(negedge CLKB);
  read_memb("",10'b0, 80'd0);
  @(negedge CLKB);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = RMB = 4'd8 setting   ---- \n\n", $time, test_num);
  @(negedge CLKA);
  ADRA = 0;
  RMEA = 1'b0;
  RMA = 4'd8;
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
  RMEB = 1'b0;
  RMB = 4'd8;
  $display("@%t    Reading 0 at %b", $time,ADRA);
  @(negedge CLKB);
  read_memb("",10'b0, 80'd0);
  @(negedge CLKB);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = RMB = 4'd9 setting   ---- \n\n", $time, test_num);
  @(negedge CLKA);
  ADRA = 0;
  RMEA = 1'b0;
  RMA = 4'd9;
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
  RMEB = 1'b0;
  RMB = 4'd9;
  $display("@%t    Reading 0 at %b", $time,ADRA);
  @(negedge CLKB);
  read_memb("",10'b0, 80'd0);
  @(negedge CLKB);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = RMB = 4'd10 setting   ---- \n\n", $time, test_num);
  @(negedge CLKA);
  ADRA = 0;
  RMEA = 1'b0;
  RMA = 4'd10;
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
  RMEB = 1'b0;
  RMB = 4'd10;
  $display("@%t    Reading 0 at %b", $time,ADRA);
  @(negedge CLKB);
  read_memb("",10'b0, 80'd0);
  @(negedge CLKB);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = RMB = 4'd11 setting   ---- \n\n", $time, test_num);
  @(negedge CLKA);
  ADRA = 0;
  RMEA = 1'b0;
  RMA = 4'd11;
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
  RMEB = 1'b0;
  RMB = 4'd11;
  $display("@%t    Reading 0 at %b", $time,ADRA);
  @(negedge CLKB);
  read_memb("",10'b0, 80'd0);
  @(negedge CLKB);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = RMB = 4'd12 setting   ---- \n\n", $time, test_num);
  @(negedge CLKA);
  ADRA = 0;
  RMEA = 1'b0;
  RMA = 4'd12;
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
  RMEB = 1'b0;
  RMB = 4'd12;
  $display("@%t    Reading 0 at %b", $time,ADRA);
  @(negedge CLKB);
  read_memb("",10'b0, 80'd0);
  @(negedge CLKB);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = RMB = 4'd13 setting   ---- \n\n", $time, test_num);
  @(negedge CLKA);
  ADRA = 0;
  RMEA = 1'b0;
  RMA = 4'd13;
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
  RMEB = 1'b0;
  RMB = 4'd13;
  $display("@%t    Reading 0 at %b", $time,ADRA);
  @(negedge CLKB);
  read_memb("",10'b0, 80'd0);
  @(negedge CLKB);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = RMB = 4'd14 setting   ---- \n\n", $time, test_num);
  @(negedge CLKA);
  ADRA = 0;
  RMEA = 1'b0;
  RMA = 4'd14;
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
  RMEB = 1'b0;
  RMB = 4'd14;
  $display("@%t    Reading 0 at %b", $time,ADRA);
  @(negedge CLKB);
  read_memb("",10'b0, 80'd0);
  @(negedge CLKB);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = RMB = 4'd15 setting   ---- \n\n", $time, test_num);
  @(negedge CLKA);
  ADRA = 0;
  RMEA = 1'b0;
  RMA = 4'd15;
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
  RMEB = 1'b0;
  RMB = 4'd15;
  $display("@%t    Reading 0 at %b", $time,ADRA);
  @(negedge CLKB);
  read_memb("",10'b0, 80'd0);
  @(negedge CLKB);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  RMA = 4'b0011;
  RMB = 4'b0011;
  #150;

  $display ("\n#######################################################################");
  test_num = 8;
  $display( "\n\n@%t TEST: %d ---  Test for all RMA , RMB settings with RMEA = 1'b1 and RMEB = 1'b1  --- \n\n", $time, test_num);
  @(negedge CLKA);
  RMEA = 1'b1;
  @(negedge CLKB);
  RMEB = 1'b1;
  @(negedge CLKA);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = 4'd0 , RMB = 4'd0  external setting with RMEA = 1'b1 and RMEB = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLKA);
   RMA = 4'd0;
   ADRA = 0;
  @(negedge CLKA);
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
   RMB = 4'd0;
  @(negedge CLKB);
   $display("@%t    Reading 0 at %b", $time,ADRA);
   read_memb("",10'b0, 80'd0);
   @(negedge CLKB);
   @(negedge CLKA);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
   $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
   read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKB);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = 4'd1 , RMB = 4'd1  external setting with RMEA = 1'b1 and RMEB = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLKA);
   RMA = 4'd1;
   ADRA = 0;
  @(negedge CLKA);
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
   RMB = 4'd1;
  @(negedge CLKB);
   $display("@%t    Reading 0 at %b", $time,ADRA);
   read_memb("",10'b0, 80'd0);
   @(negedge CLKB);
   @(negedge CLKA);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
   $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
   read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKB);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = 4'd2 , RMB = 4'd2  external setting with RMEA = 1'b1 and RMEB = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLKA);
   RMA = 4'd2;
   ADRA = 0;
  @(negedge CLKA);
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
   RMB = 4'd2;
  @(negedge CLKB);
   $display("@%t    Reading 0 at %b", $time,ADRA);
   read_memb("",10'b0, 80'd0);
   @(negedge CLKB);
   @(negedge CLKA);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
   $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
   read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKB);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = 4'd3 , RMB = 4'd3  external setting with RMEA = 1'b1 and RMEB = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLKA);
   RMA = 4'd3;
   ADRA = 0;
  @(negedge CLKA);
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
   RMB = 4'd3;
  @(negedge CLKB);
   $display("@%t    Reading 0 at %b", $time,ADRA);
   read_memb("",10'b0, 80'd0);
   @(negedge CLKB);
   @(negedge CLKA);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
   $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
   read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKB);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = 4'd4 , RMB = 4'd4  external setting with RMEA = 1'b1 and RMEB = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLKA);
   RMA = 4'd4;
   ADRA = 0;
  @(negedge CLKA);
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
   RMB = 4'd4;
  @(negedge CLKB);
   $display("@%t    Reading 0 at %b", $time,ADRA);
   read_memb("",10'b0, 80'd0);
   @(negedge CLKB);
   @(negedge CLKA);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
   $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
   read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKB);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = 4'd5 , RMB = 4'd5  external setting with RMEA = 1'b1 and RMEB = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLKA);
   RMA = 4'd5;
   ADRA = 0;
  @(negedge CLKA);
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
   RMB = 4'd5;
  @(negedge CLKB);
   $display("@%t    Reading 0 at %b", $time,ADRA);
   read_memb("",10'b0, 80'd0);
   @(negedge CLKB);
   @(negedge CLKA);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
   $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
   read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKB);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = 4'd6 , RMB = 4'd6  external setting with RMEA = 1'b1 and RMEB = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLKA);
   RMA = 4'd6;
   ADRA = 0;
  @(negedge CLKA);
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
   RMB = 4'd6;
  @(negedge CLKB);
   $display("@%t    Reading 0 at %b", $time,ADRA);
   read_memb("",10'b0, 80'd0);
   @(negedge CLKB);
   @(negedge CLKA);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
   $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
   read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKB);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = 4'd7 , RMB = 4'd7  external setting with RMEA = 1'b1 and RMEB = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLKA);
   RMA = 4'd7;
   ADRA = 0;
  @(negedge CLKA);
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
   RMB = 4'd7;
  @(negedge CLKB);
   $display("@%t    Reading 0 at %b", $time,ADRA);
   read_memb("",10'b0, 80'd0);
   @(negedge CLKB);
   @(negedge CLKA);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
   $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
   read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKB);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = 4'd8 , RMB = 4'd8  external setting with RMEA = 1'b1 and RMEB = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLKA);
   RMA = 4'd8;
   ADRA = 0;
  @(negedge CLKA);
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
   RMB = 4'd8;
  @(negedge CLKB);
   $display("@%t    Reading 0 at %b", $time,ADRA);
   read_memb("",10'b0, 80'd0);
   @(negedge CLKB);
   @(negedge CLKA);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
   $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
   read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKB);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = 4'd9 , RMB = 4'd9  external setting with RMEA = 1'b1 and RMEB = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLKA);
   RMA = 4'd9;
   ADRA = 0;
  @(negedge CLKA);
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
   RMB = 4'd9;
  @(negedge CLKB);
   $display("@%t    Reading 0 at %b", $time,ADRA);
   read_memb("",10'b0, 80'd0);
   @(negedge CLKB);
   @(negedge CLKA);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
   $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
   read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKB);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = 4'd10 , RMB = 4'd10  external setting with RMEA = 1'b1 and RMEB = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLKA);
   RMA = 4'd10;
   ADRA = 0;
  @(negedge CLKA);
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
   RMB = 4'd10;
  @(negedge CLKB);
   $display("@%t    Reading 0 at %b", $time,ADRA);
   read_memb("",10'b0, 80'd0);
   @(negedge CLKB);
   @(negedge CLKA);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
   $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
   read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKB);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = 4'd11 , RMB = 4'd11  external setting with RMEA = 1'b1 and RMEB = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLKA);
   RMA = 4'd11;
   ADRA = 0;
  @(negedge CLKA);
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
   RMB = 4'd11;
  @(negedge CLKB);
   $display("@%t    Reading 0 at %b", $time,ADRA);
   read_memb("",10'b0, 80'd0);
   @(negedge CLKB);
   @(negedge CLKA);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
   $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
   read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKB);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = 4'd12 , RMB = 4'd12  external setting with RMEA = 1'b1 and RMEB = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLKA);
   RMA = 4'd12;
   ADRA = 0;
  @(negedge CLKA);
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
   RMB = 4'd12;
  @(negedge CLKB);
   $display("@%t    Reading 0 at %b", $time,ADRA);
   read_memb("",10'b0, 80'd0);
   @(negedge CLKB);
   @(negedge CLKA);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
   $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
   read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKB);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = 4'd13 , RMB = 4'd13  external setting with RMEA = 1'b1 and RMEB = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLKA);
   RMA = 4'd13;
   ADRA = 0;
  @(negedge CLKA);
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
   RMB = 4'd13;
  @(negedge CLKB);
   $display("@%t    Reading 0 at %b", $time,ADRA);
   read_memb("",10'b0, 80'd0);
   @(negedge CLKB);
   @(negedge CLKA);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
   $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
   read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKB);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = 4'd14 , RMB = 4'd14  external setting with RMEA = 1'b1 and RMEB = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLKA);
   RMA = 4'd14;
   ADRA = 0;
  @(negedge CLKA);
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
   RMB = 4'd14;
  @(negedge CLKB);
   $display("@%t    Reading 0 at %b", $time,ADRA);
   read_memb("",10'b0, 80'd0);
   @(negedge CLKB);
   @(negedge CLKA);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
   $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
   read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKB);
  $display( "\n\n@%t TEST: %d -----Going to test Model for RMA = 4'd15 , RMB = 4'd15  external setting with RMEA = 1'b1 and RMEB = 1'b1  ---- \n\n", $time, test_num);
   @(negedge CLKA);
   RMA = 4'd15;
   ADRA = 0;
  @(negedge CLKA);
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
   RMB = 4'd15;
  @(negedge CLKB);
   $display("@%t    Reading 0 at %b", $time,ADRA);
   read_memb("",10'b0, 80'd0);
   @(negedge CLKB);
   @(negedge CLKA);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  @(negedge CLKB);
   $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
   read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKB);
  @(negedge CLKA);
  RMA = 4'b0011;
  RMB = 4'b0011;
  @(negedge CLKB);
  RMEB = 1'b0;
  @(negedge CLKA);
  RMEA = 1'b0;
  #150;
  @(negedge CLKA);
  WA = 0;
  $display ("\n#######################################################################");
  test_num = 9;
  $display( "\n\n@%t TEST: %d ---  Test for all WA settings --- \n\n", $time, test_num);
  $display( "\n\n@%t TEST: %d -----Going to test Model for WPULSE = 3'd0 setting   ---- \n\n", $time, test_num);
  @(negedge CLKA);
  @(negedge CLKA);
  WPULSE = 3'd0;
  WA = 2'd0;
  @(negedge CLKA);
  ADRA = 0;
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  ADRA = 2;
  $display("@%t    Writing 80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010 at %b", $time,ADRA);
  write_mema("",2,80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010);
  @(negedge CLKA);
  ADRA = 3;
  $display("@%t    Writing 80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101 at %b", $time,ADRA);
  write_mema("",3,80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101);
  @(negedge CLKB);
  ADRB = 0;
  $display("@%t    Reading 0 at %b", $time,ADRB);
  read_memb("",10'b0, 80'd0);
  @(negedge CLKB);
  ADRB = 1;
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRB);
  read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKB);
  ADRB = 2;
  $display("@%t    Reading 80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010 at %b", $time,ADRB);
  read_memb("",2,80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010);
  @(negedge CLKB);
  ADRB = 3;
  $display("@%t    Reading 80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101 at %b", $time,ADRB);
  read_memb("",3,80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101);
  $display( "\n\n@%t TEST: %d -----Going to test Model for WPULSE = 3'd1 setting   ---- \n\n", $time, test_num);
  @(negedge CLKA);
  @(negedge CLKA);
  WPULSE = 3'd1;
  WA = 2'd1;
  @(negedge CLKA);
  ADRA = 0;
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  ADRA = 2;
  $display("@%t    Writing 80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010 at %b", $time,ADRA);
  write_mema("",2,80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010);
  @(negedge CLKA);
  ADRA = 3;
  $display("@%t    Writing 80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101 at %b", $time,ADRA);
  write_mema("",3,80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101);
  @(negedge CLKB);
  ADRB = 0;
  $display("@%t    Reading 0 at %b", $time,ADRB);
  read_memb("",10'b0, 80'd0);
  @(negedge CLKB);
  ADRB = 1;
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRB);
  read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKB);
  ADRB = 2;
  $display("@%t    Reading 80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010 at %b", $time,ADRB);
  read_memb("",2,80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010);
  @(negedge CLKB);
  ADRB = 3;
  $display("@%t    Reading 80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101 at %b", $time,ADRB);
  read_memb("",3,80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101);
  $display( "\n\n@%t TEST: %d -----Going to test Model for WPULSE = 3'd2 setting   ---- \n\n", $time, test_num);
  @(negedge CLKA);
  @(negedge CLKA);
  WPULSE = 3'd2;
  WA = 2'd2;
  @(negedge CLKA);
  ADRA = 0;
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  ADRA = 2;
  $display("@%t    Writing 80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010 at %b", $time,ADRA);
  write_mema("",2,80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010);
  @(negedge CLKA);
  ADRA = 3;
  $display("@%t    Writing 80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101 at %b", $time,ADRA);
  write_mema("",3,80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101);
  @(negedge CLKB);
  ADRB = 0;
  $display("@%t    Reading 0 at %b", $time,ADRB);
  read_memb("",10'b0, 80'd0);
  @(negedge CLKB);
  ADRB = 1;
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRB);
  read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKB);
  ADRB = 2;
  $display("@%t    Reading 80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010 at %b", $time,ADRB);
  read_memb("",2,80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010);
  @(negedge CLKB);
  ADRB = 3;
  $display("@%t    Reading 80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101 at %b", $time,ADRB);
  read_memb("",3,80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101);
  $display( "\n\n@%t TEST: %d -----Going to test Model for WPULSE = 3'd3 setting   ---- \n\n", $time, test_num);
  @(negedge CLKA);
  @(negedge CLKA);
  WPULSE = 3'd3;
  WA = 2'd3;
  @(negedge CLKA);
  ADRA = 0;
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",10'b0,80'd0);
  @(negedge CLKA);
  ADRA = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",10'b1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  ADRA = 2;
  $display("@%t    Writing 80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010 at %b", $time,ADRA);
  write_mema("",2,80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010);
  @(negedge CLKA);
  ADRA = 3;
  $display("@%t    Writing 80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101 at %b", $time,ADRA);
  write_mema("",3,80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101);
  @(negedge CLKB);
  ADRB = 0;
  $display("@%t    Reading 0 at %b", $time,ADRB);
  read_memb("",10'b0, 80'd0);
  @(negedge CLKB);
  ADRB = 1;
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRB);
  read_memb("",10'b1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKB);
  ADRB = 2;
  $display("@%t    Reading 80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010 at %b", $time,ADRB);
  read_memb("",2,80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010);
  @(negedge CLKB);
  ADRB = 3;
  $display("@%t    Reading 80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101 at %b", $time,ADRB);
  read_memb("",3,80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101);
  @(negedge CLKA);
  WA = 0;
  WPULSE = 0;
  @(negedge CLKA);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 10;
  $display( "\n\n@%t TEST: %d ---  TEST1A Transition in Write mode with CLKA active  --- \n\n", $time, test_num);
  @(negedge CLKA);
  write_mema(1,"","");
  @(negedge CLKA);
  ADRA = 0;
  WEA = 1'b1;
  MEA = 1'b1;
  @(negedge CLKB);
  ADRB = 0;
  MEB = 1'b1;
  @(posedge CLKA);
  #0.001;
  TEST1A = 1'b1;
  #0.346;    
  if (QB_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: TEST1A transition in write mode with CLKA active does not corrupt output.  Operation unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           TEST1A transition in write mode with CLKA active corrupts output. Operation successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLKB);
  WEA = 1'b0;
  @(negedge CLKB);
  ADRB = 10'd1;
  @(negedge CLKB);
  ADRB = 10'd0;
  @(negedge CLKB);
  #0.346;
  if (QB_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: TEST1A transition in write mode with CLKA active does not corrupt location.  Operation unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           TEST1A transition in write mode with CLKA active corrupts location. Operation successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLKA);
  begin
      #2.0349999999999997;
   
   TEST1A = 1'b0;
  end
  @(negedge CLKB);
  @(negedge CLKB);
  $display ("\n#######################################################################");
  test_num = 11;
  $display( "\n\n@%t TEST: %d ---  Read in TEST1B mode and write at same address.  --- \n\n", $time, test_num);
  @(negedge CLKA);
  write_mema("",10'd1,80'b0);
  @(negedge CLKB);
  read_memb("",10'd1,80'b0);
  @(negedge CLKB);
  @(negedge CLKB);
  @(negedge CLKB);
      #2.0349999999999997;
  
  TEST1B = 1'b1;
  @(posedge CLKB);
  no_clkB = 1;
  @(negedge CLKA);
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  MEA = 1'b1;
  WEA = 1'b1;
  @(negedge CLKA);
  WEA = 1'b0;
  @(negedge CLKA);
  no_clkB = 0;
  @(negedge CLKB);
  #0.35;    
  if (QB_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Write at same address in TEST1B mode while read is in process, does not corrupt output. Operation unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Write at same address in TEST1B mode while read is in process, corrupts output. Operation successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLKB);
  #0.35;    
  if (QB_BEHAV !== 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Newly written data is not read successfully. Operation unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Newly written data is  read successfully. Operation successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLKB);
  @(negedge CLKB);
  @(negedge CLKB);
      #2.0349999999999997;
  
  TEST1B = 1'b0;
  @(negedge CLKA);
  write_mema("",10'd1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKB);
  read_memb("",10'd1,80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKB);
  @(negedge CLKB);
  @(negedge CLKB);
      #2.0349999999999997;
  
  TEST1B = 1'b1;
  @(posedge CLKB);
  no_clkB = 1;
  @(negedge CLKA);
  DA = 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
  MEA = 1'b1;
  WEA = 1'b1;
  @(negedge CLKA);
  WEA = 1'b0;
  @(negedge CLKA);
  no_clkB = 0;
  @(negedge CLKB);
  #0.35;    
  if (QB_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Write at same address in TEST1B mode while read is in process, corrupts output. Operation unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Write at same address in TEST1B mode while read is in process, does not corrupt output. Operation successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLKB);
  #0.35;    
  if (QB_BEHAV !== 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Newly written data is read successfully. Operation unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Newly written data is not read successfully. Operation successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLKB);
  @(negedge CLKB);
  @(negedge CLKB);
      #2.0349999999999997;
  
  TEST1B = 1'b0;
  @(negedge CLKB);
  restart_clk = 1;
  @(negedge CLKB);

  $display ("\n#######################################################################");
  test_num = 12;
  $display( "\n\n@%t TEST: %d ---  TEST1B Test  --- \n\n", $time, test_num);
  write_mema(1,"","");
  @(negedge CLKB);
  MEB = 1'b1;
     begin
      #2.0349999999999997;
     
     TEST1B = 1'b1;
     end
  read_mem_test1b(1,"","");
  if (err_cnt == 0)
  begin
    $display("\n\n@%t           When TEST1B is active,X observed at posedge of CLKB and data observed at negedge of CLKB Operation successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: When TEST1B is active,either X not observed at posedge of CLKB or data not observed at negedge of CLKB Operation unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKB);
  #0.001;
  TEST1B = 1'b0;

  @(negedge CLKB);
  MEA = 1'b0;
  WEA = 1'b0;
  $display ("\n#######################################################################");
  test_num = 13;
  $display( "\n\n@%t TEST: %d ---  TEST1B Transition in Read mode with CLKB active  --- \n\n", $time, test_num);
  @(negedge CLKA);
  write_mema(1,"","");
  @(negedge CLKA);
  ADRA = 0;
  WEA = 1'b0;
  MEA = 1'b0;
  @(negedge CLKB);
  ADRB = 0;
  MEB = 1'b1;
  @(posedge CLKB);
  #5;
  TEST1B = 1'b1;
  #0.001;    
  if (QB_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: TEST1B transition in read mode with CLKB active does not corrupt output.  Operation unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           TEST1B transition in read mode with CLKB active corrupts output. Operation successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLKB);
  ADRB = 10'd1;
  @(negedge CLKB);
  ADRB = 10'd0;
  @(negedge CLKB);
  #0.35;    
  if (QB_BEHAV !== 80'b0)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: TEST1B transition in read mode with CLKB active corrupts location.  Operation unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           TEST1B transition in read mode with CLKB active does not corrupt location. Operation successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLKB);
  begin
      #2.0349999999999997;
   
   TEST1B = 1'b0;
  end
  @(negedge CLKB);
  @(negedge CLKB);


  $display ("\n#######################################################################");
  test_num = 14;
  $display( "\n\n@%t TEST: %d ---  TEST1B Test in Read mode With LS --- \n\n", $time, test_num);
  write_mema(1,"","");
  @(negedge CLKB);
  @(negedge CLKB);
  MEA = 1'b0;
  WEA = 1'b0;
  MEB = 1'b0;
  @(negedge CLKB);
  read_memb("",10'd0,80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000);
  @(negedge CLKB);
  ADRB = 1;
      #2.0349999999999997;
  
  TEST1B = 1'b1;
  #10;
  MEB = 1'b1;
  @(posedge CLKB) 
  begin
      #0.094;
    
    $display("@%t    LS = 1'b1 at Posedge of CLKB When TEST1B high", $time);
    LS = 1'b1;
  end
  @(negedge CLKB)
  begin
    ADRB = 0;
    #0.35;    
    QB_prev = QB_BEHAV;
  end
  @(negedge CLKB);
  @(negedge CLKB);
   RMB[3] = ~RMB[3];
  @(negedge CLKB);
   RMB[3] = ~RMB[3];
  @(negedge CLKB);
  @(negedge CLKA);
  @(negedge CLKA);
   RMA[3] = ~RMA[3];
  @(negedge CLKA);
   RMA[3] = ~RMA[3];
  @(negedge CLKA);
   RMB = 4'b0011;
  @(negedge CLKB);
  @(negedge CLKB);

  if (QB_prev === QB_BEHAV)
  begin
    $display("\n\n@%t           When TEST1B is active, LS is high at posedge of CLKB and data observed at previous negedge of CLKB Operation successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: When TEST1B is active, LS is high at posedge of CLKB or data not observed at previous negedge of CLKB Operation unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKB);
  LS = 1'b0;
  @(negedge CLKB);
  @(negedge CLKB);
  ADRB = 1;
  @(negedge CLKB);
  #0.001;
  TEST1B = 1'b0;
  write_mema(1,"","");
  @(negedge CLKB);


  $display ("\n#######################################################################");
  test_num = 15;
  $display( "\n\n@%t TEST: %d ---  X handling of ADRA in Write Mode  --- \n\n", $time, test_num);
  @(negedge CLKA);
   write_mema("",10'd0,80'b0);
  @(negedge CLKA);
   read_memb("",10'd0,80'b0);
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    MEB = 1'b0;
    ADRA = 10'bx1;
    WEA = 1'b1;
  end
  @(negedge CLKA);
  WEA = 1'b0;
  ADRA = 10'b0;
  @(negedge CLKA);
  read_memb(1,"",80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid Address corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid Address does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
`ifndef VIRAGE_SUPPORT_FFV_SIM
  $display ("\n#######################################################################");
  test_num = 16;
  $display( "\n\n@%t TEST: %d ---  Z handling of ADRA in Write Mode  --- \n\n", $time, test_num);
  @(negedge CLKA);
   write_mema("",10'd0,80'b0);
  @(negedge CLKA);
   read_memb("",10'd0,80'b0);
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    MEB = 1'b0;
    ADRA = 10'bz;
    WEA = 1'b1;
  end
  @(negedge CLKA);
  WEA = 1'b0;
  ADRA = 10'b0;
  @(negedge CLKA);
  read_memb(1,"",80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid Address corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid Address does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
`endif
  $display ("\n#######################################################################");
  test_num = 17;
  $display( "\n\n@%t TEST: %d ---  X handling of ADRA in Write Mode with WEA inactive  --- \n\n", $time, test_num);
  @(negedge CLKA);
   write_mema(1,"",80'b0);
  @(negedge CLKA);
   read_memb(1,"",80'b0);
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    MEB = 1'b0;
    ADRA = 10'bx;
    WEA = 1'b0;
  end
  @(negedge CLKA);
    MEA = 1'b0;
    WEA = 1'b0;
    ADRA = 10'b0;
  @(negedge CLKA);
  read_memb(1,"",80'b0);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid Address does not corrupt entire memory when WEA is inactive \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid Address corrupts entire memory when WEA is inactive\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  $display ("\n#######################################################################");
  test_num = 18;
  $display( "\n\n@%t TEST: %d ---  X handling of ADRA in Write Mode with WEA active  --- \n\n", $time, test_num);
  @(negedge CLKA);
   write_mema(1,"",80'b0);
  @(negedge CLKA);
   read_memb(1,"",80'b0);
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    MEB = 1'b0;
    ADRA = 10'bx;
    WEA = 1'b1;
  end
  @(negedge CLKA);
    MEA = 1'b0;
    WEA = 1'b0;
    ADRA = 10'b0;
  @(negedge CLKA);
  read_memb(1,"",80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid Address corrupts entire memory when WEA is inactive \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid Address does not corrupt entire memory when WEA is inactive\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
`ifndef VIRAGE_SUPPORT_FFV_SIM
  $display ("\n#######################################################################");
  test_num = 19;
  $display( "\n\n@%t TEST: %d ---  Z handling of ADRA in Write Mode with WEA inactive  --- \n\n", $time, test_num);
  @(negedge CLKA);
   write_mema(1,"",80'b0);
  @(negedge CLKA);
   read_memb(1,"",80'b0);
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    MEB = 1'b0;
    ADRA = 10'bz;
    WEA = 1'b0;
  end
  @(negedge CLKA);
    MEA = 1'b0;
    WEA = 1'b0;
    ADRA = 10'b0;
  @(negedge CLKA);
  read_memb(1,"",80'b0);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid Address does not corrupt entire memory when WEA is inactive \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid Address corrupts entire memory when WEA is inactive\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
`endif
`ifndef VIRAGE_SUPPORT_FFV_SIM
  $display ("\n#######################################################################");
  test_num = 20;
  $display( "\n\n@%t TEST: %d ---  Z handling of ADRA in Write Mode with WEA active  --- \n\n", $time, test_num);
  @(negedge CLKA);
   write_mema(1,"",80'b0);
  @(negedge CLKA);
   read_memb(1,"",80'b0);
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    MEB = 1'b0;
    ADRA = 10'bz;
    WEA = 1'b1;
  end
  @(negedge CLKA);
    MEA = 1'b0;
    WEA = 1'b0;
    ADRA = 10'b0;
  @(negedge CLKA);
  read_memb(1,"",80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid Address corrupts entire memory when WEA is inactive \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid Address does not corrupt entire memory when WEA is inactive\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
`endif

  $display ("\n#######################################################################");
  test_num = 21;
  $display( "\n\n@%t TEST: %d --- X handling of MEA in Write mode --- \n\n", $time, test_num);
  @(negedge CLKA);
   write_mema("",10'd0,80'b0);
  @(negedge CLKA);
   read_memb("",10'd0,80'b0);
  @(negedge CLKA);
  @(negedge CLKA)
  begin
    MEA = 1'bx;
    MEB = 1'b0;
    ADRA = 0;
    WEA = 1'b1;
  end
  @(posedge CLKB)
  begin
    #0.346;    
    if (QB_BEHAV !== 80'bx)
    begin
      $display("\n\n@%t           Invalid MEA in Write mode does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else 
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid MEA in Write mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
  end
  @(negedge CLKA);
    WEA = 1'b0;
  MEA = 1'b1;
  @(negedge CLKA);
  read_memb(1,"",80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid MEA in Write mode corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid MEA in Write mode does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKA);
  write_mema(1,"","");
  read_memb(1,"","");
  @(negedge CLKA);
  ADRA = 0;
  $display ("\n#######################################################################");
  test_num = 22;
  $display( "\n\n@%t TEST: %d --- X handling of MEA in Write mode in Light Sleep mode. --- \n\n", $time, test_num);
  @(negedge CLKA);
   write_mema("",10'd0,80'b0);
  @(negedge CLKA);
   read_memb("",10'd0,80'b0);
  @(negedge CLKA);
  @(negedge CLKA);
  LS = 1'b1;
  @(negedge CLKA)
  begin
    MEA = 1'bx;
    MEB = 1'b0;
    ADRA = 0;
    WEA = 1'b1;
  end
  @(posedge CLKB)
  begin
    #0.346;    
    if (QB_BEHAV !== 80'bx)
    begin
      $display("\n\n@%t           Invalid MEA in Write mode does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else 
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid MEA in Write mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
  end
  @(negedge CLKA);
  LS = 1'b0;
  MEA = 1'b0;
  @(negedge CLKA);
    WEA = 1'b0;
  @(negedge CLKA);
  read_memb(1,"",80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid MEA in Write mode corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid MEA in Write mode does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKA);
  write_mema(1,"","");
  read_memb(1,"","");
  @(negedge CLKA);
  ADRA = 0;

  $display ("\n#######################################################################");
  test_num = 23;
  $display( "\n\n@%t TEST: %d --- X handling of DA in Read mode --- \n\n", $time, test_num);
  write_mema("",10'd0,80'b0);
  @(negedge CLKA);
  MEA = 1'b1;
  MEB = 1'b1;
  ADRA = 0;
  ADRB = 0;
  DA = 80'bx;
  WEA = 1'b0;
  @(posedge CLKB);
  #0.346;
  if ( QB_BEHAV !== 80'bx)
  begin
    $display("\n\n@%t           Invalid DA in Read mode does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid DA in Read mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  DA = 0;
  @(negedge CLKA);
  read_memb("",10'd0,80'b0);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid DA in Read mode does not corrupt current location \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid DA in Read mode corrupts current location\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKA);
  @(negedge CLKA);
  ADRA = 0;

  $display ("\n#######################################################################");
  test_num = 24;
  $display( "\n\n@%t TEST: %d --- X handling of DA in Write mode --- \n\n", $time, test_num);
  write_mema("",10'd0,80'b0);
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    MEB = 1'b0;
    ADRA = 0;
    DA = 80'bx;
    WEA = 1'b1;
  end
  @(posedge CLKB)
  begin
  #0.346;
  if ( QB_BEHAV !== 80'bx)
  begin
    $display("\n\n@%t           Invalid DA in Write mode does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid DA in Write mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  end
  @(posedge CLKA);
  #5;
  WEA = 1'b0;
  DA = 0;
  @(negedge CLKA);
  read_memb("",10'd0,80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid DA in Write mode corrupts current location \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid DA in Write mode does not corrupt current location\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKA);
  write_mema("",10'd0,80'b0);
  $display ("\n#######################################################################");
  test_num = 25;
  $display( "\n\n@%t TEST: %d --- X handling of WEA  --- \n\n", $time, test_num);
  @(negedge CLKA);
   write_mema("",10'd0,80'b0);
   write_mema("",10'd1,80'b1);
  @(negedge CLKA);
   read_memb("",10'd0,80'b0);
  @(negedge CLKA);
  MEA = 1'b1;
  ADRA = 0;
  ADRB = 10'b1;
  WEA = 1'bx;
  @(posedge CLKB)
  begin
   #0.346;
   if ( QB_BEHAV === 80'bx)
   begin
     test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid WEA outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
   end
   else
   begin
     $display("\n\n@%t           Invalid WEA does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
   end
  end
  @(negedge CLKA);
  WEA = 1'b0;
  @(negedge CLKA);
  read_memb("",10'd0,80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid WEA corrupts current location \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid WEA does not corrupt current location\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKA);
  write_mema("",10'd0,80'b0);
  @(negedge CLKA);
   read_memb("",10'd0,80'b0);

  $display ("\n#######################################################################");
  test_num = 26;
  $display( "\n\n@%t TEST: %d --- X handling of LS in Write --- \n\n", $time, test_num);
  @(negedge CLKA);
  write_mema(1,"","");
  @(negedge CLKA)
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    MEB = 1'b0;
    ADRA = 0;
    LS = 1'bx;
    WEA = 1'b1;
  end
  @(posedge CLKA)
  begin
      #0.346;
    
    if (QB_BEHAV !== 80'bx)
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid LS - does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           Invalid LS - outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLKA);
    WEA = 1'b0;
    MEA = 1'b0;
    MEB  = 1'b1;
    LS = 1'b0;
  @(negedge CLKA);
  read_memb(1,"",80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid LS corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid LS does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKA);
  @(negedge CLKA);
  write_mema(1,"","");
  @(negedge CLKA);
    ADRA = 0;



  $display ("\n#######################################################################");
  test_num = 27;
  $display( "\n\n@%t TEST: %d --- X handling of TEST1A in Write mode --- \n\n", $time, test_num);
  write_mema(1,"","");
  @(negedge CLKA)
  begin
  MEA = 1'b1;
  MEB = 1'b0;
  ADRA = 0;
  #10;
  TEST1A = 1'bx;
  WEA = 1'b1;
  end
  @(posedge CLKB)
  begin
  #0.346;
  if ( QB_BEHAV !== 80'bx)
  begin
    $display("\n\n@%t           Invalid TEST1A in Write mode does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid TEST1A in Write mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  end
  @(negedge CLKA);
  #5;
  WEA = 1'b0;
  TEST1A = 1'b0;
  @(posedge CLKA);
  read_memb("",10'd0,80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid TEST1A in Write mode corrupts current location \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid TEST1A in Write mode does not corrupt current location\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKA);
  write_mema("",10'd0,80'b0);
  $display ("\n#######################################################################");
  test_num = 28;
  $display( "\n\n@%t TEST: %d --- X handling of TEST_RNMA in Write mode --- \n\n", $time, test_num);
  write_mema(1,"","");
  @(negedge CLKA)
  begin
  MEA = 1'b1;
  MEB = 1'b0;
  ADRA = 0;
  TEST_RNMA = 1'bx;
  WEA = 1'b1;
  end
  @(posedge CLKB)
  #0.346;
  if ( QB_BEHAV !== 80'bx)
  begin
    $display("\n\n@%t           Invalid TEST_RNMA in Write mode does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid TEST_RNMA in Write mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKA);
  WEA = 1'b0;
  TEST_RNMA = 1'b0;
  @(negedge CLKB);
  read_memb(1,"",80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid TEST1A in Write mode corrupts entire memory. \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid TEST1A in Write mode does not corrupt entire memory.\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKA);
  write_mema(1,"","");

  $display ("\n#######################################################################");
  test_num = 29;
  $display( "\n\n@%t TEST: %d --- X handling of RMB in Read mode --- \n\n", $time, test_num);
  @(negedge CLKA)
  begin
    MEB = 1'b1;
    ADRB = 0;
    RMEB = 1'b1;
    RMB = 4'bx;
    WEA = 1'b0;
  end
  @(posedge CLKB);
  rmdel_tcq;
  if ( QB_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RMB in Read mode does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid RMB in Read mode outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #5;
  RMB = 4'b0;
  @(negedge CLKA);
  read_memb("",10'd0,80'b0);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid RMB in Read mode does not corrupt current location \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RMB in Read mode corrupts current location\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKA);
    RMEB = 1'b0;

  $display ("\n#######################################################################");
  test_num = 30;
  $display( "\n\n@%t TEST: %d --- X handling of RMA in Write mode --- \n\n", $time, test_num);
  @(negedge CLKA)
  begin  
    MEA = 1'b1;
    MEB = 1'b0;
    ADRA = 0;
    RMA = 4'bx;
    RMEA = 1'b1;
    WEA = 1'b1;
  end    
  @(posedge CLKB);
  rmdel_tcq;
  if ( QB_BEHAV === 80'bx)
  begin  
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RMA in Write mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end    
  else  
  begin
    $display("\n\n@%t           Invalid RMA in Write mode does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end    
  @(negedge CLKA);
  #5; 
  RMA = 4'b0; 
  WEA = 1'b0;
  @(negedge CLKA); 
  read_memb("",10'd0,80'bx); 
  if ( err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid RMA in Write mode corrupts current location \n\n", $time);
    $display ("\n@%t            PASS\n", $time); 
  end 
  else 
  begin   
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RMA in Write mode does not corrupt current location\n\n", $time);
    $display ("\n@%t            FAIL\n", $time); 
  end 
  #10; 
  @(negedge CLKA);   
  write_mema("",10'd0,80'b0); 
  @(negedge CLKA);   
     RMEA = 1'b0;
     RMA = 4'b0011;

  $display ("\n#######################################################################");
  test_num = 31;
  $display( "\n\n@%t TEST: %d --- X handling of RMEA in Write mode --- \n\n", $time, test_num);
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    MEB = 1'b0;
    ADRA = 0;
    RMEA = 1'bx;
    WEA = 1'b1;
  end
  @(posedge CLKB);
  rmdel_tcq;
  if ( QB_BEHAV === 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RMEA in Write mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid RMEA in Write mode does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLKA);
  #5;
  RMEA = 1'b0;
  WEA = 1'b0;
  @(negedge CLKA);
  read_memb("",10'd0,80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid RMEA in Write mode corrupts current location \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RMEA in Write mode does not corrupt current location\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKA);
  write_mema("",10'd0,80'b0);
  $display ("\n#######################################################################");
  test_num = 32;
  $display( "\n\n@%t TEST: %d --- X handling of RMEA in Light Sleep mode --- \n\n", $time, test_num);
  @(negedge CLKA)
    LS = 1'b1;   
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    MEB = 1'b0;
    ADRA = 0;
    RMEA = 1'bx;
    WEA = 1'b1;
  end
  @(posedge CLKB);
  rmdel_tcq;
  if ( QB_BEHAV === 80'b0)
  begin
    $display("\n\n@%t           Invalid RMEA in Light Sleep mode does not outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RMEA in Light Sleep mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKA);
  #5;
  RMEA = 1'b0;
  WEA = 1'b0;
  @(negedge CLKA);
  read_memb("",10'd0,80'b0);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid RMEA in Light Sleep mode does not corrupts current location \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RMEA in Light Sleep mode corrupts current location\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKA);
  LS = 1'b0;
  @(negedge CLKA);
  write_mema("",10'd0,80'b0);

  $display ("\n#######################################################################");
  test_num = 33;
  $display( "\n\n@%t TEST: %d --- X handling of WA in Write Mode --- \n\n", $time, test_num);
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    ADRA = 0;
    WA = 2'bx;
    WEA = 1'b1;
  end
  @(negedge CLKB);
    MEB = 1'b0;
  @(posedge CLKB);
  #0.346;
  if ( QB_BEHAV === 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid WA in Write Mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid WA in Write Mode does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #5;
  WA = 2'b0;
  WEA = 1'b0;
  @(negedge CLKB);
  read_memb(1,"",80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid WA in Write Mode corrupts Entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid WA in Write Mode does not corrupt Entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKA);
  write_mema(1,"","");
  @(negedge CLKB);
  read_memb("",10'd0,80'b0);

  $display ("\n#######################################################################");
  test_num = 34;
  $display( "\n\n@%t TEST: %d --- X handling of WA in Read Mode --- \n\n", $time, test_num);
  @(negedge CLKA)
  begin
    WA = 2'bx;
    WEA = 1'b0;
  end
  @(negedge CLKB)
  begin
    MEB = 1'b1;
    ADRB = 0;
  end
  @(posedge CLKB);
  #0.346;
  if ( QB_BEHAV === 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid WA in Read Mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid WA in Read Mode does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #5;
  WA = 2'b0;
  @(negedge CLKB);
  read_memb(1,"","");
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid WA in Read Mode does not corrupts Entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid WA in Read Mode corrupt Entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKA);

  $display ("\n#######################################################################");
  test_num = 35;
  $display( "\n\n@%t TEST: %d --- X handling of WPULSE in Write Mode --- \n\n", $time, test_num);
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    ADRA = 0;
    WPULSE = 3'bx;
    WEA = 1'b1;
  end
  @(negedge CLKB);
    MEB = 1'b0;
  @(posedge CLKB);
  #0.346;
  if ( QB_BEHAV === 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid WPULSE in Write Mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid WPULSE in Write Mode does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #5;
  WPULSE = 3'b0;
  WEA = 1'b0;
  @(negedge CLKB);
  read_memb(1,"",80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid WPULSE in Write Mode corrupts Entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid WPULSE in Write Mode does not corrupt Entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKA);
  write_mema(1,"","");
  @(negedge CLKB);
  read_memb("",10'd0,80'b0);
  @(negedge CLKA);

  $display ("\n#######################################################################");
  test_num = 36;
  $display( "\n\n@%t TEST: %d --- X handling of WPULSE in Read Mode --- \n\n", $time, test_num);
  @(negedge CLKA)
  begin
    WPULSE = 3'bx;
    WEA = 1'b0;
  end
  @(negedge CLKB)
  begin
    MEB = 1'b1;
    ADRB = 0;
  end
  @(posedge CLKB);
  #0.346;
  if ( QB_BEHAV === 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid WPULSE in Read Mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid WPULSE in Read Mode does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #5;
  WPULSE = 3'b0;
  @(negedge CLKB);
  read_memb(1,"","");
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid WPULSE in Read Mode does not corrupt Entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid WPULSE in Read Mode corrupts Entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKA);
  @(negedge CLKA);

  @(negedge CLKA);
  @(negedge CLKA);
  write_mema("",10'd0,80'b0);
`ifndef VIRAGE_SUPPORT_FFV_SIM
  $display ("\n#######################################################################");
  test_num = 37;
  $display( "\n\n@%t TEST: %d --- Z handling of MEA in Write mode --- \n\n", $time, test_num);
  @(negedge CLKA);
   write_mema("",10'd0,80'b0);
  @(negedge CLKA);
   read_memb("",10'd0,80'b0);
  @(negedge CLKA);
  @(negedge CLKA)
  begin
    MEA = 1'bz;
    MEB = 1'b0;
    ADRA = 0;
    WEA = 1'b1;
  end
  @(posedge CLKB)
  begin
    #0.346;    
    if (QB_BEHAV !== 80'bx)
    begin
      $display("\n\n@%t           Invalid MEA in Write mode does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else 
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid MEA in Write mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
  end
  @(negedge CLKA);
    WEA = 1'b0;
  MEA = 1'b1;
  @(negedge CLKA);
  read_memb(1,"",80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid MEA in Write mode corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid MEA in Write mode does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKA);
  write_mema(1,"","");
  read_memb(1,"","");
  @(negedge CLKA);
  ADRA = 0;
  $display ("\n#######################################################################");
  test_num = 38;
  $display( "\n\n@%t TEST: %d --- Z handling of MEA in Write mode in Light Sleep mode. --- \n\n", $time, test_num);
  @(negedge CLKA);
   write_mema("",10'd0,80'b0);
  @(negedge CLKA);
   read_memb("",10'd0,80'b0);
  @(negedge CLKA);
  @(negedge CLKA);
  LS = 1'b1;
  @(negedge CLKA)
  begin
    MEA = 1'bz;
    MEB = 1'b0;
    ADRA = 0;
    WEA = 1'b1;
  end
  @(posedge CLKB)
  begin
    #0.346;    
    if (QB_BEHAV !== 80'bx)
    begin
      $display("\n\n@%t           Invalid MEA in Write mode does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else 
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid MEA in Write mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
  end
  @(negedge CLKA);
  LS = 1'b0;
  MEA = 1'b0;
  @(negedge CLKA);
    WEA = 1'b0;
  @(negedge CLKA);
  read_memb(1,"",80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid MEA in Write mode corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid MEA in Write mode does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKA);
  write_mema(1,"","");
  read_memb(1,"","");
  @(negedge CLKA);
  ADRA = 0;

  $display ("\n#######################################################################");
  test_num = 39;
  $display( "\n\n@%t TEST: %d --- Z handling of DA in Read mode --- \n\n", $time, test_num);
  write_mema("",10'd0,80'b0);
  @(negedge CLKA);
  MEA = 1'b1;
  MEB = 1'b1;
  ADRA = 0;
  ADRB = 0;
  DA = 80'bz;
  WEA = 1'b0;
  @(posedge CLKB);
  #0.346;
  if ( QB_BEHAV !== 80'bx)
  begin
    $display("\n\n@%t           Invalid DA in Read mode does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid DA in Read mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  DA = 0;
  @(negedge CLKA);
  read_memb("",10'd0,80'b0);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid DA in Read mode does not corrupt current location \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid DA in Read mode corrupts current location\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKA);
  @(negedge CLKA);
  ADRA = 0;

  $display ("\n#######################################################################");
  test_num = 40;
  $display( "\n\n@%t TEST: %d --- Z handling of DA in Write mode --- \n\n", $time, test_num);
  write_mema("",10'd0,80'b0);
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    MEB = 1'b0;
    ADRA = 0;
    DA = 80'bz;
    WEA = 1'b1;
  end
  @(posedge CLKB)
  begin
  #0.346;
  if ( QB_BEHAV !== 80'bx)
  begin
    $display("\n\n@%t           Invalid DA in Write mode does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid DA in Write mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  end
  @(posedge CLKA);
  #5;
  WEA = 1'b0;
  DA = 0;
  @(negedge CLKA);
  read_memb("",10'd0,80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid DA in Write mode corrupts current location \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid DA in Write mode does not corrupt current location\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKA);
  write_mema("",10'd0,80'b0);
  $display ("\n#######################################################################");
  test_num = 41;
  $display( "\n\n@%t TEST: %d --- Z handling of WEA  --- \n\n", $time, test_num);
  @(negedge CLKA);
   write_mema("",10'd0,80'b0);
   write_mema("",10'd1,80'b1);
  @(negedge CLKA);
   read_memb("",10'd0,80'b0);
  @(negedge CLKA);
  MEA = 1'b1;
  ADRA = 0;
  ADRB = 10'b1;
  WEA = 1'bz;
  @(posedge CLKB)
  begin
   #0.346;
   if ( QB_BEHAV === 80'bx)
   begin
     test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid WEA outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
   end
   else
   begin
     $display("\n\n@%t           Invalid WEA does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
   end
  end
  @(negedge CLKA);
  WEA = 1'b0;
  @(negedge CLKA);
  read_memb("",10'd0,80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid WEA corrupts current location \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid WEA does not corrupt current location\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKA);
  write_mema("",10'd0,80'b0);
  @(negedge CLKA);
   read_memb("",10'd0,80'b0);

  $display ("\n#######################################################################");
  test_num = 42;
  $display( "\n\n@%t TEST: %d --- Z handling of LS in Write --- \n\n", $time, test_num);
  @(negedge CLKA);
  write_mema(1,"","");
  @(negedge CLKA)
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    MEB = 1'b0;
    ADRA = 0;
    LS = 1'bz;
    WEA = 1'b1;
  end
  @(posedge CLKA)
  begin
      #0.346;
    
    if (QB_BEHAV !== 80'bx)
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid LS - does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           Invalid LS - outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLKA);
    WEA = 1'b0;
    MEA = 1'b0;
    MEB  = 1'b1;
    LS = 1'b0;
  @(negedge CLKA);
  read_memb(1,"",80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid LS corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid LS does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKA);
  @(negedge CLKA);
  write_mema(1,"","");
  @(negedge CLKA);
    ADRA = 0;



  $display ("\n#######################################################################");
  test_num = 43;
  $display( "\n\n@%t TEST: %d --- Z handling of TEST1A in Write mode --- \n\n", $time, test_num);
  write_mema(1,"","");
  @(negedge CLKA)
  begin
  MEA = 1'b1;
  MEB = 1'b0;
  ADRA = 0;
  #10;
  TEST1A = 1'bz;
  WEA = 1'b1;
  end
  @(posedge CLKB)
  begin
  #0.346;
  if ( QB_BEHAV !== 80'bx)
  begin
    $display("\n\n@%t           Invalid TEST1A in Write mode does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid TEST1A in Write mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  end
  @(negedge CLKA);
  #5;
  WEA = 1'b0;
  TEST1A = 1'b0;
  @(posedge CLKA);
  read_memb("",10'd0,80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid TEST1A in Write mode corrupts current location \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid TEST1A in Write mode does not corrupt current location\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKA);
  write_mema("",10'd0,80'b0);
  $display ("\n#######################################################################");
  test_num = 44;
  $display( "\n\n@%t TEST: %d --- Z handling of TEST_RNMA in Write mode --- \n\n", $time, test_num);
  write_mema(1,"","");
  @(negedge CLKA)
  begin
  MEA = 1'b1;
  MEB = 1'b0;
  ADRA = 0;
  TEST_RNMA = 1'bz;
  WEA = 1'b1;
  end
  @(posedge CLKB)
  #0.346;
  if ( QB_BEHAV !== 80'bx)
  begin
    $display("\n\n@%t           Invalid TEST_RNMA in Write mode does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid TEST_RNMA in Write mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKA);
  WEA = 1'b0;
  TEST_RNMA = 1'b0;
  @(negedge CLKB);
  read_memb(1,"",80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid TEST1A in Write mode corrupts entire memory. \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid TEST1A in Write mode does not corrupt entire memory.\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKA);
  write_mema(1,"","");

  $display ("\n#######################################################################");
  test_num = 45;
  $display( "\n\n@%t TEST: %d --- Z handling of RMB in Read mode --- \n\n", $time, test_num);
  @(negedge CLKA)
  begin
    MEB = 1'b1;
    ADRB = 0;
    RMEB = 1'b1;
    RMB = 4'bz;
    WEA = 1'b0;
  end
  @(posedge CLKB);
  rmdel_tcq;
  if ( QB_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RMB in Read mode does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid RMB in Read mode outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #5;
  RMB = 4'b0;
  @(negedge CLKA);
  read_memb("",10'd0,80'b0);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid RMB in Read mode does not corrupt current location \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RMB in Read mode corrupts current location\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKA);
    RMEB = 1'b0;

  $display ("\n#######################################################################");
  test_num = 46;
  $display( "\n\n@%t TEST: %d --- Z handling of RMA in Write mode --- \n\n", $time, test_num);
  @(negedge CLKA)
  begin  
    MEA = 1'b1;
    MEB = 1'b0;
    ADRA = 0;
    RMA = 4'bz;
    RMEA = 1'b1;
    WEA = 1'b1;
  end    
  @(posedge CLKB);
  rmdel_tcq;
  if ( QB_BEHAV === 80'bx)
  begin  
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RMA in Write mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end    
  else  
  begin
    $display("\n\n@%t           Invalid RMA in Write mode does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end    
  @(negedge CLKA);
  #5; 
  RMA = 4'b0; 
  WEA = 1'b0;
  @(negedge CLKA); 
  read_memb("",10'd0,80'bx); 
  if ( err_cnt == 0) 
  begin   
    $display("\n\n@%t           Invalid RMA in Write mode corrupts current location \n\n", $time);
    $display ("\n@%t            PASS\n", $time); 
  end 
  else 
  begin   
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RMA in Write mode does not corrupt current location\n\n", $time);
    $display ("\n@%t            FAIL\n", $time); 
  end 
  #10; 
  @(negedge CLKA);   
  write_mema("",10'd0,80'b0); 
  @(negedge CLKA);   
     RMEA = 1'b0;
     RMA = 4'b0011;

  $display ("\n#######################################################################");
  test_num = 47;
  $display( "\n\n@%t TEST: %d --- Z handling of RMEA in Write mode --- \n\n", $time, test_num);
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    MEB = 1'b0;
    ADRA = 0;
    RMEA = 1'bz;
    WEA = 1'b1;
  end
  @(posedge CLKB);
  rmdel_tcq;
  if ( QB_BEHAV === 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RMEA in Write mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid RMEA in Write mode does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLKA);
  #5;
  RMEA = 1'b0;
  WEA = 1'b0;
  @(negedge CLKA);
  read_memb("",10'd0,80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid RMEA in Write mode corrupts current location \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RMEA in Write mode does not corrupt current location\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKA);
  write_mema("",10'd0,80'b0);
  $display ("\n#######################################################################");
  test_num = 48;
  $display( "\n\n@%t TEST: %d --- Z handling of RMEA in Light Sleep mode --- \n\n", $time, test_num);
  @(negedge CLKA)
    LS = 1'b1;   
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    MEB = 1'b0;
    ADRA = 0;
    RMEA = 1'bz;
    WEA = 1'b1;
  end
  @(posedge CLKB);
  rmdel_tcq;
  if ( QB_BEHAV === 80'b0)
  begin
    $display("\n\n@%t           Invalid RMEA in Light Sleep mode does not outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RMEA in Light Sleep mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKA);
  #5;
  RMEA = 1'b0;
  WEA = 1'b0;
  @(negedge CLKA);
  read_memb("",10'd0,80'b0);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid RMEA in Light Sleep mode does not corrupts current location \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RMEA in Light Sleep mode corrupts current location\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKA);
  LS = 1'b0;
  @(negedge CLKA);
  write_mema("",10'd0,80'b0);

  $display ("\n#######################################################################");
  test_num = 49;
  $display( "\n\n@%t TEST: %d --- Z handling of WA in Write Mode --- \n\n", $time, test_num);
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    ADRA = 0;
    WA = 2'bz;
    WEA = 1'b1;
  end
  @(negedge CLKB);
    MEB = 1'b0;
  @(posedge CLKB);
  #0.346;
  if ( QB_BEHAV === 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid WA in Write Mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid WA in Write Mode does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #5;
  WA = 2'b0;
  WEA = 1'b0;
  @(negedge CLKB);
  read_memb(1,"",80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid WA in Write Mode corrupts Entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid WA in Write Mode does not corrupt Entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKA);
  write_mema(1,"","");
  @(negedge CLKB);
  read_memb("",10'd0,80'b0);

  $display ("\n#######################################################################");
  test_num = 50;
  $display( "\n\n@%t TEST: %d --- Z handling of WA in Read Mode --- \n\n", $time, test_num);
  @(negedge CLKA)
  begin
    WA = 2'bz;
    WEA = 1'b0;
  end
  @(negedge CLKB)
  begin
    MEB = 1'b1;
    ADRB = 0;
  end
  @(posedge CLKB);
  #0.346;
  if ( QB_BEHAV === 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid WA in Read Mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid WA in Read Mode does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #5;
  WA = 2'b0;
  @(negedge CLKB);
  read_memb(1,"","");
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid WA in Read Mode does not corrupts Entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid WA in Read Mode corrupt Entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKA);

  $display ("\n#######################################################################");
  test_num = 51;
  $display( "\n\n@%t TEST: %d --- Z handling of WPULSE in Write Mode --- \n\n", $time, test_num);
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    ADRA = 0;
    WPULSE = 3'bz;
    WEA = 1'b1;
  end
  @(negedge CLKB);
    MEB = 1'b0;
  @(posedge CLKB);
  #0.346;
  if ( QB_BEHAV === 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid WPULSE in Write Mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid WPULSE in Write Mode does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #5;
  WPULSE = 3'b0;
  WEA = 1'b0;
  @(negedge CLKB);
  read_memb(1,"",80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid WPULSE in Write Mode corrupts Entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid WPULSE in Write Mode does not corrupt Entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKA);
  write_mema(1,"","");
  @(negedge CLKB);
  read_memb("",10'd0,80'b0);
  @(negedge CLKA);

  $display ("\n#######################################################################");
  test_num = 52;
  $display( "\n\n@%t TEST: %d --- Z handling of WPULSE in Read Mode --- \n\n", $time, test_num);
  @(negedge CLKA)
  begin
    WPULSE = 3'bz;
    WEA = 1'b0;
  end
  @(negedge CLKB)
  begin
    MEB = 1'b1;
    ADRB = 0;
  end
  @(posedge CLKB);
  #0.346;
  if ( QB_BEHAV === 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid WPULSE in Read Mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid WPULSE in Read Mode does not output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #5;
  WPULSE = 3'b0;
  @(negedge CLKB);
  read_memb(1,"","");
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid WPULSE in Read Mode does not corrupt Entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid WPULSE in Read Mode corrupts Entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKA);
  @(negedge CLKA);

  @(negedge CLKA);
  @(negedge CLKA);
  write_mema("",10'd0,80'b0);

  $display ("\n#######################################################################");
  test_num = 53;
  $display( "\n\n@%t TEST: %d ---  X handling of ADRB in Read Mode  --- \n\n", $time, test_num);
  @(negedge CLKA);
    write_mema(1,"","");
  @(negedge CLKB);
   read_memb("",10'd0,80'b0);
  @(negedge CLKB) 
  begin
    MEB = 1'b1;
    ADRB = 10'bx1;
    WEA = 1'b0;
  end
  @(posedge CLKB)
  begin
    #0.346;
    if (QB_BEHAV !== 80'bx)
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid Address does not output X Operation unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
      $display ("ERROR_MODEL: Mismatch observed at ADRB %d, simulated value = %h, expected value = 80'bx at time %t  ",ADRB, QB_BEHAV, $time);
    end
    else 
    begin
      $display("\n\n@%t           Invalid Address outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLKB);
    ADRB = 0;
  read_memb(1,"","");
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid Address during read does not corrupt entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end 
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid Address during read corrupts memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end 
  #10; 
  write_mema(1,"","");
  read_memb(1,"","");
  ADRB = 0;
`ifndef VIRAGE_SUPPORT_FFV_SIM
  $display ("\n#######################################################################");
  test_num = 54;
  $display( "\n\n@%t TEST: %d ---  Z handling of ADRB in Read Mode  --- \n\n", $time, test_num);
  @(negedge CLKA);
    write_mema(1,"","");
  @(negedge CLKB);
   read_memb("",10'd0,80'b0);
  @(negedge CLKB) 
  begin
    MEB = 1'b1;
    ADRB = 10'bz;
    WEA = 1'b0;
  end
  @(posedge CLKB)
  begin
    #0.346;
    if (QB_BEHAV !== 80'bx)
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid Address does not output X Operation unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
      $display ("ERROR_MODEL: Mismatch observed at ADRB %d, simulated value = %h, expected value = 80'bx at time %t  ",ADRB, QB_BEHAV, $time);
    end
    else 
    begin
      $display("\n\n@%t           Invalid Address outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLKB);
    ADRB = 0;
  read_memb(1,"","");
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid Address during read does not corrupt entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end 
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid Address during read corrupts memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end 
  #10; 
  write_mema(1,"","");
  read_memb(1,"","");
  ADRB = 0;
`endif
  $display ("\n#######################################################################");
  test_num = 55;
  $display( "\n\n@%t TEST: %d --- X handling of MEB in Read mode --- \n\n", $time, test_num);
  @(negedge CLKB);
  write_mema("",10'd0,80'b0);
  @(negedge CLKB);
   read_memb("",10'd0,80'b0);
  @(negedge CLKB)
  begin
    MEB = 1'bx;
    ADRB = 0;
    MEA = 1'b0;
    WEA = 1'b0;
  end
  @(posedge CLKB)
  begin
  #0.143;
  if ( QB_BEHAV === 80'bx) 
  begin
    $display("\n\n@%t           Invalid MEB in Read mode outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid MEB in Read mode does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  end
  @(negedge CLKB)
    MEB = 1'b1;
  MEB = 1'b1;
  @(negedge CLKB);
  read_memb(1,"","");
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid Address during read does not corrupt entire memory  \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid Address during read corrupts entire memory \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKB)
  @(negedge CLKB)
  $display ("\n#######################################################################");
  test_num = 56;
  $display( "\n\n@%t TEST: %d --- X handling of MEB in Read mode in Light Sleep mode  --- \n\n", $time, test_num);
  @(negedge CLKB);
  write_mema("",10'd0,80'b0);
  @(negedge CLKB);
   read_memb("",10'd0,80'b0);
  @(negedge CLKB);
   LS = 1'b1;
  @(negedge CLKB)
  begin
    MEB = 1'bx;
    ADRB = 0;
    MEA = 1'b0;
    WEA = 1'b0;
  end
  @(posedge CLKB)
  begin
  #0.143;
  if ( QB_BEHAV === 80'bx) 
  begin
    $display("\n\n@%t           Invalid MEB in Read mode outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid MEB in Read mode does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  end
  @(negedge CLKA);
   LS = 1'b0;
  @(negedge CLKB);
    MEB = 1'b1;
  MEB = 1'b1;
  @(negedge CLKB);
  read_memb(1,"","");
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid Address during read does not corrupt entire memory  \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid Address during read corrupts entire memory \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKB)
  @(negedge CLKB)
`ifndef VIRAGE_SUPPORT_FFV_SIM
  $display ("\n#######################################################################");
  test_num = 57;
  $display( "\n\n@%t TEST: %d --- Z handling of MEB in Read mode --- \n\n", $time, test_num);
  @(negedge CLKB);
  write_mema("",10'd0,80'b0);
  @(negedge CLKB);
   read_memb("",10'd0,80'b0);
  @(negedge CLKB)
  begin
    MEB = 1'bz;
    ADRB = 0;
    MEA = 1'b0;
    WEA = 1'b0;
  end
  @(posedge CLKB)
  begin
  #0.143;
  if ( QB_BEHAV === 80'bx) 
  begin
    $display("\n\n@%t           Invalid MEB in Read mode outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid MEB in Read mode does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  end
  @(negedge CLKB)
    MEB = 1'b1;
  MEB = 1'b1;
  @(negedge CLKB);
  read_memb(1,"","");
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid Address during read does not corrupt entire memory  \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid Address during read corrupts entire memory \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKB)
  @(negedge CLKB)
  $display ("\n#######################################################################");
  test_num = 58;
  $display( "\n\n@%t TEST: %d --- Z handling of MEB in Read mode in Light Sleep mode --- \n\n", $time, test_num);
  @(negedge CLKB);
  write_mema("",10'd0,80'b0);
  @(negedge CLKB);
   read_memb("",10'd0,80'b0);
  @(negedge CLKB);
   LS = 1'b1;
  @(negedge CLKB)
  begin
    MEB = 1'bz;
    ADRB = 0;
    MEA = 1'b0;
    WEA = 1'b0;
  end
  @(posedge CLKB)
  begin
  #0.143;
  if ( QB_BEHAV === 80'bx) 
  begin
    $display("\n\n@%t           Invalid MEB in Read mode outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid MEB in Read mode does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  end
  @(negedge CLKA);
   LS = 1'b0;
  @(negedge CLKB);
    MEB = 1'b1;
  MEB = 1'b1;
  @(negedge CLKB);
  read_memb(1,"","");
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid Address during read does not corrupt entire memory  \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid Address during read corrupts entire memory \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKB)
  @(negedge CLKB)
`endif



  $display ("\n#######################################################################");
  test_num = 59;
  $display( "\n\n@%t TEST: %d --- X handling of LS in Read --- \n\n", $time, test_num);
  @(negedge CLKB);
  write_mema(1,"","");
  @(negedge CLKB)
  @(negedge CLKB)
  begin
    MEA = 1'b0;
    MEB = 1'b1;
    ADRB = 0;
    LS = 1'bx;
    WEA = 1'b0;
  end
  @(posedge CLKB);
      #0.346;
    
    if (QB_BEHAV !== 80'bx)
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid LS does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           Invalid LS outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  @(negedge CLKB);
    LS = 1'b0;
  @(negedge CLKB);
  read_memb(1,"",80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid LS - corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid LS - does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKB);
  @(negedge CLKB);
  write_mema(1,"","");
  @(negedge CLKB);
    ADRB = 0;


  $display ("\n#######################################################################");
  test_num = 60;
  $display( "\n\n@%t TEST: %d --- X handling of TEST1B in Read mode --- \n\n", $time, test_num);
  write_mema(1,"","");
  @(negedge CLKB);
  MEB = 1'b1 ;
  ADRB = 0;
  #10;
  TEST1B = 1'bx;
  WEA = 1'b0;
  @(posedge CLKB);
  #0.346;
  if ( QB_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid TEST1B in Read mode does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid TEST1B in Read mode outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #5;
  TEST1B = 1'b0;
  @(negedge CLKB);
  read_memb("",10'd0,80'b0);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid TEST1B in Read mode does not corrupt current location \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid TEST1B in Read mode corrupts current location\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKB);



  $display ("\n#######################################################################");
  test_num = 61;
  $display( "\n\n@%t TEST: %d --- X handling of RMEB in Read mode --- \n\n", $time, test_num);
  @(negedge CLKB)
  begin
    MEB = 1'b1;
    ADRB = 0;
    RMEB = 1'bx;
    WEA = 1'b0;
  end
  @(posedge CLKB);
  rmdel_tcq;
  if ( QB_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RMEB in Read mode does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid RMEB in Read mode outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #5;
  RMEB = 1'b0;
  @(negedge CLKB);
  read_memb("",10'd0,80'b0);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid RMEB in Read mode does not corrupt current location \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RMEB in Read mode corrupts current location\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKB);
  $display ("\n#######################################################################");
  test_num = 62;
  $display( "\n\n@%t TEST: %d --- X handling of RMEB in Light Sleep mode --- \n\n", $time, test_num);
  @(negedge CLKB)
   LS = 1'b1;
  @(negedge CLKB)
  begin
    MEB = 1'b1;
    ADRB = 0;
    RMEB = 1'bx;
    WEA = 1'b0;
  end
  @(posedge CLKB);
   rmdel_tcq;
  if ( QB_BEHAV === 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RMEB in Light Sleep mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid RMEB in Light Sleep mode does not outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #5;
  RMEB = 1'b0;
  @(negedge CLKB);
  read_memb("",10'd0,80'b0);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid RMEB in Light Sleep mode does not corrupt current location \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RMEB in Light Sleep mode corrupts current location\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKB);
   LS = 1'b0;   
  @(negedge CLKB);






  $display ("\n#######################################################################");
  test_num = 63;
  $display( "\n\n@%t TEST: %d --- Z handling of LS in Read --- \n\n", $time, test_num);
  @(negedge CLKB);
  write_mema(1,"","");
  @(negedge CLKB)
  @(negedge CLKB)
  begin
    MEA = 1'b0;
    MEB = 1'b1;
    ADRB = 0;
    LS = 1'bz;
    WEA = 1'b0;
  end
  @(posedge CLKB);
      #0.346;
    
    if (QB_BEHAV !== 80'bx)
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid LS does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           Invalid LS outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  @(negedge CLKB);
    LS = 1'b0;
  @(negedge CLKB);
  read_memb(1,"",80'bx);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid LS - corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid LS - does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKB);
  @(negedge CLKB);
  write_mema(1,"","");
  @(negedge CLKB);
    ADRB = 0;


  $display ("\n#######################################################################");
  test_num = 64;
  $display( "\n\n@%t TEST: %d --- Z handling of TEST1B in Read mode --- \n\n", $time, test_num);
  write_mema(1,"","");
  @(negedge CLKB);
  MEB = 1'b1 ;
  ADRB = 0;
  #10;
  TEST1B = 1'bz;
  WEA = 1'b0;
  @(posedge CLKB);
  #0.346;
  if ( QB_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid TEST1B in Read mode does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid TEST1B in Read mode outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #5;
  TEST1B = 1'b0;
  @(negedge CLKB);
  read_memb("",10'd0,80'b0);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid TEST1B in Read mode does not corrupt current location \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid TEST1B in Read mode corrupts current location\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKB);



  $display ("\n#######################################################################");
  test_num = 65;
  $display( "\n\n@%t TEST: %d --- Z handling of RMEB in Read mode --- \n\n", $time, test_num);
  @(negedge CLKB)
  begin
    MEB = 1'b1;
    ADRB = 0;
    RMEB = 1'bz;
    WEA = 1'b0;
  end
  @(posedge CLKB);
  rmdel_tcq;
  if ( QB_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RMEB in Read mode does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid RMEB in Read mode outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #5;
  RMEB = 1'b0;
  @(negedge CLKB);
  read_memb("",10'd0,80'b0);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid RMEB in Read mode does not corrupt current location \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RMEB in Read mode corrupts current location\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKB);
  $display ("\n#######################################################################");
  test_num = 66;
  $display( "\n\n@%t TEST: %d --- Z handling of RMEB in Light Sleep mode --- \n\n", $time, test_num);
  @(negedge CLKB)
   LS = 1'b1;
  @(negedge CLKB)
  begin
    MEB = 1'b1;
    ADRB = 0;
    RMEB = 1'bz;
    WEA = 1'b0;
  end
  @(posedge CLKB);
   rmdel_tcq;
  if ( QB_BEHAV === 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RMEB in Light Sleep mode outputs X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Invalid RMEB in Light Sleep mode does not outputs X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #5;
  RMEB = 1'b0;
  @(negedge CLKB);
  read_memb("",10'd0,80'b0);
  if ( err_cnt == 0)
  begin
    $display("\n\n@%t           Invalid RMEB in Light Sleep mode does not corrupt current location \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid RMEB in Light Sleep mode corrupts current location\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKB);
   LS = 1'b0;   
  @(negedge CLKB);




`endif
  write_mema("",10'd0, 80'd0);
  WEA   = 1'b0;
  @(negedge CLKA)
  @(negedge CLKA)
  simul_clk = 1;
  $display ("\n#######################################################################");
  test_num = 67;
  $display( "\n\n@%t TEST: %d ---  Going to test Simultaneous Write & Read with False Violation --- \n\n", $time, test_num);
  @(negedge CLKA)
  simul_clk = 1;
  @(negedge CLKA)
  restart_clk = 1;
  @(negedge CLKB)
   MEB   = 1'b0;
  write_mema("",10'd0, 80'd1);
  write_mema("",10'd2, 80'd0);
  @(negedge CLKB)
  PARAM_FALSE = 1'b1; 
  @(negedge CLKA)
  WEA   = 1'b1;
  MEA   = 1'b0;
  DA = 80'd0;
  ADRA = 0;
  ADRB = 0;
  @(negedge CLKA)
  $display("=========== Enable Write Read function with Write address != Read Address, Check for False Violation ======");
  MEA   = 1'b1;
  ADRB = 10'd2;
  MEB = 1;
  @(negedge CLKA)
  $display("=========== Check for False Violation with swap the write & read addresses ======");
  ADRB = 0;
  DA = 80'd1;
  ADRA = 10'd2;
  @(negedge CLKA)
  DA = 80'd0;
  ADRA = 0;
  WEA   = 1'b0;
  PARAM_FALSE = 1'b0; 
  @(negedge CLKB)
  read_memb("",10'd0, 80'd0);
  read_memb("",10'd2, 80'd1);
  $display ("\n#######################################################################");
  test_num = 68;
  $display( "\n\n@%t TEST: %d ---  Going to test Simultaneous Write & Read with False Violation with Memory Enable signals --- \n\n", $time, test_num);
  @(negedge CLKB)
  PARAM_FALSE = 1'b1; 
  @(negedge CLKA)
  WEA   = 1'b0;
  MEA   = 1'b1;
  DA = 80'd0;
  ADRA = 0;
  ADRB = 0;
  @(negedge CLKA)
  MEB = 1;
  @(negedge CLKA)
  $display("=========== Enabled Write function and disabled Read function, Check for False Violation ======");
  WEA   = 1'b1;
  MEB = 0;
  @(negedge CLKA)
  MEA   = 1'b0;
  MEB = 1;
  $display("=========== Check for False Violation with disabled  write & enabled read operation  ======");
  @(negedge CLKA)
  MEA   = 1'b1;
  DA = 80'd0;
  ADRA = 0;
  WEA   = 1'b0;
  PARAM_FALSE = 1'b0; 
  @(negedge CLKB)
  read_memb("",10'd0, 80'd0);
  $display ("\n#######################################################################");
  test_num = 69;
  $display( "\n\n@%t TEST: %d ---  Going to test Simultaneous Write & Read,  and TEST_RNMA = 1 --- \n\n", $time, test_num);
  @(negedge CLKA)
  write_mema(1,"","");
  write_mema("",10'd1, 80'd1);
  @(negedge CLKA);
  TEST_RNMA = 1'b1;
  ADRA = 0;
  ADRB = 0;
  WEA   = 1'b1;
  MEA   = 1'b1;
  @(negedge CLKA);
  MEB   = 1'b1;
  DA = 80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010;
  @(posedge CLKB);
  rmdel_tcq;
  if ( QB_BEHAV !== 80'd0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Read/Write  Operation unsuccessful \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Read/Write Operation successful  \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLKA);
  ADRA = 10'd1;
  ADRB = 10'd1;
  @(posedge CLKB);
  rmdel_tcq;
  if ( QB_BEHAV !== 80'd1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Read/Write  Operation unsuccessful \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Read/Write Operation successful  \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLKA);
  WEA = 1'b0;
  simul_clk = 0;
  restart_clk = 1;
  @(posedge CLKB);
  rmdel_tcq;
  if ( QB_BEHAV === 80'd1 )
  begin
    $display("\n\n@%t           Write Operation unsuccessful in TEST_RNMA mode. \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Write Operation successful in TEST_RNMA mode.\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKA);
  TEST_RNMA = 1'b0;
  
  write_mema("",10'd0, 80'd0);
  @(negedge CLKA)
  simul_clk = 1;
  $display ("\n#######################################################################");
  test_num = 70;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read  --- \n\n", $time, test_num);
  @(negedge CLKA);
  MEB   = 1'b1;
  ADRA = 0;
  ADRB = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  @(posedge CLKB);
  rmdel_tcq;
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLKA);
  WEA   = 1'b0;
  MEB   = 1'b0;
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  WEA   = 1'b0;
  @(negedge CLKA);
  @(negedge CLKA);
`ifndef SNPS_FAST_SIM_FFV
  if ( flagrtl) 
    simul_clk = 1;
  else
`ifdef zerohold
    simul_clk = 1;
`else
    simul_clk = 2;
`endif
`endif
  $display ("\n#######################################################################");
  test_num = 71;
  $display( "\n\n@%t TEST: %d ---  Going to test Simultaneous Write & Read  --- \n\n", $time, test_num);
   assist_initial("");
  @(negedge CLKA);
  ADRA = 0;
  ADRB = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  @(posedge CLKB);
  rmdel_tcq;
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful  \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  @(negedge CLKA);
  WEA   = 1'b0;
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  @(negedge CLKA);

  @(negedge CLKA);
   RMEA = 1'd0;
   RMEB = 1'd0;
   RMA[3] = 1'b0;
   assist_initial("");
// tcsep is 0.558
  $display ("\n#######################################################################");
  test_num = 72;
  $display( "\n\n@%t TEST: %d ---   Going to test  Simultaneous Write & Read  (CLKA CLKB are at same time)  --- \n\n", $time, test_num);
  @(negedge CLKA);
  simul_clk = 0;
  restart_clk = 1; 
  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  @(negedge CLKA);
  ADRA = 0;
  WEA   = 1'b1;
  MEA   = 1'b1;
  DA = 80'b0;
  @(negedge CLKB);
  MEB = 1'b1;
  ADRB = 0;
  @(negedge CLKA);
  @(negedge CLKB);
  no_clk = 1;
  no_tclk = 1;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  rmdel_tcq;
  QB_prev = QB_BEHAV;
      #2.0349999999999997;
  
  TEST1B = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  CLKA = 1'b1;
  #0.149;
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  CLKA = 1'b0;
  #0.35;    
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end

  $display ("\n#######################################################################");
  test_num = 73;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep) in TEST1B mode   --- \n\n", $time, test_num);

  #11.16;
  QB_prev = QB_BEHAV;

  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b1;
      rmdel_tcsep;
  CLKB = 1'b1;
  #0.149;
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful in TEST1B mode  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful in TEST1B mode  \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
     rmdel_tcsep;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'b0;
  DA[0] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;

  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #1.116;
  QB_prev = QB_BEHAV;
  // tcsep is 0.558
  $display ("\n#######################################################################");
  test_num = 74;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKA = 1'b1;
  #0.557;
  CLKB = 1'b1;
      #0.149;
 
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  #0.35;    
//  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
   if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
`else
  `ifdef VIRAGE_FAST_VERILOG
    if ( QB_BEHAV === 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  `else
    if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
 DA = 80'b0;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;

  // tcsep is 0.558
 $display ("\n#######################################################################");
  test_num = 75;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, greater than tcsep in TEST1B mode)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
      #0.149;
  
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #0.385;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #1.116;
 QB_prev = QB_BEHAV;
  #11.16;
 CLKA = 1'b1;
  #0.385;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
      #0.092;
 
 LS = 1'b1;
 #20;
 LS = 1'b0;
  #11.16;
 CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
 QB_prev = QB_BEHAV;
  // tcsep is 0.558
  $display ("\n#######################################################################");
  test_num = 76;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKB then CLKA, less than tcsep TEST1B mode)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'd1;
  #11.16;
  CLKB = 1'b1;
  #0.385;
  CLKB = 1'b0;
  #0.17200000000000004;
  CLKA = 1'b1;
  #0.35;    
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
`else
  `ifdef VIRAGE_FAST_VERILOG
   if ( QB_BEHAV === QB_prev) 
  `else
   if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #0.385;
  CLKA = 1'b0;
  #0.17400000000000004;
  CLKB = 1'b1;
  #0.385;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== DA )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  #11.16;
  CLKA = 1'b1;
  #0.385;
  CLKA = 1'b0;
  #11.16;
   rmdel_tcsep;
  CLKB = 1'b1;
      #0.092;
  
  LS = 1'b1;
  #11.16;
  LS = 1'b0;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'd1;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
 QB_prev = QB_BEHAV;

  // tcsep is 0.558
  $display ("\n#######################################################################");
  test_num = 77;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKB then CLKA greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
   rmdel_tcsep;
  CLKA = 1'b1;
  rmdel_tcq;
  if (QB_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #0.35;    
  if (QB_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  $display ("\n#######################################################################");
  test_num = 78;
  $display( "\n\n@%t TEST: %d ---  Going to test Simultaneous Write & Read (CLKB then CLKA, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b1;
  #11.16;
  CLKB = 1'b1;
  #0.557;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV === 80'bx )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #0.35;    
  if (QB_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
      #2.0349999999999997;
  
  TEST1B = 1'b0;
  restart_clk = 1'b1;

  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 1;
  // tcsep is 0.558
  $display ("\n#######################################################################");
  test_num = 79;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA CLKB are running at same time)  --- \n\n", $time, test_num);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 0;
  @(negedge CLKA);
  ADRA = 0;
  WEA   = 1'b1;
  MEA   = 1'b1;
  @(negedge CLKB);
  QB_prev = QB_BEHAV;
  MEB = 1'b1;
  ADRB = 0;
  @(negedge CLKA);
  @(negedge CLKB);
  no_clk = 1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[0] === 1'bx && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcsep is 0.558
  $display ("\n#######################################################################");
  test_num = 80;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  rmdel_tcsep;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end

  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  // tcsep is 0.558
  $display ("\n#######################################################################");
  test_num = 81;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[79] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  #0.557;
  CLKB = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[79] === 1'bX && QB_BEHAV[78:0] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
  if ( QB_BEHAV === 80'b0 )
  `else
  if ( QB_BEHAV[79] === 1'bX && QB_BEHAV[78:0] === 79'b0 )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[79] === 1'b1 && QB_BEHAV[78:0] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcsep is 0.558
 $display ("\n#######################################################################");
  test_num = 82;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, greater than tcsep )   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b1;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #0.079;
  CLKB = 1'b0;
  #0.48000000000000004;
 CLKA = 1'b1;
  #0.079;
 CLKA = 1'b0;
  #11.16;
 LS = 1'b1;
      #0.048;
  
 CLKB = 1'b1;
 rmdel_tcq;
`ifdef VIRAGE_FAST_VERILOG
  if ( QB_BEHAV !== 80'b0 ) // No read as LS was 1 at rising edge of  CLKB
`else
  if ( QB_BEHAV !== 80'bX )
`endif
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
 #20;
 LS = 1'b0;
  #0.079;
 CLKB = 1'b0;
  DA = 80'b1;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
 #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  // tcsep is 0.558
  $display ("\n#######################################################################");
  test_num = 83;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep )   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b0;
  #11.16;
  CLKB = 1'b1;
  #0.079;
  CLKB = 1'b0;
      #0.47800000000000004;
  
  CLKA = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
   if ( QB_BEHAV === 80'b1 )
  `else
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
  QB_prev = QB_BEHAV;
  #11.16;
  LS = 1'b1;
      #0.048;
  
  CLKB = 1'b1;
  rmdel_tcq;
  `ifdef VIRAGE_FAST_VERILOG
  if (QB_BEHAV !== QB_prev)
  `else
  if ( QB_BEHAV !== 80'bX )
  `endif
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #20;
  LS = 1'b0;
  #11.16;
 CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcsep is 0.558
  $display ("\n#######################################################################");
  test_num = 84;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcsep;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  $display ("\n#######################################################################");
  test_num = 85;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  #0.557;
  CLKA = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
  if (QB_BEHAV[79:0] === 79'b0)
  `else
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
 `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[0] === 1'b1 && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  restart_clk = 1'b1;
  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 0;
   RMEA = 1'd0;
   RMEB = 1'd0;
      assist_initial("");
  @(negedge CLKA);
   RMEA = 1'd0;
   RMEB = 1'd1;
// tcseprm0 is 2.034
  $display ("\n#######################################################################");
  test_num = 86;
  $display( "\n\n@%t TEST: %d ---   Going to test  Simultaneous Write & Read  (CLKA CLKB are at same time)  --- \n\n", $time, test_num);
  @(negedge CLKA);
  simul_clk = 0;
  restart_clk = 1; 
  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  @(negedge CLKA);
  ADRA = 0;
  WEA   = 1'b1;
  MEA   = 1'b1;
  DA = 80'b0;
  @(negedge CLKB);
  MEB = 1'b1;
  ADRB = 0;
  @(negedge CLKA);
  @(negedge CLKB);
  no_clk = 1;
  no_tclk = 1;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  rmdel_tcq;
  QB_prev = QB_BEHAV;
      #2.0349999999999997;
  
  TEST1B = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  CLKA = 1'b1;
  #0.149;
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  CLKA = 1'b0;
  #0.35;    
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end

  $display ("\n#######################################################################");
  test_num = 87;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep) in TEST1B mode   --- \n\n", $time, test_num);

  #11.16;
  QB_prev = QB_BEHAV;

  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b1;
      rmdel_tcsep;
  CLKB = 1'b1;
  #0.149;
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful in TEST1B mode  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful in TEST1B mode  \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
     rmdel_tcsep;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'b0;
  DA[0] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;

  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #1.116;
  QB_prev = QB_BEHAV;
  // tcseprm0 is 2.034
  $display ("\n#######################################################################");
  test_num = 88;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKA = 1'b1;
  #2.033;
  CLKB = 1'b1;
      #0.149;
 
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  #0.35;    
//  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
   if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
`else
  `ifdef VIRAGE_FAST_VERILOG
    if ( QB_BEHAV === 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  `else
    if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
 DA = 80'b0;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;

  // tcseprm0 is 2.034
 $display ("\n#######################################################################");
  test_num = 89;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, greater than tcsep in TEST1B mode)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
      #0.149;
  
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #0.385;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #1.116;
 QB_prev = QB_BEHAV;
  #11.16;
 CLKA = 1'b1;
  #0.385;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
      #0.092;
 
 LS = 1'b1;
 #20;
 LS = 1'b0;
  #11.16;
 CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
 QB_prev = QB_BEHAV;
  // tcseprm0 is 2.034
  $display ("\n#######################################################################");
  test_num = 90;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKB then CLKA, less than tcsep TEST1B mode)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'd1;
  #11.16;
  CLKB = 1'b1;
  #0.385;
  CLKB = 1'b0;
  #1.6480000000000001;
  CLKA = 1'b1;
  #0.35;    
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
`else
  `ifdef VIRAGE_FAST_VERILOG
   if ( QB_BEHAV === QB_prev) 
  `else
   if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #0.385;
  CLKA = 1'b0;
  #1.65;
  CLKB = 1'b1;
  #0.385;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== DA )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  #11.16;
  CLKA = 1'b1;
  #0.385;
  CLKA = 1'b0;
  #11.16;
   rmdel_tcsep;
  CLKB = 1'b1;
      #0.092;
  
  LS = 1'b1;
  #11.16;
  LS = 1'b0;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'd1;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
 QB_prev = QB_BEHAV;

  // tcseprm0 is 2.034
  $display ("\n#######################################################################");
  test_num = 91;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKB then CLKA greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
   rmdel_tcsep;
  CLKA = 1'b1;
  rmdel_tcq;
  if (QB_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #0.35;    
  if (QB_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  $display ("\n#######################################################################");
  test_num = 92;
  $display( "\n\n@%t TEST: %d ---  Going to test Simultaneous Write & Read (CLKB then CLKA, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b1;
  #11.16;
  CLKB = 1'b1;
  #2.033;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV === 80'bx )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #0.35;    
  if (QB_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
      #2.0349999999999997;
  
  TEST1B = 1'b0;
  restart_clk = 1'b1;

  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 1;
  // tcseprm0 is 2.034
  $display ("\n#######################################################################");
  test_num = 93;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA CLKB are running at same time)  --- \n\n", $time, test_num);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 0;
  @(negedge CLKA);
  ADRA = 0;
  WEA   = 1'b1;
  MEA   = 1'b1;
  @(negedge CLKB);
  QB_prev = QB_BEHAV;
  MEB = 1'b1;
  ADRB = 0;
  @(negedge CLKA);
  @(negedge CLKB);
  no_clk = 1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[0] === 1'bx && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm0 is 2.034
  $display ("\n#######################################################################");
  test_num = 94;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  rmdel_tcsep;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end

  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  // tcseprm0 is 2.034
  $display ("\n#######################################################################");
  test_num = 95;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[79] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  #2.033;
  CLKB = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[79] === 1'bX && QB_BEHAV[78:0] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
  if ( QB_BEHAV === 80'b0 )
  `else
  if ( QB_BEHAV[79] === 1'bX && QB_BEHAV[78:0] === 79'b0 )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[79] === 1'b1 && QB_BEHAV[78:0] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm0 is 2.034
 $display ("\n#######################################################################");
  test_num = 96;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, greater than tcsep )   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b1;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #0.079;
  CLKB = 1'b0;
  #1.9559999999999997;
 CLKA = 1'b1;
  #0.079;
 CLKA = 1'b0;
  #11.16;
 LS = 1'b1;
      #0.048;
  
 CLKB = 1'b1;
 rmdel_tcq;
`ifdef VIRAGE_FAST_VERILOG
  if ( QB_BEHAV !== 80'b0 ) // No read as LS was 1 at rising edge of  CLKB
`else
  if ( QB_BEHAV !== 80'bX )
`endif
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
 #20;
 LS = 1'b0;
  #0.079;
 CLKB = 1'b0;
  DA = 80'b1;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
 #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  // tcseprm0 is 2.034
  $display ("\n#######################################################################");
  test_num = 97;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep )   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b0;
  #11.16;
  CLKB = 1'b1;
  #0.079;
  CLKB = 1'b0;
      #1.954;
  
  CLKA = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
   if ( QB_BEHAV === 80'b1 )
  `else
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
  QB_prev = QB_BEHAV;
  #11.16;
  LS = 1'b1;
      #0.048;
  
  CLKB = 1'b1;
  rmdel_tcq;
  `ifdef VIRAGE_FAST_VERILOG
  if (QB_BEHAV !== QB_prev)
  `else
  if ( QB_BEHAV !== 80'bX )
  `endif
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #20;
  LS = 1'b0;
  #11.16;
 CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm0 is 2.034
  $display ("\n#######################################################################");
  test_num = 98;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcsep;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  $display ("\n#######################################################################");
  test_num = 99;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  #2.033;
  CLKA = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
  if (QB_BEHAV[79:0] === 79'b0)
  `else
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
 `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[0] === 1'b1 && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  restart_clk = 1'b1;
  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 0;
   RMEA = 1'd0;
   RMEB = 1'd0;
      assist_initial("");
  @(negedge CLKA);
   RMEA = 1'd1;
   RMEB = 1'd1;
   RMA = 4'd0;
   RMB = 4'd0;
       WA = 2'b11;
WPULSE = 3'b000;

// tcseprm0 is 2.034
  $display ("\n#######################################################################");
  test_num = 100;
  $display( "\n\n@%t TEST: %d ---   Going to test  Simultaneous Write & Read  (CLKA CLKB are at same time)  --- \n\n", $time, test_num);
  @(negedge CLKA);
  simul_clk = 0;
  restart_clk = 1; 
  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  @(negedge CLKA);
  ADRA = 0;
  WEA   = 1'b1;
  MEA   = 1'b1;
  DA = 80'b0;
  @(negedge CLKB);
  MEB = 1'b1;
  ADRB = 0;
  @(negedge CLKA);
  @(negedge CLKB);
  no_clk = 1;
  no_tclk = 1;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  rmdel_tcq;
  QB_prev = QB_BEHAV;
      #2.0349999999999997;
  
  TEST1B = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  CLKA = 1'b1;
  #0.149;
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  CLKA = 1'b0;
  #0.35;    
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end

  $display ("\n#######################################################################");
  test_num = 101;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep) in TEST1B mode   --- \n\n", $time, test_num);

  #11.16;
  QB_prev = QB_BEHAV;

  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b1;
      rmdel_tcsep;
  CLKB = 1'b1;
  #0.149;
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful in TEST1B mode  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful in TEST1B mode  \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
     rmdel_tcsep;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'b0;
  DA[0] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;

  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #1.116;
  QB_prev = QB_BEHAV;
  // tcseprm0 is 2.034
  $display ("\n#######################################################################");
  test_num = 102;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKA = 1'b1;
  #2.033;
  CLKB = 1'b1;
      #0.149;
 
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  #0.35;    
//  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
   if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
`else
  `ifdef VIRAGE_FAST_VERILOG
    if ( QB_BEHAV === 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  `else
    if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
 DA = 80'b0;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;

  // tcseprm0 is 2.034
 $display ("\n#######################################################################");
  test_num = 103;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, greater than tcsep in TEST1B mode)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
      #0.149;
  
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #0.385;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #1.116;
 QB_prev = QB_BEHAV;
  #11.16;
 CLKA = 1'b1;
  #0.385;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
      #0.092;
 
 LS = 1'b1;
 #20;
 LS = 1'b0;
  #11.16;
 CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
 QB_prev = QB_BEHAV;
  // tcseprm0 is 2.034
  $display ("\n#######################################################################");
  test_num = 104;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKB then CLKA, less than tcsep TEST1B mode)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'd1;
  #11.16;
  CLKB = 1'b1;
  #0.385;
  CLKB = 1'b0;
  #1.6480000000000001;
  CLKA = 1'b1;
  #0.35;    
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
`else
  `ifdef VIRAGE_FAST_VERILOG
   if ( QB_BEHAV === QB_prev) 
  `else
   if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #0.385;
  CLKA = 1'b0;
  #1.65;
  CLKB = 1'b1;
  #0.385;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== DA )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  #11.16;
  CLKA = 1'b1;
  #0.385;
  CLKA = 1'b0;
  #11.16;
   rmdel_tcsep;
  CLKB = 1'b1;
      #0.092;
  
  LS = 1'b1;
  #11.16;
  LS = 1'b0;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'd1;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
 QB_prev = QB_BEHAV;

  // tcseprm0 is 2.034
  $display ("\n#######################################################################");
  test_num = 105;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKB then CLKA greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
   rmdel_tcsep;
  CLKA = 1'b1;
  rmdel_tcq;
  if (QB_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #0.35;    
  if (QB_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  $display ("\n#######################################################################");
  test_num = 106;
  $display( "\n\n@%t TEST: %d ---  Going to test Simultaneous Write & Read (CLKB then CLKA, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b1;
  #11.16;
  CLKB = 1'b1;
  #2.033;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV === 80'bx )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #0.35;    
  if (QB_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
      #2.0349999999999997;
  
  TEST1B = 1'b0;
  restart_clk = 1'b1;

  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 1;
  // tcseprm0 is 2.034
  $display ("\n#######################################################################");
  test_num = 107;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA CLKB are running at same time)  --- \n\n", $time, test_num);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 0;
  @(negedge CLKA);
  ADRA = 0;
  WEA   = 1'b1;
  MEA   = 1'b1;
  @(negedge CLKB);
  QB_prev = QB_BEHAV;
  MEB = 1'b1;
  ADRB = 0;
  @(negedge CLKA);
  @(negedge CLKB);
  no_clk = 1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[0] === 1'bx && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm0 is 2.034
  $display ("\n#######################################################################");
  test_num = 108;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  rmdel_tcsep;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end

  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  // tcseprm0 is 2.034
  $display ("\n#######################################################################");
  test_num = 109;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[79] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  #2.033;
  CLKB = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[79] === 1'bX && QB_BEHAV[78:0] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
  if ( QB_BEHAV === 80'b0 )
  `else
  if ( QB_BEHAV[79] === 1'bX && QB_BEHAV[78:0] === 79'b0 )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[79] === 1'b1 && QB_BEHAV[78:0] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm0 is 2.034
 $display ("\n#######################################################################");
  test_num = 110;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, greater than tcsep )   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b1;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #0.079;
  CLKB = 1'b0;
  #1.9559999999999997;
 CLKA = 1'b1;
  #0.079;
 CLKA = 1'b0;
  #11.16;
 LS = 1'b1;
      #0.048;
  
 CLKB = 1'b1;
 rmdel_tcq;
`ifdef VIRAGE_FAST_VERILOG
  if ( QB_BEHAV !== 80'b0 ) // No read as LS was 1 at rising edge of  CLKB
`else
  if ( QB_BEHAV !== 80'bX )
`endif
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
 #20;
 LS = 1'b0;
  #0.079;
 CLKB = 1'b0;
  DA = 80'b1;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
 #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  // tcseprm0 is 2.034
  $display ("\n#######################################################################");
  test_num = 111;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep )   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b0;
  #11.16;
  CLKB = 1'b1;
  #0.079;
  CLKB = 1'b0;
      #1.954;
  
  CLKA = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
   if ( QB_BEHAV === 80'b1 )
  `else
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
  QB_prev = QB_BEHAV;
  #11.16;
  LS = 1'b1;
      #0.048;
  
  CLKB = 1'b1;
  rmdel_tcq;
  `ifdef VIRAGE_FAST_VERILOG
  if (QB_BEHAV !== QB_prev)
  `else
  if ( QB_BEHAV !== 80'bX )
  `endif
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #20;
  LS = 1'b0;
  #11.16;
 CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm0 is 2.034
  $display ("\n#######################################################################");
  test_num = 112;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcsep;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  $display ("\n#######################################################################");
  test_num = 113;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  #2.033;
  CLKA = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
  if (QB_BEHAV[79:0] === 79'b0)
  `else
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
 `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[0] === 1'b1 && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  restart_clk = 1'b1;
  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 0;
   RMEA = 1'd0;
   RMEB = 1'd0;
      assist_initial("");
  @(negedge CLKA);
   RMEA = 1'd1;
   RMEB = 1'd1;
   RMA = 4'd1;
   RMB = 4'd1;
       WA = 2'b11;
WPULSE = 3'b000;

// tcseprm1 is 0.851
  $display ("\n#######################################################################");
  test_num = 114;
  $display( "\n\n@%t TEST: %d ---   Going to test  Simultaneous Write & Read  (CLKA CLKB are at same time)  --- \n\n", $time, test_num);
  @(negedge CLKA);
  simul_clk = 0;
  restart_clk = 1; 
  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  @(negedge CLKA);
  ADRA = 0;
  WEA   = 1'b1;
  MEA   = 1'b1;
  DA = 80'b0;
  @(negedge CLKB);
  MEB = 1'b1;
  ADRB = 0;
  @(negedge CLKA);
  @(negedge CLKB);
  no_clk = 1;
  no_tclk = 1;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  rmdel_tcq;
  QB_prev = QB_BEHAV;
      #2.0349999999999997;
  
  TEST1B = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  CLKA = 1'b1;
  #0.149;
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  CLKA = 1'b0;
  #0.35;    
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end

  $display ("\n#######################################################################");
  test_num = 115;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep) in TEST1B mode   --- \n\n", $time, test_num);

  #11.16;
  QB_prev = QB_BEHAV;

  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b1;
      rmdel_tcsep;
  CLKB = 1'b1;
  #0.149;
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful in TEST1B mode  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful in TEST1B mode  \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
     rmdel_tcsep;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'b0;
  DA[0] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;

  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #1.116;
  QB_prev = QB_BEHAV;
  // tcseprm1 is 0.851
  $display ("\n#######################################################################");
  test_num = 116;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKA = 1'b1;
  #0.85;
  CLKB = 1'b1;
      #0.149;
 
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  #0.35;    
//  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
   if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
`else
  `ifdef VIRAGE_FAST_VERILOG
    if ( QB_BEHAV === 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  `else
    if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
 DA = 80'b0;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;

  // tcseprm1 is 0.851
 $display ("\n#######################################################################");
  test_num = 117;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, greater than tcsep in TEST1B mode)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
      #0.149;
  
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #0.385;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #1.116;
 QB_prev = QB_BEHAV;
  #11.16;
 CLKA = 1'b1;
  #0.385;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
      #0.092;
 
 LS = 1'b1;
 #20;
 LS = 1'b0;
  #11.16;
 CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
 QB_prev = QB_BEHAV;
  // tcseprm1 is 0.851
  $display ("\n#######################################################################");
  test_num = 118;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKB then CLKA, less than tcsep TEST1B mode)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'd1;
  #11.16;
  CLKB = 1'b1;
  #0.385;
  CLKB = 1'b0;
  #0.46499999999999997;
  CLKA = 1'b1;
  #0.35;    
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
`else
  `ifdef VIRAGE_FAST_VERILOG
   if ( QB_BEHAV === QB_prev) 
  `else
   if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #0.385;
  CLKA = 1'b0;
  #0.46699999999999997;
  CLKB = 1'b1;
  #0.385;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== DA )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  #11.16;
  CLKA = 1'b1;
  #0.385;
  CLKA = 1'b0;
  #11.16;
   rmdel_tcsep;
  CLKB = 1'b1;
      #0.092;
  
  LS = 1'b1;
  #11.16;
  LS = 1'b0;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'd1;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
 QB_prev = QB_BEHAV;

  // tcseprm1 is 0.851
  $display ("\n#######################################################################");
  test_num = 119;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKB then CLKA greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
   rmdel_tcsep;
  CLKA = 1'b1;
  rmdel_tcq;
  if (QB_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #0.35;    
  if (QB_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  $display ("\n#######################################################################");
  test_num = 120;
  $display( "\n\n@%t TEST: %d ---  Going to test Simultaneous Write & Read (CLKB then CLKA, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b1;
  #11.16;
  CLKB = 1'b1;
  #0.85;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV === 80'bx )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #0.35;    
  if (QB_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
      #2.0349999999999997;
  
  TEST1B = 1'b0;
  restart_clk = 1'b1;

  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 1;
  // tcseprm1 is 0.851
  $display ("\n#######################################################################");
  test_num = 121;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA CLKB are running at same time)  --- \n\n", $time, test_num);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 0;
  @(negedge CLKA);
  ADRA = 0;
  WEA   = 1'b1;
  MEA   = 1'b1;
  @(negedge CLKB);
  QB_prev = QB_BEHAV;
  MEB = 1'b1;
  ADRB = 0;
  @(negedge CLKA);
  @(negedge CLKB);
  no_clk = 1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[0] === 1'bx && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm1 is 0.851
  $display ("\n#######################################################################");
  test_num = 122;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  rmdel_tcsep;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end

  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  // tcseprm1 is 0.851
  $display ("\n#######################################################################");
  test_num = 123;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[79] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  #0.85;
  CLKB = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[79] === 1'bX && QB_BEHAV[78:0] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
  if ( QB_BEHAV === 80'b0 )
  `else
  if ( QB_BEHAV[79] === 1'bX && QB_BEHAV[78:0] === 79'b0 )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[79] === 1'b1 && QB_BEHAV[78:0] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm1 is 0.851
 $display ("\n#######################################################################");
  test_num = 124;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, greater than tcsep )   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b1;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #0.079;
  CLKB = 1'b0;
  #0.773;
 CLKA = 1'b1;
  #0.079;
 CLKA = 1'b0;
  #11.16;
 LS = 1'b1;
      #0.048;
  
 CLKB = 1'b1;
 rmdel_tcq;
`ifdef VIRAGE_FAST_VERILOG
  if ( QB_BEHAV !== 80'b0 ) // No read as LS was 1 at rising edge of  CLKB
`else
  if ( QB_BEHAV !== 80'bX )
`endif
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
 #20;
 LS = 1'b0;
  #0.079;
 CLKB = 1'b0;
  DA = 80'b1;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
 #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  // tcseprm1 is 0.851
  $display ("\n#######################################################################");
  test_num = 125;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep )   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b0;
  #11.16;
  CLKB = 1'b1;
  #0.079;
  CLKB = 1'b0;
      #0.771;
  
  CLKA = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
   if ( QB_BEHAV === 80'b1 )
  `else
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
  QB_prev = QB_BEHAV;
  #11.16;
  LS = 1'b1;
      #0.048;
  
  CLKB = 1'b1;
  rmdel_tcq;
  `ifdef VIRAGE_FAST_VERILOG
  if (QB_BEHAV !== QB_prev)
  `else
  if ( QB_BEHAV !== 80'bX )
  `endif
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #20;
  LS = 1'b0;
  #11.16;
 CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm1 is 0.851
  $display ("\n#######################################################################");
  test_num = 126;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcsep;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  $display ("\n#######################################################################");
  test_num = 127;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  #0.85;
  CLKA = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
  if (QB_BEHAV[79:0] === 79'b0)
  `else
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
 `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[0] === 1'b1 && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  restart_clk = 1'b1;
  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 0;
   RMEA = 1'd0;
   RMEB = 1'd0;
      assist_initial("");
  @(negedge CLKA);
   RMEA = 1'd1;
   RMEB = 1'd1;
   RMA = 4'd2;
   RMB = 4'd2;
       WA = 2'b10;
WPULSE = 3'b000;

// tcseprm2 is 0.807
  $display ("\n#######################################################################");
  test_num = 128;
  $display( "\n\n@%t TEST: %d ---   Going to test  Simultaneous Write & Read  (CLKA CLKB are at same time)  --- \n\n", $time, test_num);
  @(negedge CLKA);
  simul_clk = 0;
  restart_clk = 1; 
  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  @(negedge CLKA);
  ADRA = 0;
  WEA   = 1'b1;
  MEA   = 1'b1;
  DA = 80'b0;
  @(negedge CLKB);
  MEB = 1'b1;
  ADRB = 0;
  @(negedge CLKA);
  @(negedge CLKB);
  no_clk = 1;
  no_tclk = 1;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  rmdel_tcq;
  QB_prev = QB_BEHAV;
      #2.0349999999999997;
  
  TEST1B = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  CLKA = 1'b1;
  #0.149;
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  CLKA = 1'b0;
  #0.35;    
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end

  $display ("\n#######################################################################");
  test_num = 129;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep) in TEST1B mode   --- \n\n", $time, test_num);

  #11.16;
  QB_prev = QB_BEHAV;

  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b1;
      rmdel_tcsep;
  CLKB = 1'b1;
  #0.149;
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful in TEST1B mode  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful in TEST1B mode  \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
     rmdel_tcsep;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'b0;
  DA[0] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;

  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #1.116;
  QB_prev = QB_BEHAV;
  // tcseprm2 is 0.807
  $display ("\n#######################################################################");
  test_num = 130;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKA = 1'b1;
  #0.806;
  CLKB = 1'b1;
      #0.149;
 
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  #0.35;    
//  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
   if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
`else
  `ifdef VIRAGE_FAST_VERILOG
    if ( QB_BEHAV === 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  `else
    if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
 DA = 80'b0;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;

  // tcseprm2 is 0.807
 $display ("\n#######################################################################");
  test_num = 131;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, greater than tcsep in TEST1B mode)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
      #0.149;
  
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #0.385;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #1.116;
 QB_prev = QB_BEHAV;
  #11.16;
 CLKA = 1'b1;
  #0.385;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
      #0.092;
 
 LS = 1'b1;
 #20;
 LS = 1'b0;
  #11.16;
 CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
 QB_prev = QB_BEHAV;
  // tcseprm2 is 0.807
  $display ("\n#######################################################################");
  test_num = 132;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKB then CLKA, less than tcsep TEST1B mode)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'd1;
  #11.16;
  CLKB = 1'b1;
  #0.385;
  CLKB = 1'b0;
  #0.42100000000000004;
  CLKA = 1'b1;
  #0.35;    
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
`else
  `ifdef VIRAGE_FAST_VERILOG
   if ( QB_BEHAV === QB_prev) 
  `else
   if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #0.385;
  CLKA = 1'b0;
  #0.42300000000000004;
  CLKB = 1'b1;
  #0.385;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== DA )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  #11.16;
  CLKA = 1'b1;
  #0.385;
  CLKA = 1'b0;
  #11.16;
   rmdel_tcsep;
  CLKB = 1'b1;
      #0.092;
  
  LS = 1'b1;
  #11.16;
  LS = 1'b0;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'd1;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
 QB_prev = QB_BEHAV;

  // tcseprm2 is 0.807
  $display ("\n#######################################################################");
  test_num = 133;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKB then CLKA greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
   rmdel_tcsep;
  CLKA = 1'b1;
  rmdel_tcq;
  if (QB_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #0.35;    
  if (QB_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  $display ("\n#######################################################################");
  test_num = 134;
  $display( "\n\n@%t TEST: %d ---  Going to test Simultaneous Write & Read (CLKB then CLKA, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b1;
  #11.16;
  CLKB = 1'b1;
  #0.806;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV === 80'bx )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #0.35;    
  if (QB_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
      #2.0349999999999997;
  
  TEST1B = 1'b0;
  restart_clk = 1'b1;

  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 1;
  // tcseprm2 is 0.807
  $display ("\n#######################################################################");
  test_num = 135;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA CLKB are running at same time)  --- \n\n", $time, test_num);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 0;
  @(negedge CLKA);
  ADRA = 0;
  WEA   = 1'b1;
  MEA   = 1'b1;
  @(negedge CLKB);
  QB_prev = QB_BEHAV;
  MEB = 1'b1;
  ADRB = 0;
  @(negedge CLKA);
  @(negedge CLKB);
  no_clk = 1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[0] === 1'bx && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm2 is 0.807
  $display ("\n#######################################################################");
  test_num = 136;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  rmdel_tcsep;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end

  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  // tcseprm2 is 0.807
  $display ("\n#######################################################################");
  test_num = 137;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[79] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  #0.806;
  CLKB = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[79] === 1'bX && QB_BEHAV[78:0] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
  if ( QB_BEHAV === 80'b0 )
  `else
  if ( QB_BEHAV[79] === 1'bX && QB_BEHAV[78:0] === 79'b0 )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[79] === 1'b1 && QB_BEHAV[78:0] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm2 is 0.807
 $display ("\n#######################################################################");
  test_num = 138;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, greater than tcsep )   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b1;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #0.079;
  CLKB = 1'b0;
  #0.7290000000000001;
 CLKA = 1'b1;
  #0.079;
 CLKA = 1'b0;
  #11.16;
 LS = 1'b1;
      #0.048;
  
 CLKB = 1'b1;
 rmdel_tcq;
`ifdef VIRAGE_FAST_VERILOG
  if ( QB_BEHAV !== 80'b0 ) // No read as LS was 1 at rising edge of  CLKB
`else
  if ( QB_BEHAV !== 80'bX )
`endif
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
 #20;
 LS = 1'b0;
  #0.079;
 CLKB = 1'b0;
  DA = 80'b1;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
 #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  // tcseprm2 is 0.807
  $display ("\n#######################################################################");
  test_num = 139;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep )   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b0;
  #11.16;
  CLKB = 1'b1;
  #0.079;
  CLKB = 1'b0;
      #0.7270000000000001;
  
  CLKA = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
   if ( QB_BEHAV === 80'b1 )
  `else
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
  QB_prev = QB_BEHAV;
  #11.16;
  LS = 1'b1;
      #0.048;
  
  CLKB = 1'b1;
  rmdel_tcq;
  `ifdef VIRAGE_FAST_VERILOG
  if (QB_BEHAV !== QB_prev)
  `else
  if ( QB_BEHAV !== 80'bX )
  `endif
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #20;
  LS = 1'b0;
  #11.16;
 CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm2 is 0.807
  $display ("\n#######################################################################");
  test_num = 140;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcsep;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  $display ("\n#######################################################################");
  test_num = 141;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  #0.806;
  CLKA = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
  if (QB_BEHAV[79:0] === 79'b0)
  `else
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
 `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[0] === 1'b1 && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  restart_clk = 1'b1;
  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 0;
   RMEA = 1'd0;
   RMEB = 1'd0;
      assist_initial("");
  @(negedge CLKA);
   RMEA = 1'd1;
   RMEB = 1'd1;
   RMA = 4'd3;
   RMB = 4'd3;
       WA = 2'b10;
WPULSE = 3'b000;

// tcseprm3 is 0.558
  $display ("\n#######################################################################");
  test_num = 142;
  $display( "\n\n@%t TEST: %d ---   Going to test  Simultaneous Write & Read  (CLKA CLKB are at same time)  --- \n\n", $time, test_num);
  @(negedge CLKA);
  simul_clk = 0;
  restart_clk = 1; 
  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  @(negedge CLKA);
  ADRA = 0;
  WEA   = 1'b1;
  MEA   = 1'b1;
  DA = 80'b0;
  @(negedge CLKB);
  MEB = 1'b1;
  ADRB = 0;
  @(negedge CLKA);
  @(negedge CLKB);
  no_clk = 1;
  no_tclk = 1;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  rmdel_tcq;
  QB_prev = QB_BEHAV;
      #2.0349999999999997;
  
  TEST1B = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  CLKA = 1'b1;
  #0.149;
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  CLKA = 1'b0;
  #0.35;    
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end

  $display ("\n#######################################################################");
  test_num = 143;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep) in TEST1B mode   --- \n\n", $time, test_num);

  #11.16;
  QB_prev = QB_BEHAV;

  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b1;
      rmdel_tcsep;
  CLKB = 1'b1;
  #0.149;
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful in TEST1B mode  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful in TEST1B mode  \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
     rmdel_tcsep;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'b0;
  DA[0] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;

  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #1.116;
  QB_prev = QB_BEHAV;
  // tcseprm3 is 0.558
  $display ("\n#######################################################################");
  test_num = 144;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKA = 1'b1;
  #0.557;
  CLKB = 1'b1;
      #0.149;
 
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  #0.35;    
//  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
   if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
`else
  `ifdef VIRAGE_FAST_VERILOG
    if ( QB_BEHAV === 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  `else
    if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
 DA = 80'b0;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;

  // tcseprm3 is 0.558
 $display ("\n#######################################################################");
  test_num = 145;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, greater than tcsep in TEST1B mode)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
      #0.149;
  
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #0.385;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #1.116;
 QB_prev = QB_BEHAV;
  #11.16;
 CLKA = 1'b1;
  #0.385;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
      #0.092;
 
 LS = 1'b1;
 #20;
 LS = 1'b0;
  #11.16;
 CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
 QB_prev = QB_BEHAV;
  // tcseprm3 is 0.558
  $display ("\n#######################################################################");
  test_num = 146;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKB then CLKA, less than tcsep TEST1B mode)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'd1;
  #11.16;
  CLKB = 1'b1;
  #0.385;
  CLKB = 1'b0;
  #0.17200000000000004;
  CLKA = 1'b1;
  #0.35;    
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
`else
  `ifdef VIRAGE_FAST_VERILOG
   if ( QB_BEHAV === QB_prev) 
  `else
   if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #0.385;
  CLKA = 1'b0;
  #0.17400000000000004;
  CLKB = 1'b1;
  #0.385;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== DA )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  #11.16;
  CLKA = 1'b1;
  #0.385;
  CLKA = 1'b0;
  #11.16;
   rmdel_tcsep;
  CLKB = 1'b1;
      #0.092;
  
  LS = 1'b1;
  #11.16;
  LS = 1'b0;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'd1;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
 QB_prev = QB_BEHAV;

  // tcseprm3 is 0.558
  $display ("\n#######################################################################");
  test_num = 147;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKB then CLKA greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
   rmdel_tcsep;
  CLKA = 1'b1;
  rmdel_tcq;
  if (QB_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #0.35;    
  if (QB_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  $display ("\n#######################################################################");
  test_num = 148;
  $display( "\n\n@%t TEST: %d ---  Going to test Simultaneous Write & Read (CLKB then CLKA, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b1;
  #11.16;
  CLKB = 1'b1;
  #0.557;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV === 80'bx )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #0.35;    
  if (QB_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
      #2.0349999999999997;
  
  TEST1B = 1'b0;
  restart_clk = 1'b1;

  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 1;
  // tcseprm3 is 0.558
  $display ("\n#######################################################################");
  test_num = 149;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA CLKB are running at same time)  --- \n\n", $time, test_num);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 0;
  @(negedge CLKA);
  ADRA = 0;
  WEA   = 1'b1;
  MEA   = 1'b1;
  @(negedge CLKB);
  QB_prev = QB_BEHAV;
  MEB = 1'b1;
  ADRB = 0;
  @(negedge CLKA);
  @(negedge CLKB);
  no_clk = 1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[0] === 1'bx && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm3 is 0.558
  $display ("\n#######################################################################");
  test_num = 150;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  rmdel_tcsep;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end

  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  // tcseprm3 is 0.558
  $display ("\n#######################################################################");
  test_num = 151;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[79] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  #0.557;
  CLKB = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[79] === 1'bX && QB_BEHAV[78:0] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
  if ( QB_BEHAV === 80'b0 )
  `else
  if ( QB_BEHAV[79] === 1'bX && QB_BEHAV[78:0] === 79'b0 )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[79] === 1'b1 && QB_BEHAV[78:0] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm3 is 0.558
 $display ("\n#######################################################################");
  test_num = 152;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, greater than tcsep )   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b1;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #0.079;
  CLKB = 1'b0;
  #0.48000000000000004;
 CLKA = 1'b1;
  #0.079;
 CLKA = 1'b0;
  #11.16;
 LS = 1'b1;
      #0.048;
  
 CLKB = 1'b1;
 rmdel_tcq;
`ifdef VIRAGE_FAST_VERILOG
  if ( QB_BEHAV !== 80'b0 ) // No read as LS was 1 at rising edge of  CLKB
`else
  if ( QB_BEHAV !== 80'bX )
`endif
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
 #20;
 LS = 1'b0;
  #0.079;
 CLKB = 1'b0;
  DA = 80'b1;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
 #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  // tcseprm3 is 0.558
  $display ("\n#######################################################################");
  test_num = 153;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep )   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b0;
  #11.16;
  CLKB = 1'b1;
  #0.079;
  CLKB = 1'b0;
      #0.47800000000000004;
  
  CLKA = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
   if ( QB_BEHAV === 80'b1 )
  `else
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
  QB_prev = QB_BEHAV;
  #11.16;
  LS = 1'b1;
      #0.048;
  
  CLKB = 1'b1;
  rmdel_tcq;
  `ifdef VIRAGE_FAST_VERILOG
  if (QB_BEHAV !== QB_prev)
  `else
  if ( QB_BEHAV !== 80'bX )
  `endif
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #20;
  LS = 1'b0;
  #11.16;
 CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm3 is 0.558
  $display ("\n#######################################################################");
  test_num = 154;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcsep;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  $display ("\n#######################################################################");
  test_num = 155;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  #0.557;
  CLKA = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
  if (QB_BEHAV[79:0] === 79'b0)
  `else
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
 `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[0] === 1'b1 && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  restart_clk = 1'b1;
  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 0;
   RMEA = 1'd0;
   RMEB = 1'd0;
      assist_initial("");
  @(negedge CLKA);
   RMEA = 1'd1;
   RMEB = 1'd1;
   RMA = 4'd4;
   RMB = 4'd4;
       WA = 2'b01;
WPULSE = 3'b000;

// tcseprm4 is 0.527
  $display ("\n#######################################################################");
  test_num = 156;
  $display( "\n\n@%t TEST: %d ---   Going to test  Simultaneous Write & Read  (CLKA CLKB are at same time)  --- \n\n", $time, test_num);
  @(negedge CLKA);
  simul_clk = 0;
  restart_clk = 1; 
  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  @(negedge CLKA);
  ADRA = 0;
  WEA   = 1'b1;
  MEA   = 1'b1;
  DA = 80'b0;
  @(negedge CLKB);
  MEB = 1'b1;
  ADRB = 0;
  @(negedge CLKA);
  @(negedge CLKB);
  no_clk = 1;
  no_tclk = 1;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  rmdel_tcq;
  QB_prev = QB_BEHAV;
      #2.0349999999999997;
  
  TEST1B = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  CLKA = 1'b1;
  #0.149;
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  CLKA = 1'b0;
  #0.35;    
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end

  $display ("\n#######################################################################");
  test_num = 157;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep) in TEST1B mode   --- \n\n", $time, test_num);

  #11.16;
  QB_prev = QB_BEHAV;

  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b1;
      rmdel_tcsep;
  CLKB = 1'b1;
  #0.149;
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful in TEST1B mode  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful in TEST1B mode  \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
     rmdel_tcsep;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'b0;
  DA[0] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;

  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #1.116;
  QB_prev = QB_BEHAV;
  // tcseprm4 is 0.527
  $display ("\n#######################################################################");
  test_num = 158;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKA = 1'b1;
  #0.526;
  CLKB = 1'b1;
      #0.149;
 
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  #0.35;    
//  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
   if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
`else
  `ifdef VIRAGE_FAST_VERILOG
    if ( QB_BEHAV === 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  `else
    if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
 DA = 80'b0;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;

  // tcseprm4 is 0.527
 $display ("\n#######################################################################");
  test_num = 159;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, greater than tcsep in TEST1B mode)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
      #0.149;
  
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #0.385;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #1.116;
 QB_prev = QB_BEHAV;
  #11.16;
 CLKA = 1'b1;
  #0.385;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
      #0.092;
 
 LS = 1'b1;
 #20;
 LS = 1'b0;
  #11.16;
 CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
 QB_prev = QB_BEHAV;
  // tcseprm4 is 0.527
  $display ("\n#######################################################################");
  test_num = 160;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKB then CLKA, less than tcsep TEST1B mode)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'd1;
  #11.16;
  CLKB = 1'b1;
  #0.385;
  CLKB = 1'b0;
  #0.14100000000000001;
  CLKA = 1'b1;
  #0.35;    
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
`else
  `ifdef VIRAGE_FAST_VERILOG
   if ( QB_BEHAV === QB_prev) 
  `else
   if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #0.385;
  CLKA = 1'b0;
  #0.14300000000000002;
  CLKB = 1'b1;
  #0.385;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== DA )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  #11.16;
  CLKA = 1'b1;
  #0.385;
  CLKA = 1'b0;
  #11.16;
   rmdel_tcsep;
  CLKB = 1'b1;
      #0.092;
  
  LS = 1'b1;
  #11.16;
  LS = 1'b0;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'd1;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
 QB_prev = QB_BEHAV;

  // tcseprm4 is 0.527
  $display ("\n#######################################################################");
  test_num = 161;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKB then CLKA greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
   rmdel_tcsep;
  CLKA = 1'b1;
  rmdel_tcq;
  if (QB_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #0.35;    
  if (QB_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  $display ("\n#######################################################################");
  test_num = 162;
  $display( "\n\n@%t TEST: %d ---  Going to test Simultaneous Write & Read (CLKB then CLKA, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b1;
  #11.16;
  CLKB = 1'b1;
  #0.526;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV === 80'bx )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #0.35;    
  if (QB_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
      #2.0349999999999997;
  
  TEST1B = 1'b0;
  restart_clk = 1'b1;

  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 1;
  // tcseprm4 is 0.527
  $display ("\n#######################################################################");
  test_num = 163;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA CLKB are running at same time)  --- \n\n", $time, test_num);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 0;
  @(negedge CLKA);
  ADRA = 0;
  WEA   = 1'b1;
  MEA   = 1'b1;
  @(negedge CLKB);
  QB_prev = QB_BEHAV;
  MEB = 1'b1;
  ADRB = 0;
  @(negedge CLKA);
  @(negedge CLKB);
  no_clk = 1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[0] === 1'bx && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm4 is 0.527
  $display ("\n#######################################################################");
  test_num = 164;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  rmdel_tcsep;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end

  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  // tcseprm4 is 0.527
  $display ("\n#######################################################################");
  test_num = 165;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[79] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  #0.526;
  CLKB = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[79] === 1'bX && QB_BEHAV[78:0] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
  if ( QB_BEHAV === 80'b0 )
  `else
  if ( QB_BEHAV[79] === 1'bX && QB_BEHAV[78:0] === 79'b0 )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[79] === 1'b1 && QB_BEHAV[78:0] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm4 is 0.527
 $display ("\n#######################################################################");
  test_num = 166;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, greater than tcsep )   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b1;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #0.079;
  CLKB = 1'b0;
  #0.449;
 CLKA = 1'b1;
  #0.079;
 CLKA = 1'b0;
  #11.16;
 LS = 1'b1;
      #0.048;
  
 CLKB = 1'b1;
 rmdel_tcq;
`ifdef VIRAGE_FAST_VERILOG
  if ( QB_BEHAV !== 80'b0 ) // No read as LS was 1 at rising edge of  CLKB
`else
  if ( QB_BEHAV !== 80'bX )
`endif
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
 #20;
 LS = 1'b0;
  #0.079;
 CLKB = 1'b0;
  DA = 80'b1;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
 #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  // tcseprm4 is 0.527
  $display ("\n#######################################################################");
  test_num = 167;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep )   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b0;
  #11.16;
  CLKB = 1'b1;
  #0.079;
  CLKB = 1'b0;
      #0.447;
  
  CLKA = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
   if ( QB_BEHAV === 80'b1 )
  `else
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
  QB_prev = QB_BEHAV;
  #11.16;
  LS = 1'b1;
      #0.048;
  
  CLKB = 1'b1;
  rmdel_tcq;
  `ifdef VIRAGE_FAST_VERILOG
  if (QB_BEHAV !== QB_prev)
  `else
  if ( QB_BEHAV !== 80'bX )
  `endif
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #20;
  LS = 1'b0;
  #11.16;
 CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm4 is 0.527
  $display ("\n#######################################################################");
  test_num = 168;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcsep;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  $display ("\n#######################################################################");
  test_num = 169;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  #0.526;
  CLKA = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
  if (QB_BEHAV[79:0] === 79'b0)
  `else
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
 `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[0] === 1'b1 && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  restart_clk = 1'b1;
  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 0;
   RMEA = 1'd0;
   RMEB = 1'd0;
      assist_initial("");
  @(negedge CLKA);
   RMEA = 1'd1;
   RMEB = 1'd1;
   RMA = 4'd5;
   RMB = 4'd5;
       WA = 2'b01;
WPULSE = 3'b000;

// tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 170;
  $display( "\n\n@%t TEST: %d ---   Going to test  Simultaneous Write & Read  (CLKA CLKB are at same time)  --- \n\n", $time, test_num);
  @(negedge CLKA);
  simul_clk = 0;
  restart_clk = 1; 
  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  @(negedge CLKA);
  ADRA = 0;
  WEA   = 1'b1;
  MEA   = 1'b1;
  DA = 80'b0;
  @(negedge CLKB);
  MEB = 1'b1;
  ADRB = 0;
  @(negedge CLKA);
  @(negedge CLKB);
  no_clk = 1;
  no_tclk = 1;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  rmdel_tcq;
  QB_prev = QB_BEHAV;
      #2.0349999999999997;
  
  TEST1B = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  CLKA = 1'b1;
  #0.149;
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  CLKA = 1'b0;
  #0.35;    
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end

  $display ("\n#######################################################################");
  test_num = 171;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep) in TEST1B mode   --- \n\n", $time, test_num);

  #11.16;
  QB_prev = QB_BEHAV;

  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b1;
      rmdel_tcsep;
  CLKB = 1'b1;
  #0.149;
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful in TEST1B mode  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful in TEST1B mode  \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
     rmdel_tcsep;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'b0;
  DA[0] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;

  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #1.116;
  QB_prev = QB_BEHAV;
  // tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 172;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKA = 1'b1;
  #0.501;
  CLKB = 1'b1;
      #0.149;
 
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  #0.35;    
//  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
   if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
`else
  `ifdef VIRAGE_FAST_VERILOG
    if ( QB_BEHAV === 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  `else
    if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
 DA = 80'b0;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;

  // tcseprm5 is 0.502
 $display ("\n#######################################################################");
  test_num = 173;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, greater than tcsep in TEST1B mode)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
      #0.149;
  
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #0.385;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #1.116;
 QB_prev = QB_BEHAV;
  #11.16;
 CLKA = 1'b1;
  #0.385;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
      #0.092;
 
 LS = 1'b1;
 #20;
 LS = 1'b0;
  #11.16;
 CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
 QB_prev = QB_BEHAV;
  // tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 174;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKB then CLKA, less than tcsep TEST1B mode)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'd1;
  #11.16;
  CLKB = 1'b1;
  #0.385;
  CLKB = 1'b0;
  #0.11599999999999999;
  CLKA = 1'b1;
  #0.35;    
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
`else
  `ifdef VIRAGE_FAST_VERILOG
   if ( QB_BEHAV === QB_prev) 
  `else
   if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #0.385;
  CLKA = 1'b0;
  #0.118;
  CLKB = 1'b1;
  #0.385;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== DA )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  #11.16;
  CLKA = 1'b1;
  #0.385;
  CLKA = 1'b0;
  #11.16;
   rmdel_tcsep;
  CLKB = 1'b1;
      #0.092;
  
  LS = 1'b1;
  #11.16;
  LS = 1'b0;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'd1;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
 QB_prev = QB_BEHAV;

  // tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 175;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKB then CLKA greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
   rmdel_tcsep;
  CLKA = 1'b1;
  rmdel_tcq;
  if (QB_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #0.35;    
  if (QB_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  $display ("\n#######################################################################");
  test_num = 176;
  $display( "\n\n@%t TEST: %d ---  Going to test Simultaneous Write & Read (CLKB then CLKA, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b1;
  #11.16;
  CLKB = 1'b1;
  #0.501;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV === 80'bx )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #0.35;    
  if (QB_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
      #2.0349999999999997;
  
  TEST1B = 1'b0;
  restart_clk = 1'b1;

  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 1;
  // tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 177;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA CLKB are running at same time)  --- \n\n", $time, test_num);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 0;
  @(negedge CLKA);
  ADRA = 0;
  WEA   = 1'b1;
  MEA   = 1'b1;
  @(negedge CLKB);
  QB_prev = QB_BEHAV;
  MEB = 1'b1;
  ADRB = 0;
  @(negedge CLKA);
  @(negedge CLKB);
  no_clk = 1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[0] === 1'bx && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 178;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  rmdel_tcsep;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end

  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  // tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 179;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[79] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  #0.501;
  CLKB = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[79] === 1'bX && QB_BEHAV[78:0] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
  if ( QB_BEHAV === 80'b0 )
  `else
  if ( QB_BEHAV[79] === 1'bX && QB_BEHAV[78:0] === 79'b0 )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[79] === 1'b1 && QB_BEHAV[78:0] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm5 is 0.502
 $display ("\n#######################################################################");
  test_num = 180;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, greater than tcsep )   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b1;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #0.079;
  CLKB = 1'b0;
  #0.424;
 CLKA = 1'b1;
  #0.079;
 CLKA = 1'b0;
  #11.16;
 LS = 1'b1;
      #0.048;
  
 CLKB = 1'b1;
 rmdel_tcq;
`ifdef VIRAGE_FAST_VERILOG
  if ( QB_BEHAV !== 80'b0 ) // No read as LS was 1 at rising edge of  CLKB
`else
  if ( QB_BEHAV !== 80'bX )
`endif
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
 #20;
 LS = 1'b0;
  #0.079;
 CLKB = 1'b0;
  DA = 80'b1;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
 #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  // tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 181;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep )   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b0;
  #11.16;
  CLKB = 1'b1;
  #0.079;
  CLKB = 1'b0;
      #0.422;
  
  CLKA = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
   if ( QB_BEHAV === 80'b1 )
  `else
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
  QB_prev = QB_BEHAV;
  #11.16;
  LS = 1'b1;
      #0.048;
  
  CLKB = 1'b1;
  rmdel_tcq;
  `ifdef VIRAGE_FAST_VERILOG
  if (QB_BEHAV !== QB_prev)
  `else
  if ( QB_BEHAV !== 80'bX )
  `endif
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #20;
  LS = 1'b0;
  #11.16;
 CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 182;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcsep;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  $display ("\n#######################################################################");
  test_num = 183;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  #0.501;
  CLKA = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
  if (QB_BEHAV[79:0] === 79'b0)
  `else
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
 `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[0] === 1'b1 && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  restart_clk = 1'b1;
  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 0;
   RMEA = 1'd0;
   RMEB = 1'd0;
      assist_initial("");
  @(negedge CLKA);
   RMEA = 1'd1;
   RMEB = 1'd1;
   RMA = 4'd6;
   RMB = 4'd6;
       WA = 2'b01;
WPULSE = 3'b000;

// tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 184;
  $display( "\n\n@%t TEST: %d ---   Going to test  Simultaneous Write & Read  (CLKA CLKB are at same time)  --- \n\n", $time, test_num);
  @(negedge CLKA);
  simul_clk = 0;
  restart_clk = 1; 
  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  @(negedge CLKA);
  ADRA = 0;
  WEA   = 1'b1;
  MEA   = 1'b1;
  DA = 80'b0;
  @(negedge CLKB);
  MEB = 1'b1;
  ADRB = 0;
  @(negedge CLKA);
  @(negedge CLKB);
  no_clk = 1;
  no_tclk = 1;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  rmdel_tcq;
  QB_prev = QB_BEHAV;
      #2.0349999999999997;
  
  TEST1B = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  CLKA = 1'b1;
  #0.149;
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  CLKA = 1'b0;
  #0.35;    
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end

  $display ("\n#######################################################################");
  test_num = 185;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep) in TEST1B mode   --- \n\n", $time, test_num);

  #11.16;
  QB_prev = QB_BEHAV;

  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b1;
      rmdel_tcsep;
  CLKB = 1'b1;
  #0.149;
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful in TEST1B mode  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful in TEST1B mode  \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
     rmdel_tcsep;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'b0;
  DA[0] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;

  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #1.116;
  QB_prev = QB_BEHAV;
  // tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 186;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKA = 1'b1;
  #0.501;
  CLKB = 1'b1;
      #0.149;
 
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  #0.35;    
//  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
   if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
`else
  `ifdef VIRAGE_FAST_VERILOG
    if ( QB_BEHAV === 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  `else
    if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
 DA = 80'b0;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;

  // tcseprm5 is 0.502
 $display ("\n#######################################################################");
  test_num = 187;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, greater than tcsep in TEST1B mode)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
      #0.149;
  
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #0.385;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #1.116;
 QB_prev = QB_BEHAV;
  #11.16;
 CLKA = 1'b1;
  #0.385;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
      #0.092;
 
 LS = 1'b1;
 #20;
 LS = 1'b0;
  #11.16;
 CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
 QB_prev = QB_BEHAV;
  // tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 188;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKB then CLKA, less than tcsep TEST1B mode)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'd1;
  #11.16;
  CLKB = 1'b1;
  #0.385;
  CLKB = 1'b0;
  #0.11599999999999999;
  CLKA = 1'b1;
  #0.35;    
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
`else
  `ifdef VIRAGE_FAST_VERILOG
   if ( QB_BEHAV === QB_prev) 
  `else
   if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #0.385;
  CLKA = 1'b0;
  #0.118;
  CLKB = 1'b1;
  #0.385;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== DA )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  #11.16;
  CLKA = 1'b1;
  #0.385;
  CLKA = 1'b0;
  #11.16;
   rmdel_tcsep;
  CLKB = 1'b1;
      #0.092;
  
  LS = 1'b1;
  #11.16;
  LS = 1'b0;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'd1;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
 QB_prev = QB_BEHAV;

  // tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 189;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKB then CLKA greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
   rmdel_tcsep;
  CLKA = 1'b1;
  rmdel_tcq;
  if (QB_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #0.35;    
  if (QB_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  $display ("\n#######################################################################");
  test_num = 190;
  $display( "\n\n@%t TEST: %d ---  Going to test Simultaneous Write & Read (CLKB then CLKA, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b1;
  #11.16;
  CLKB = 1'b1;
  #0.501;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV === 80'bx )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #0.35;    
  if (QB_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
      #2.0349999999999997;
  
  TEST1B = 1'b0;
  restart_clk = 1'b1;

  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 1;
  // tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 191;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA CLKB are running at same time)  --- \n\n", $time, test_num);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 0;
  @(negedge CLKA);
  ADRA = 0;
  WEA   = 1'b1;
  MEA   = 1'b1;
  @(negedge CLKB);
  QB_prev = QB_BEHAV;
  MEB = 1'b1;
  ADRB = 0;
  @(negedge CLKA);
  @(negedge CLKB);
  no_clk = 1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[0] === 1'bx && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 192;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  rmdel_tcsep;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end

  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  // tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 193;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[79] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  #0.501;
  CLKB = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[79] === 1'bX && QB_BEHAV[78:0] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
  if ( QB_BEHAV === 80'b0 )
  `else
  if ( QB_BEHAV[79] === 1'bX && QB_BEHAV[78:0] === 79'b0 )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[79] === 1'b1 && QB_BEHAV[78:0] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm5 is 0.502
 $display ("\n#######################################################################");
  test_num = 194;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, greater than tcsep )   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b1;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #0.079;
  CLKB = 1'b0;
  #0.424;
 CLKA = 1'b1;
  #0.079;
 CLKA = 1'b0;
  #11.16;
 LS = 1'b1;
      #0.048;
  
 CLKB = 1'b1;
 rmdel_tcq;
`ifdef VIRAGE_FAST_VERILOG
  if ( QB_BEHAV !== 80'b0 ) // No read as LS was 1 at rising edge of  CLKB
`else
  if ( QB_BEHAV !== 80'bX )
`endif
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
 #20;
 LS = 1'b0;
  #0.079;
 CLKB = 1'b0;
  DA = 80'b1;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
 #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  // tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 195;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep )   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b0;
  #11.16;
  CLKB = 1'b1;
  #0.079;
  CLKB = 1'b0;
      #0.422;
  
  CLKA = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
   if ( QB_BEHAV === 80'b1 )
  `else
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
  QB_prev = QB_BEHAV;
  #11.16;
  LS = 1'b1;
      #0.048;
  
  CLKB = 1'b1;
  rmdel_tcq;
  `ifdef VIRAGE_FAST_VERILOG
  if (QB_BEHAV !== QB_prev)
  `else
  if ( QB_BEHAV !== 80'bX )
  `endif
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #20;
  LS = 1'b0;
  #11.16;
 CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 196;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcsep;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  $display ("\n#######################################################################");
  test_num = 197;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  #0.501;
  CLKA = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
  if (QB_BEHAV[79:0] === 79'b0)
  `else
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
 `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[0] === 1'b1 && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  restart_clk = 1'b1;
  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 0;
   RMEA = 1'd0;
   RMEB = 1'd0;
      assist_initial("");
  @(negedge CLKA);
   RMEA = 1'd1;
   RMEB = 1'd1;
   RMA = 4'd7;
   RMB = 4'd7;
       WA = 2'b01;
WPULSE = 3'b000;

// tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 198;
  $display( "\n\n@%t TEST: %d ---   Going to test  Simultaneous Write & Read  (CLKA CLKB are at same time)  --- \n\n", $time, test_num);
  @(negedge CLKA);
  simul_clk = 0;
  restart_clk = 1; 
  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  @(negedge CLKA);
  ADRA = 0;
  WEA   = 1'b1;
  MEA   = 1'b1;
  DA = 80'b0;
  @(negedge CLKB);
  MEB = 1'b1;
  ADRB = 0;
  @(negedge CLKA);
  @(negedge CLKB);
  no_clk = 1;
  no_tclk = 1;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  rmdel_tcq;
  QB_prev = QB_BEHAV;
      #2.0349999999999997;
  
  TEST1B = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  CLKA = 1'b1;
  #0.149;
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  CLKA = 1'b0;
  #0.35;    
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end

  $display ("\n#######################################################################");
  test_num = 199;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep) in TEST1B mode   --- \n\n", $time, test_num);

  #11.16;
  QB_prev = QB_BEHAV;

  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b1;
      rmdel_tcsep;
  CLKB = 1'b1;
  #0.149;
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful in TEST1B mode  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful in TEST1B mode  \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
     rmdel_tcsep;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'b0;
  DA[0] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;

  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #1.116;
  QB_prev = QB_BEHAV;
  // tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 200;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKA = 1'b1;
  #0.501;
  CLKB = 1'b1;
      #0.149;
 
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  #0.35;    
//  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
   if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
`else
  `ifdef VIRAGE_FAST_VERILOG
    if ( QB_BEHAV === 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  `else
    if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
 DA = 80'b0;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;

  // tcseprm5 is 0.502
 $display ("\n#######################################################################");
  test_num = 201;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, greater than tcsep in TEST1B mode)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
      #0.149;
  
  if ( QB_BEHAV !== 80'bx )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #0.385;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #1.116;
 QB_prev = QB_BEHAV;
  #11.16;
 CLKA = 1'b1;
  #0.385;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
      #0.092;
 
 LS = 1'b1;
 #20;
 LS = 1'b0;
  #11.16;
 CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
 QB_prev = QB_BEHAV;
  // tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 202;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKB then CLKA, less than tcsep TEST1B mode)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'd1;
  #11.16;
  CLKB = 1'b1;
  #0.385;
  CLKB = 1'b0;
  #0.11599999999999999;
  CLKA = 1'b1;
  #0.35;    
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
`else
  `ifdef VIRAGE_FAST_VERILOG
   if ( QB_BEHAV === QB_prev) 
  `else
   if ( QB_BEHAV[0] !== 1'bX && QB_BEHAV[79:1] === 79'bx )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #0.385;
  CLKA = 1'b0;
  #0.118;
  CLKB = 1'b1;
  #0.385;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== DA )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  #11.16;
  CLKA = 1'b1;
  #0.385;
  CLKA = 1'b0;
  #11.16;
   rmdel_tcsep;
  CLKB = 1'b1;
      #0.092;
  
  LS = 1'b1;
  #11.16;
  LS = 1'b0;
  CLKB = 1'b0;
  #0.35;    
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  DA = 80'd1;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
 QB_prev = QB_BEHAV;

  // tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 203;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKB then CLKA greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
   rmdel_tcsep;
  CLKA = 1'b1;
  rmdel_tcq;
  if (QB_BEHAV !== 80'bx)
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #0.35;    
  if (QB_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  $display ("\n#######################################################################");
  test_num = 204;
  $display( "\n\n@%t TEST: %d ---  Going to test Simultaneous Write & Read (CLKB then CLKA, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b1;
  #11.16;
  CLKB = 1'b1;
  #0.501;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV === 80'bx )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #0.35;    
  if (QB_BEHAV === 80'bx)
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
      #2.0349999999999997;
  
  TEST1B = 1'b0;
  restart_clk = 1'b1;

  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 1;
  // tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 205;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA CLKB are running at same time)  --- \n\n", $time, test_num);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 0;
  @(negedge CLKA);
  ADRA = 0;
  WEA   = 1'b1;
  MEA   = 1'b1;
  @(negedge CLKB);
  QB_prev = QB_BEHAV;
  MEB = 1'b1;
  ADRB = 0;
  @(negedge CLKA);
  @(negedge CLKB);
  no_clk = 1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[0] === 1'bx && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
  CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 206;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  rmdel_tcsep;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b1 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end

  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  // tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 207;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[79] = 1'b1;
  #11.16;
  CLKA = 1'b1;
  #0.501;
  CLKB = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[79] === 1'bX && QB_BEHAV[78:0] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
  if ( QB_BEHAV === 80'b0 )
  `else
  if ( QB_BEHAV[79] === 1'bX && QB_BEHAV[78:0] === 79'b0 )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
   rmdel_tcsep;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[79] === 1'b1 && QB_BEHAV[78:0] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm5 is 0.502
 $display ("\n#######################################################################");
  test_num = 208;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, greater than tcsep )   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b1;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #0.079;
  CLKB = 1'b0;
  #0.424;
 CLKA = 1'b1;
  #0.079;
 CLKA = 1'b0;
  #11.16;
 LS = 1'b1;
      #0.048;
  
 CLKB = 1'b1;
 rmdel_tcq;
`ifdef VIRAGE_FAST_VERILOG
  if ( QB_BEHAV !== 80'b0 ) // No read as LS was 1 at rising edge of  CLKB
`else
  if ( QB_BEHAV !== 80'bX )
`endif
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
 #20;
 LS = 1'b0;
  #0.079;
 CLKB = 1'b0;
  DA = 80'b1;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
 #11.16;
 CLKB = 1'b1;
  #11.16;
 CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;

  // tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 209;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep )   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b0;
  #11.16;
  CLKB = 1'b1;
  #0.079;
  CLKB = 1'b0;
      #0.422;
  
  CLKA = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
   if ( QB_BEHAV === 80'b1 )
  `else
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
  `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKA = 1'b0;
  QB_prev = QB_BEHAV;
  #11.16;
  LS = 1'b1;
      #0.048;
  
  CLKB = 1'b1;
  rmdel_tcq;
  `ifdef VIRAGE_FAST_VERILOG
  if (QB_BEHAV !== QB_prev)
  `else
  if ( QB_BEHAV !== 80'bX )
  `endif
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #20;
  LS = 1'b0;
  #11.16;
 CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
 CLKA = 1'b1;
  #11.16;
 CLKA = 1'b0;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  // tcseprm5 is 0.502
  $display ("\n#######################################################################");
  test_num = 210;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB greater than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcsep;
  CLKA = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV !== 80'b0 )
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  DA = 80'b0;
  #11.16;
  CLKA = 1'b1;
  #11.16;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  #11.16;
  CLKB = 1'b0;
  #11.16;
  QB_prev = QB_BEHAV;
  $display ("\n#######################################################################");
  test_num = 211;
  $display( "\n\n@%t TEST: %d ---  Going to test  Simultaneous Write & Read (CLKA then CLKB, less than tcsep)   --- \n\n", $time, test_num);
  #11.16;
  MEB = 1'b1;
  ADRB = 0;
  ADRA = 0;
  WEA   = 1'b1;
  DA[0] = 1'b1;
  #11.16;
  CLKB = 1'b1;
  #0.501;
  CLKA = 1'b1;
  rmdel_tcq;
`ifdef SNPS_CONTENTION_CHECK
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
`else
  `ifdef VIRAGE_FAST_VERILOG
  if (QB_BEHAV[79:0] === 79'b0)
  `else
  if ( QB_BEHAV[0] === 1'bX && QB_BEHAV[79:1] === 79'b0 )
 `endif
`endif
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #11.16;
  CLKB = 1'b0;
   rmdel_tcsep;
  CLKA = 1'b0;
  #11.16;
  CLKB = 1'b1;
  rmdel_tcq;
  if ( QB_BEHAV[0] === 1'b1 && QB_BEHAV[79:1] === 79'b0 )
  begin
    $display("\n\n@%t           Simultaneous Write & Read Operation successful   \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Simultaneous Write & Read Operation unsuccessful  \n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  restart_clk = 1'b1;
  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  simul_clk = 0;
   RMEA = 1'd0;
   RMEB = 1'd0;
      assist_initial("");
`ifdef VIRAGE_FAST_VERILOG
  $display ("\n#######################################################################");
  test_num = 212;
  $display( "\n\n@%t TEST: %d ---   Going to test  Simultaneous Write & Read  (CLKA CLKB are out of phase)  --- \n\n", $time, test_num);
  @(negedge CLKA);
  no_clk = 0;
  simul_clk = 0;
  restart_clk = 1; 
  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  read_memb("",10'd0, 80'd0);
  @(negedge CLKB);
  no_clk = 1;
  #20;
  simul_clk = 12;
  #20;
  restart_clk = 1; 
  @(negedge CLKB);
  MEB   = 1'b0;
  @(negedge CLKA);
  ADRA = 0;
  WEA   = 1'b1;
  MEA   = 1'b1;
  DA = 80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010;
  @(negedge CLKB);
  MEB = 1'b0;
  ADRB = 0;
  @(negedge CLKB);
  MEB = 1'b1;
  @(posedge CLKB);
    #0.002
    if (QB_BEHAV === 80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010)
    begin
      $display("\n\n@%t           Valid read  Operation successful \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid read  Operation unsuccessful\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
  @(negedge CLKA);
  no_clk = 0;
  simul_clk = 0;
  restart_clk = 1; 
`endif
  simul_clk = 0;

  $display ("\n#######################################################################");
  test_num = 213;
  $display( "\n\n@%t TEST: %d ---  Test for bank assuming LSB or MSB of address is bank bit --- \n\n", $time, test_num);
  @(negedge CLKA);
  ADRA = 0;
  $display("@%t    Writing 0 at %b", $time,ADRA);
  write_mema("",ADRA, 80'd0);
  @(negedge CLKA);
  ADRA[0] = 1;
  $display("@%t    Writing 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  write_mema("",ADRA, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKA);
  ADRA[9] = 1;
  $display("@%t    Writing 80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010 at %b", $time,ADRA);
  write_mema("",ADRA, 80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010);
  @(negedge CLKA);
  ADRA[0] = 0;
  $display("@%t    Writing 80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101 at %b", $time,ADRA);
  write_mema("",ADRA, 80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101);
  @(negedge CLKA);
  ADRA = 0;
  WEA = 1'b0;
  $display("@%t    Reading 0 at %b", $time,ADRA);
  @(negedge CLKA);
  ADRA[0] = 1;
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRA);
  @(negedge CLKA);
  ADRA[9] = 1;
  $display("@%t    Reading 80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010 at %b", $time,ADRA);
  @(negedge CLKA);
  ADRA[0] = 0;
  $display("@%t    Reading 80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101 at %b", $time,ADRA);
  @(negedge CLKA);
  MEA = 1'b0;
  $display("@%t    Disable memory enable for 4 cycles. Output should not change", $time);
  @(negedge CLKA);
  ADRA = 0;
  $display(" Address is %b now ",ADRA);
  @(negedge CLKA);
  ADRA[0] = 1;
  $display(" Address is %b now ",ADRA);
  @(negedge CLKA);
  ADRA[9] = 1;
  $display(" Address is %b now ",ADRA);
  @(negedge CLKA);
  ADRA[0] = 0;
  $display(" Address is %b now ",ADRA);
  @(negedge CLKA);
  MEA = 1'b1;
  $display ("\n#######################################################################");
  test_num = 214;
  $display( "\n\n@%t TEST: %d ---  Test for bank assuming LSB or MSB of address is bank bit --- \n\n", $time, test_num);
  @(negedge CLKB);
  ADRB = 0;
  $display("@%t    Reading 0 at %b", $time,ADRB);
  @(negedge CLKB);
  ADRB[0] = 1;
  $display("@%t    Reading 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111 at %b", $time,ADRB);
  @(negedge CLKB);
  ADRB[9] = 1;
  $display("@%t    Reading 80'b10101010101010101010101010101010101010101010101010101010101010101010101010101010 at %b", $time,ADRB);
  @(negedge CLKB);
  ADRB[0] = 0;
  $display("@%t    Reading 80'b01010101010101010101010101010101010101010101010101010101010101010101010101010101 at %b", $time,ADRB);
  @(negedge CLKB);
  MEB = 1'b0;
  $display("@%t    Disable memory enable for 4 cycles. Output should not change", $time);
  @(negedge CLKB);
  ADRB = 0;
  $display(" Address is %b now ",ADRB);
  @(negedge CLKB);
  ADRB[0] = 1;
  $display(" Address is %b now ",ADRB);
  @(negedge CLKB);
  ADRB[9] = 1;
  $display(" Address is %b now ",ADRB);
  @(negedge CLKB);
  ADRB[0] = 0;
  $display(" Address is %b now ",ADRB);
  @(negedge CLKB);
  MEB = 1'b1;
  $display ("\n#######################################################################");
  test_num = 215;
  $display( "\n\n@%t TEST: %d --- X handling of CLKA in Write Mode --- \n\n", $time, test_num);
  $display( "\n\n@%t TEST: %d ---------(0->X->0) transition of CLKA ---------- \n\n", $time, test_num);
  @(negedge CLKA);
   write_mema("",10'd0,80'b0);
  @(negedge CLKA);
   read_memb("",10'd0,80'b0);
  @(negedge CLKA);
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    MEB = 1'b1;
    #25;
    CLKA = 1'bx;
    #5;
    CLKA = 1'b0;
  end
  restart_clk = 1;
  @(negedge CLKA);
    MEA = 1'b0;
    MEB = 1'b0;
  read_memb(1,"",80'bx);
  if ( err_cnt == 0 )
  begin
    $display("\n\n@%t           Invalid(0->X->0) Clock ( CLKA ) - corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid(0->X->0) Clock ( CLKA ) - does not  corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  write_mema(1,"","");
  read_memb("",10'd0,80'b0);
  $display( "\n\n@%t TEST: %d --------- (1->X->1) transition of CLKA ---------- \n\n", $time, test_num);
  @(negedge CLKA);
   write_mema("",10'd0,80'b0);
  @(negedge CLKA);
   read_memb("",10'd0,80'b0);
  @(negedge CLKA);
  @(negedge CLKA);
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    MEB = 1'b1;
    #25;
    CLKA = 1'b1;
    #0.078;
    CLKA = 1'bx;
    #0.559;
    CLKA = 1'b1;
  end
  restart_clk = 1;
  @(negedge CLKA);
    MEA = 1'b0;
    MEB = 1'b0;
  #5;
  CLKA = 1'b0;
  @(negedge CLKA);
  @(negedge CLKA);
    MEA = 1'b0;
    MEB = 1'b0;
  read_memb(1,"",80'bx);
  if ( err_cnt == 0 )
  begin
    $display("\n\n@%t           Invalid(1->X->1) Clock ( CLKA ) -  corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid(1->X->1) Clock ( CLKA ) -  does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  write_mema(1,"","");
  read_memb("",10'd0,80'b0);
  write_mema(1,"","");
  read_memb("",10'd0,80'b0);
  @(negedge CLKA);
  ADRA = 0;
  restart_clk = 1;
`ifndef VIRAGE_SUPPORT_FFV_SIM
  $display ("\n#######################################################################");
  test_num = 216;
  $display( "\n\n@%t TEST: %d --- Z handling of CLKA in Write Mode --- \n\n", $time, test_num);
  $display( "\n\n@%t TEST: %d ---------(0->Z->0) transition of CLKA ---------- \n\n", $time, test_num);
  @(negedge CLKA);
   write_mema("",10'd0,80'b0);
  @(negedge CLKA);
   read_memb("",10'd0,80'b0);
  @(negedge CLKA);
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    MEB = 1'b1;
    #25;
    CLKA = 1'bz;
    #5;
    CLKA = 1'b0;
  end
  restart_clk = 1;
  @(negedge CLKA);
    MEA = 1'b0;
    MEB = 1'b0;
  read_memb(1,"",80'bx);
  if ( err_cnt == 0 )
  begin
    $display("\n\n@%t           Invalid(0->X->0) Clock ( CLKA ) - corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid(0->X->0) Clock ( CLKA ) - does not  corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  write_mema(1,"","");
  read_memb("",10'd0,80'b0);
  $display( "\n\n@%t TEST: %d --------- (1->Z->1) transition of CLKA ---------- \n\n", $time, test_num);
  @(negedge CLKA);
   write_mema("",10'd0,80'b0);
  @(negedge CLKA);
   read_memb("",10'd0,80'b0);
  @(negedge CLKA);
  @(negedge CLKA);
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    MEB = 1'b1;
    #25;
    CLKA = 1'b1;
    #0.078;
    CLKA = 1'bz;
    #0.559;
    CLKA = 1'b1;
  end
  restart_clk = 1;
  @(negedge CLKA);
    MEA = 1'b0;
    MEB = 1'b0;
  #5;
  CLKA = 1'b0;
  @(negedge CLKA);
  @(negedge CLKA);
    MEA = 1'b0;
    MEB = 1'b0;
  read_memb(1,"",80'bx);
  if ( err_cnt == 0 )
  begin
    $display("\n\n@%t           Invalid(1->X->1) Clock ( CLKA ) -  corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid(1->X->1) Clock ( CLKA ) -  does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  write_mema(1,"","");
  read_memb("",10'd0,80'b0);
  write_mema(1,"","");
  read_memb("",10'd0,80'b0);
  @(negedge CLKA);
  ADRA = 0;
  restart_clk = 1;
`endif
  $display ("\n#######################################################################");
  test_num = 217;
  $display( "\n\n@%t TEST: %d --- X handling of CLKB in Read Mode --- \n\n", $time, test_num);
  $display( "\n\n@%t TEST: %d ---------(0->X->0) transition of CLKB ---------- \n\n", $time, test_num);
  @(negedge CLKA);
   write_mema("",10'd0,80'b0);
  @(negedge CLKB);
   read_memb("",10'd0,80'b0);
  @(negedge CLKB);
  @(negedge CLKB)
  begin
    MEB = 1'b1;
    MEB = 1'b1;
    #25;
    CLKB = 1'bx;
    #0.346
    if (QB_BEHAV === 80'bx)
    begin
      $display("\n\n@%t           Invalid(0->X) Clock  ( CLKB )- output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid(0->X) Clock ( CLKB ) - does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    #5;
    CLKB = 1'b0;
  end
  restart_clk = 1;
  @(negedge CLKB);
    MEB = 1'b0;
    MEB = 1'b0;
  read_memb(1,"","");
  if ( err_cnt == 0 )
  begin
    $display("\n\n@%t           Invalid(0->X->0) Clock ( CLKB ) - does not corrupt entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid(0->X->0) Clock ( CLKB ) - corrupts entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKB);
  $display( "\n\n@%t TEST: %d --------- (1->X->1) transition of CLKB ---------- \n\n", $time, test_num);
  @(negedge CLKB);
   write_mema("",10'd0,80'b0);
  @(negedge CLKB);
   read_memb("",10'd0,80'b0);
  @(negedge CLKB);
  @(negedge CLKB);
  @(negedge CLKB)
  begin
    MEB = 1'b1;
    MEB = 1'b1;
    #25;
    CLKB = 1'b1;
    #0.078;
    CLKB = 1'bx;
    #0.559;
    CLKB = 1'b1;
  end
  restart_clk = 1;
  @(negedge CLKB);
    MEB = 1'b0;
    MEB = 1'b0;
  #5;
  CLKB = 1'b0;
  @(negedge CLKB);
  @(negedge CLKB);
    MEB = 1'b0;
    MEB = 1'b0;
  read_memb(1,"","");
  if ( err_cnt == 0 )
  begin
    $display("\n\n@%t           Invalid(1->X->1) Clock ( CLKB ) - does not corrupt entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid(1->X->1) Clock ( CLKB ) -  corrupts entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKB);
  write_mema(1,"","");
  read_memb("",10'd0,80'b0);
  @(negedge CLKB);
  ADRB = 0;
  restart_clk = 1;
`ifndef VIRAGE_SUPPORT_FFV_SIM
  $display ("\n#######################################################################");
  test_num = 218;
  $display( "\n\n@%t TEST: %d --- Z handling of CLKB in Read Mode --- \n\n", $time, test_num);
  $display( "\n\n@%t TEST: %d ---------(0->Z->0) transition of CLKB ---------- \n\n", $time, test_num);
  @(negedge CLKA);
   write_mema("",10'd0,80'b0);
  @(negedge CLKB);
   read_memb("",10'd0,80'b0);
  @(negedge CLKB);
  @(negedge CLKB)
  begin
    MEB = 1'b1;
    MEB = 1'b1;
    #25;
    CLKB = 1'bz;
    #0.346
    if (QB_BEHAV === 80'bx)
    begin
      $display("\n\n@%t           Invalid(0->X) Clock  ( CLKB )- output X \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid(0->X) Clock ( CLKB ) - does not output X\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    #5;
    CLKB = 1'b0;
  end
  restart_clk = 1;
  @(negedge CLKB);
    MEB = 1'b0;
    MEB = 1'b0;
  read_memb(1,"","");
  if ( err_cnt == 0 )
  begin
    $display("\n\n@%t           Invalid(0->X->0) Clock ( CLKB ) - does not corrupt entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid(0->X->0) Clock ( CLKB ) - corrupts entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKB);
  $display( "\n\n@%t TEST: %d --------- (1->Z->1) transition of CLKB ---------- \n\n", $time, test_num);
  @(negedge CLKB);
   write_mema("",10'd0,80'b0);
  @(negedge CLKB);
   read_memb("",10'd0,80'b0);
  @(negedge CLKB);
  @(negedge CLKB);
  @(negedge CLKB)
  begin
    MEB = 1'b1;
    MEB = 1'b1;
    #25;
    CLKB = 1'b1;
    #0.078;
    CLKB = 1'bz;
    #0.559;
    CLKB = 1'b1;
  end
  restart_clk = 1;
  @(negedge CLKB);
    MEB = 1'b0;
    MEB = 1'b0;
  #5;
  CLKB = 1'b0;
  @(negedge CLKB);
  @(negedge CLKB);
    MEB = 1'b0;
    MEB = 1'b0;
  read_memb(1,"","");
  if ( err_cnt == 0 )
  begin
    $display("\n\n@%t           Invalid(1->X->1) Clock ( CLKB ) - does not corrupt entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Invalid(1->X->1) Clock ( CLKB ) -  corrupts entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKB);
  write_mema(1,"","");
  read_memb("",10'd0,80'b0);
  @(negedge CLKB);
  ADRB = 0;
  restart_clk = 1;
`endif
  $display ("\n#######################################################################");
  test_num = 219;
  $display( "\n\n@%t TEST: %d --- Going to check X handling of Clock --- \n\n", $time, test_num);
  @(negedge CLKA);
   simul_clk = 0;
  @(negedge CLKA)
  begin
    MEA = 1'b0;
    WEA = 1'b0;
    ADRB = 0;    
    DA = 0; 
  end
   for (vec= 1; vec <=7; vec= vec+1)
   begin
     $display ("Creating patterns for Tcx violations \n %t", $time);
     // Tcx violations
     if ( vec != 6 )
     begin
       create_patternA(vec,"Tcx");
       if ( vec == 7 )
         check_outputA(0,1,"Tcx");
       else
         check_outputA(0,0,"Tcx");
     end
   end
  $display ("\n#######################################################################");
  test_num = 220;
  $display( "\n\n@%t TEST: %d --- Going to check X handling of Clock --- \n\n", $time, test_num);
  @(negedge CLKB);
   simul_clk = 0;
  @(negedge CLKB)
  begin
    MEB = 1'b0;
    WEA = 1'b0;
    ADRB = 0;    
    DA = 0; 
  end
   for (vec= 1; vec <=7; vec= vec+1)
   begin
     $display ("Creating patterns for Tcx violations \n %t", $time);
     // Tcx violations
     if ( vec != 6 )
     begin
       create_patternB(vec,"Tcx");
       if ( vec == 7 )
         check_outputB(1,1,"Tcx");
       else
         check_outputB(0,1,"Tcx");
     end
   end
  @(negedge CLKA);
  @(negedge CLKB);
  #10;
  @(negedge CLKA);
  simul_clk = 0;
  write_mema(1,"","");
  read_memb(1,"","");

  $display( "\n\n@%t TEST:  --------- Timing tests start ---------- \n\n", $time);

  $display ("\n#######################################################################");
  test_num = 221;
  $display( "\n\n@%t TEST: %d --- Going to check Tcq & Tcqx   --- \n\n", $time, test_num);
  @(negedge CLKB);
   RMEB = 1'b0;
  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  write_mema("",10'd1, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
  @(negedge CLKB);
  ADRB = 1;
  @(negedge CLKB);
  begin
    MEB = 1'b1;
    WEA = 1'b0;
    ADRB = 0;   
    DA = 0;
  end
  @(posedge CLKB)
  begin
    #0.143;
    if (QB_BEHAV !== 80'bx)
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Dataout hold after clock rises(Tcqx) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end  
    else
    begin
      $display("\n\n@%t           Dataout hold after clock rises(Tcqx) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end  
    #0.20299999999999999  
    if (QB_BEHAV !== 80'b0)
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock to Dataout delay(Tcq) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end   
    else
    begin
      $display("\n\n@%t           Clock to Dataout delay(Tcq) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end   
  end
 #10;
  @(negedge CLKB)

 
  @(negedge CLKB);
  assist_initial("");
// tcc is 0.558 for mode 
  $display ("\n#######################################################################");
  test_num = 222;
  $display( "\n\n@%t TEST: %d --- Going to check Tcl, Tch & Tcc violations --- \n\n", $time, test_num);
  @(negedge CLKA);
  write_mema(1,"","");
  @(negedge CLKA)
  begin
    MEA = 1'b0;
    WEA = 1'b0;
    ADRB = 0;    
    DA = 0; 
  end
   for (vec= 1; vec <=7; vec= vec+1)
   begin
     $display ("Creating patterns for Tch violations \n %t", $time);
     // Tch violations
     create_patternA(vec,"Tch");
     if ( vec == 7 )
       check_outputA(0,1,"Tch");
     else
       check_outputA(0,0,"Tch");
   end
   for (vec= 1; vec <=7; vec= vec+1)
   begin
     $display ("Creating patterns for Tcl violations \n %t", $time);
     // Tcl violations
     if ( vec != 6 )
     begin
       create_patternA(vec,"Tcl");
       if ( vec == 5 || vec == 7 )
         check_outputA(0,1,"Tcl");
       else
         check_outputA(0,0,"Tcl");
     end
   end
   for (vec= 1; vec <=7; vec= vec+1)
   begin
     $display ("Creating patterns for Tcx violations \n %t", $time);
     // Tcx violations
     if ( vec != 6 )
     begin
       create_patternA(vec,"Tcx");
       if ( vec == 7 )
         check_outputA(0,1,"Tcx");
       else
       check_outputA(0,0,"Tcx");
     end
   end
   for (j= 0; j <=6; j= j+1)
   begin
     if (j == 0)
     begin
       assign param_name = "Tccn_rmezo";
       assign param_val_tcc = 0.558;
       @(negedge CLKA);
       RMEA = 1'b0;
     end
     if (j == 1)
     begin
       assign param_name = "Tccn_rm0";
       assign param_val_tcc = 2.034;
       @(negedge CLKA);
       RMEA = 1'b1;
       RMA = 4'd0;
       WA = 2'b11;
WPULSE = 3'b000;

     end
     if (j == 2)
     begin
       assign param_name = "Tccn_rm1";
       assign param_val_tcc = 0.851;
       @(negedge CLKA);
       RMEA = 1'b1;
       RMA = 4'd1;
       WA = 2'b11;
WPULSE = 3'b000;

     end
     if (j == 3)
     begin
       assign param_name = "Tccn_rm2";
       assign param_val_tcc = 0.807;
       @(negedge CLKA);
       RMEA = 1'b1;
       RMA = 4'd2;
       WA = 2'b10;
WPULSE = 3'b000;

     end
     if (j == 4)
     begin
       assign param_name = "Tccn_rm3";
       assign param_val_tcc = 0.558;
       @(negedge CLKA);
       RMEA = 1'b1;
       RMA = 4'd3;
       WA = 2'b10;
WPULSE = 3'b000;

     end
     if (j == 5)
     begin
       assign param_name = "Tccn_rm4";
       assign param_val_tcc = 0.527;
       @(negedge CLKA);
       RMEA = 1'b1;
       RMA = 4'd4;
       WA = 2'b01;
WPULSE = 3'b000;

     end
     if (j == 6)
     begin
       assign param_name = "Tccn_rm5";
       assign param_val_tcc = 0.502;
       @(negedge CLKA);
       RMEA = 1'b1;
       RMA = 4'd5;
       WA = 2'b01;
WPULSE = 3'b000;

     end
     for (vec= 1; vec <=7; vec= vec+1)
     begin
       $display ("Creating patterns for %s negedge to negedge violations \n %t j is %d vec is %d", param_name, $time, j, vec);
       // Tcc violations
       if ( vec != 5 && vec != 6 )
       begin
         create_patternA(vec,param_name);
         if ( vec == 7 )
           check_outputA(0,1,param_name);
         else
           check_outputA(0,0,param_name);
       end
     end
   end
  @(negedge CLKA);
    assist_initial("");

   for (j= 0; j <=6; j= j+1)
   begin
     if (j == 0)
     begin
       assign param_name = "Tccp_rmezo";
       assign param_val_tcc = 0.558;
       @(negedge CLKA);
       RMEA = 1'b0;
     end
     if (j == 1)
     begin
       assign param_name = "Tccp_rm0";
       assign param_val_tcc = 2.034;
       @(negedge CLKA);
       RMEA = 1'b1;
       RMA = 4'd0;
       WA = 2'b11;
WPULSE = 3'b000;

     end
     if (j == 2)
     begin
       assign param_name = "Tccp_rm1";
       assign param_val_tcc = 0.851;
       @(negedge CLKA);
       RMEA = 1'b1;
       RMA = 4'd1;
       WA = 2'b11;
WPULSE = 3'b000;

     end
     if (j == 3)
     begin
       assign param_name = "Tccp_rm2";
       assign param_val_tcc = 0.807;
       @(negedge CLKA);
       RMEA = 1'b1;
       RMA = 4'd2;
       WA = 2'b10;
WPULSE = 3'b000;

     end
     if (j == 4)
     begin
       assign param_name = "Tccp_rm3";
       assign param_val_tcc = 0.558;
       @(negedge CLKA);
       RMEA = 1'b1;
       RMA = 4'd3;
       WA = 2'b10;
WPULSE = 3'b000;

     end
     if (j == 5)
     begin
       assign param_name = "Tccp_rm4";
       assign param_val_tcc = 0.527;
       @(negedge CLKA);
       RMEA = 1'b1;
       RMA = 4'd4;
       WA = 2'b01;
WPULSE = 3'b000;

     end
     if (j == 6)
     begin
       assign param_name = "Tccp_rm5";
       assign param_val_tcc = 0.502;
       @(negedge CLKA);
       RMEA = 1'b1;
       RMA = 4'd5;
       WA = 2'b01;
WPULSE = 3'b000;

     end

   for (vec= 1; vec <=7; vec= vec+1)
   begin
     $display ("Creating patterns for Tcc posedge to posedge violations \n %t", $time);
     // Tcc violations
     if ( vec != 6 )
     begin
       create_patternA(vec,param_name);
       if (  vec == 7 )
           check_outputA(0,1,param_name);
       else
           check_outputA(0,0,param_name);
     end
   end
 end
  @(negedge CLKA);
    assist_initial("");
  $display ("\n#######################################################################");
  test_num = 223;
  $display( "\n\n@%t TEST: %d --- Going to check Tcl, Tch & Tcc violations --- \n\n", $time, test_num);
  @(negedge CLKA);
  assist_initial("");
  @(negedge CLKA);
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    WEA = 1'b0;
    ADRB = 0;    
    DA = 0; 
  end
  @(negedge CLKA);
  @(posedge CLKA)
  begin
    #0.077;
    CLKA = ~CLKA;
  end
  restart_clk = 1'b1;
  @(negedge CLKA);
    MEA = 1'b0;
    MEB = 1'b0;
  read_memb(1,"",80'bx);
  if ( err_cnt == 0 )
  begin
    $display("\n\n@%t           Clock high pulse width(Tch) violation corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock high pulse width(Tch) violation does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  write_mema(1,"","");
  @(negedge CLKA);
   read_memb("",10'd0,80'b0);
  @(negedge CLKA);
  @(negedge CLKA)
  begin
    #25;
    CLKA = ~CLKA;
    #0.4620000000000001;
    CLKA = ~CLKA;
    #0.096;
    CLKA = ~CLKA;
  end
  restart_clk = 1'b1;
  @(negedge CLKA);
    MEA = 1'b0;
    MEB = 1'b0;
  read_memb(1,"",80'bx);
  if ( err_cnt == 0 )
  begin 
    $display("\n\n@%t           Clock low pulse width(Tcl) violation corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock low pulse width(Tcl) violation does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  write_mema(1,"","");
  @(negedge CLKA);
    RMEA = 1'b1;
    WA = 2'b11;
WPULSE = 3'b000;
   
    RMA = 4'd0;
  @(negedge CLKA);
  @(negedge CLKA);
    #0.098;
    CLKA = ~CLKA;
    #1.9369999999999998;
    CLKA = ~CLKA;
    #0.097;
    CLKA = ~CLKA;
    #1.936;
    CLKA = ~CLKA;
    restart_clk = 1'b1;
  @(negedge CLKA);
  @(negedge CLKA);
    read_memb(1,"",80'bx);
    if (err_cnt == 0)
    begin    
      $display("\n\n@%t           Clock cycle time(Tccrm0) violation corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm0) violation does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
  @(negedge CLKA);
  write_mema(1,"","");
  @(negedge CLKA);
    RMEA = 1'b1;
    WA = 2'b11;
WPULSE = 3'b000;
   
    RMA = 4'd1;
  @(negedge CLKA);
  @(negedge CLKA);
    #0.098;
    CLKA = ~CLKA;
    #0.754;
    CLKA = ~CLKA;
    #0.097;
    CLKA = ~CLKA;
    #0.753;
    CLKA = ~CLKA;
    restart_clk = 1'b1;
  @(negedge CLKA);
  @(negedge CLKA);
    read_memb(1,"",80'bx);
    if (err_cnt == 0)
    begin    
      $display("\n\n@%t           Clock cycle time(Tccrm1) violation corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm1) violation does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
  @(negedge CLKA);
  write_mema(1,"","");
  @(negedge CLKA);
    RMEA = 1'b1;
    WA = 2'b10;
WPULSE = 3'b000;
   
    RMA = 4'd2;
  @(negedge CLKA);
  @(negedge CLKA);
    #0.098;
    CLKA = ~CLKA;
    #0.7100000000000001;
    CLKA = ~CLKA;
    #0.097;
    CLKA = ~CLKA;
    #0.7090000000000001;
    CLKA = ~CLKA;
    restart_clk = 1'b1;
  @(negedge CLKA);
  @(negedge CLKA);
    read_memb(1,"",80'bx);
    if (err_cnt == 0)
    begin    
      $display("\n\n@%t           Clock cycle time(Tccrm2) violation corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm2) violation does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
  @(negedge CLKA);
  write_mema(1,"","");
  @(negedge CLKA);
    RMEA = 1'b1;
    WA = 2'b10;
WPULSE = 3'b000;
   
    RMA = 4'd3;
  @(negedge CLKA);
  @(negedge CLKA);
    #0.098;
    CLKA = ~CLKA;
    #0.4610000000000001;
    CLKA = ~CLKA;
    #0.097;
    CLKA = ~CLKA;
    #0.4600000000000001;
    CLKA = ~CLKA;
    restart_clk = 1'b1;
  @(negedge CLKA);
  @(negedge CLKA);
    read_memb(1,"",80'bx);
    if (err_cnt == 0)
    begin    
      $display("\n\n@%t           Clock cycle time(Tccrm3) violation corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm3) violation does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
  @(negedge CLKA);
  write_mema(1,"","");
  @(negedge CLKA);
    RMEA = 1'b1;
    WA = 2'b01;
WPULSE = 3'b000;
   
    RMA = 4'd4;
  @(negedge CLKA);
  @(negedge CLKA);
    #0.098;
    CLKA = ~CLKA;
    #0.43000000000000005;
    CLKA = ~CLKA;
    #0.097;
    CLKA = ~CLKA;
    #0.42900000000000005;
    CLKA = ~CLKA;
    restart_clk = 1'b1;
  @(negedge CLKA);
  @(negedge CLKA);
    read_memb(1,"",80'bx);
    if (err_cnt == 0)
    begin    
      $display("\n\n@%t           Clock cycle time(Tccrm4) violation corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm4) violation does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
  @(negedge CLKA);
  write_mema(1,"","");
  @(negedge CLKA);
    RMEA = 1'b1;
    WA = 2'b01;
WPULSE = 3'b000;
   
    RMA = 4'd5;
  @(negedge CLKA);
  @(negedge CLKA);
    #0.098;
    CLKA = ~CLKA;
    #0.405;
    CLKA = ~CLKA;
    #0.097;
    CLKA = ~CLKA;
    #0.404;
    CLKA = ~CLKA;
    restart_clk = 1'b1;
  @(negedge CLKA);
  @(negedge CLKA);
    read_memb(1,"",80'bx);
    if (err_cnt == 0)
    begin    
      $display("\n\n@%t           Clock cycle time(Tccrm5) violation corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm5) violation does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
  @(negedge CLKA);
  write_mema(1,"","");
  @(negedge CLKA);
    RMEA = 1'b1;
    WA = 2'b01;
WPULSE = 3'b000;
   
    RMA = 4'd6;
  @(negedge CLKA);
  @(negedge CLKA);
    #0.098;
    CLKA = ~CLKA;
    #0.405;
    CLKA = ~CLKA;
    #0.097;
    CLKA = ~CLKA;
    #0.404;
    CLKA = ~CLKA;
    restart_clk = 1'b1;
  @(negedge CLKA);
  @(negedge CLKA);
    read_memb(1,"",80'bx);
    if (err_cnt == 0)
    begin    
      $display("\n\n@%t           Clock cycle time(Tccrm5) violation corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm5) violation does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
  @(negedge CLKA);
  write_mema(1,"","");
  @(negedge CLKA);
    RMEA = 1'b1;
    WA = 2'b01;
WPULSE = 3'b000;
   
    RMA = 4'd7;
  @(negedge CLKA);
  @(negedge CLKA);
    #0.098;
    CLKA = ~CLKA;
    #0.405;
    CLKA = ~CLKA;
    #0.097;
    CLKA = ~CLKA;
    #0.404;
    CLKA = ~CLKA;
    restart_clk = 1'b1;
  @(negedge CLKA);
  @(negedge CLKA);
    read_memb(1,"",80'bx);
    if (err_cnt == 0)
    begin    
      $display("\n\n@%t           Clock cycle time(Tccrm5) violation corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm5) violation does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
  @(negedge CLKA);
  write_mema(1,"","");
  @(negedge CLKA);
   read_memb("",10'd0,80'b0);
  @(negedge CLKA);
 @(negedge CLKA);
   RMEA = 1'b0;
   RMEB = 1'b0;
  assist_initial("");
  RMA = 4'b0011;
  RMB = 4'b0011;
  @(negedge CLKA);
  @(negedge CLKA)
  begin
    #0.098;
    CLKA = ~CLKA;
    #0.4610000000000001; //tcc 
    CLKA = ~CLKA;
    #0.097;
    CLKA = ~CLKA;
    #0.4600000000000001;
    CLKA = ~CLKA;
  @(posedge CLKB);
   rmdel_tcq;
    if (QB_BEHAV === 80'bx)
    begin
      $display("\n\n@%t           Clock cycle time(Tcc) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end   
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tcc) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end   
  end
    restart_clk = 1'b1;
  #10;
  read_memb(1,"",80'bx);
  if ( err_cnt == 0 )
  begin    
    $display("\n\n@%t           Clock cycle time(Tcc) violation corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tcc) violation does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end    
  @(negedge CLKA);
   RMEA = 1'b0;
   RMEB = 1'b0;
  assist_initial("");
  RMA = 4'b0011;
  RMB = 4'b0011;
  #10;
  write_mema(1,"","");
  read_memb("",10'd0,80'b0);
  @(negedge CLKA);
  ADRA = 0;
  $display ("\n#######################################################################");
  test_num = 224;
  $display( "\n\n@%t TEST: %d --- Going to check first valid write after Tcl, Tch & Tcc violations --- \n\n", $time, test_num);
  @(negedge CLKA);
  @(negedge CLKA)
  begin
    MEA = 1'b1;
    WEA = 1'b0;
    ADRA = 0;    
    ADRB = 0;    
    DA = 0; 
  end
  @(negedge CLKA);
  @(posedge CLKA)
  begin
    #0.077;
    CLKA = ~CLKA;
    WEA = 1'b1;
    ADRA = 0;    
    ADRB = 0;    
    DA = 0; 
  no_clkA = 1'b1;
  @(posedge CLKB);
    rmdel_tcq;
    if (QB_BEHAV === 80'bx)
    begin
      $display("\n\n@%t           Clock high pulse width(Tch) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end   
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock high pulse width(Tch) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end   
  end
    restart_clk = 1'b1;
  @(negedge CLKA);
  @(negedge CLKA);
    WEA = 1'b0;
    ADRB = 0;
  @(posedge CLKA);
  @(posedge CLKB);
   rmdel_tcq;
  if (QB_BEHAV === 80'b0)
  begin
    $display("\n\n@%t           first valid write after Clock high pulse width(Tch) violation successfull \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: first valid write after Clock high pulse width(Tch) violation unsuccessfull\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  write_mema(1,"","");
  read_memb("",10'd0,80'b0);
 
    WEA = 1'b0;
    ADRA = 0;    
    ADRB = 0;    
    DA = 0; 
  @(negedge CLKA);
  @(negedge CLKA)
  @(negedge CLKA)
  begin
    #25;
    CLKA = ~CLKA;
    #0.4620000000000001;
    CLKA = ~CLKA;
    #0.096;
    CLKA = ~CLKA;
  @(negedge CLKA);
    WEA = 1'b1;
    ADRA = 0;
    ADRB = 0;
    DA = 0;
  @(posedge CLKB);
  rmdel_tcq;
    if (QB_BEHAV === 80'bx)
    begin
      $display("\n\n@%t           Clock low pulse width(Tcl) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock low pulse width(Tcl) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
  end
  restart_clk = 1'b1;
  @(negedge CLKA);
  @(negedge CLKA);
    WEA = 1'b0;
    ADRA = 0;
    ADRB = 0;
  @(posedge CLKA);
  @(posedge CLKB);
   rmdel_tcq;
  if (QB_BEHAV === 80'b0)
  begin 
    $display("\n\n@%t           first valid write after Clock low pulse width(Tcl) violation successfull \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: first valid write after Clock low pulse width(Tcl) violation unsuccessfull\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  write_mema(1,"","");
  read_memb("",10'd0,80'b0);
  assist_initial("");
  @(negedge CLKA);
  @(negedge CLKA)
  begin
    #25;
    CLKA = ~CLKA;
    #0.4610000000000001;
    CLKA = ~CLKA;
    #0.097;
    CLKA = ~CLKA;
    #0.4600000000000001;
    CLKA = ~CLKA;
  @(posedge CLKB);
   rmdel_tcq;
    if (QB_BEHAV === 80'bx)
    begin
      $display("\n\n@%t           Clock cycle time(Tcc) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end   
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tcc) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end   
  end
  restart_clk = 1'b1;
  @(negedge CLKA);
    WEA = 1'b0;
    ADRB = 0;
  @(negedge CLKA);
    WEA = 1'b1;
    ADRA = 0;
    ADRB = 0;
    DA = 0;
  @(posedge CLKA);
  @(posedge CLKB);
    rmdel_tcq;
  if (QB_BEHAV === 80'b0)
  begin
    $display("\n\n@%t           first valid write after Clock cycle time(Tcc) violation successfull \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: first valid write after Clock cycle time(Tcc) violation unsuccessfull\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end    
  #10;
  write_mema(1,"","");
  read_memb("",10'd0,80'b0);
  @(negedge CLKA);
  ADRA = 0;
      assist_initial("");

  $display ("\n#######################################################################");
  test_num = 225;
  $display( "\n\n@%t TEST: %d --- Going to check Tchtest1 && Tcltest1 violations --- \n\n", $time, test_num);
  @(negedge CLKA);
  write_mema("",10'd0, 80'd0);
  @(negedge CLKA);
  read_memb("",10'd0, 80'd0);
  restart_clk = 1'b1;
  @(negedge CLKA);
  @(negedge CLKA)
  begin
    MEA = 1'b1;
      #2.0349999999999997;
    
    TEST1A = 1'b1;
    WEA = 1'b0;
    DA = 0; 
    MEB = 0; 
    ADRA = 0;    
  end
  @(negedge CLKA);
  no_clk = 1;
  #72.035;
  CLKA = 1'b1;
      #0.383;
  
  CLKA = 1'b0;
  restart_clk = 1'b1;
  read_memb(1,"",80'bx);
  if ( err_cnt == 0 )
  begin
    $display("\n\n@%t           Clock high pulse width(Tchtest1) violation corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock high pulse width(Tchtest1) violation does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKA);
      #2.0349999999999997;
  
  TEST1A = 1'b0;
  write_mema(1,"","");
  @(negedge CLKA);
  read_memb("",10'd0, 80'd0);
  @(negedge CLKA);
  @(negedge CLKA);
      #2.0349999999999997;
  
  TEST1A = 1'b1;
  @(negedge CLKA);
  no_clk = 1;
  #72.035;
  CLKA = 1'b1;
      #0.21000000000000008;
  
  CLKA = 1'b0;
      #0.348;
  
  CLKA = 1'b1;
  restart_clk = 1'b1;
  read_memb(1,"",80'bx);
  if ( err_cnt == 0 )
  begin 
    $display("\n\n@%t           Clock low pulse width(Tcltest1) violation corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock low pulse width(Tcltest1) violation does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  @(negedge CLKA);
      #2.0349999999999997;
  
  TEST1A = 1'b0;
  write_mema(1,"","");
  @(negedge CLKA);
  read_memb("",10'd0, 80'd0);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 226;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on ADRB in Read mode  --- \n\n", $time, test_num);
  setupholdb("ADRB","Tac",$realtobits(0.070),0,0,0,2'b10,2'b00,2'b01);
  @(negedge CLKB);
  $display ("\n#######################################################################");
  test_num = 227;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on ADRB in Read mode  --- \n\n", $time, test_num);
  setupholdb("ADRB","Tac",$realtobits(0.070),0,1,0,2'b10,2'b01,2'b01);
  @(negedge CLKB);
  @(negedge CLKB);
  $display ("\n#######################################################################");
  test_num = 228;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on ADRB in Read mode  --- \n\n", $time, test_num);
  setupholdb("ADRB","Tcax",$realtobits(0.114),1,0,0,2'b10,2'b00,2'b01);
  @(negedge CLKB);
  $display ("\n#######################################################################");
  test_num = 229;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on ADRB in Read mode  --- \n\n", $time, test_num);
  setupholdb("ADRB","Tcax",$realtobits(0.114),1,1,0,2'b10,2'b01,2'b01);
  @(negedge CLKB);
  $display ("\n#######################################################################");
  test_num = 230;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on ADRA in Write mode  --- \n\n", $time, test_num);
  setupholda("ADRA","Tac",$realtobits(0.070),0,0,1,2'b01,2'b00,2'b01);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 231;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on ADRA in Write mode  --- \n\n", $time, test_num);
  setupholda("ADRA","Tac",$realtobits(0.070),0,1,1,2'b01,2'b00,2'b11);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 232;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on ADRA in Write mode  --- \n\n", $time, test_num);
  setupholda("ADRA","Tcax",$realtobits(0.114),1,0,1,2'b01,2'b00,2'b01);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 233;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on ADRA in Write mode  --- \n\n", $time, test_num);
  setupholda("ADRA","Tcax",$realtobits(0.114),1,1,1,2'b01,2'b00,2'b11);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 234;
  $display( "\n\n@%t TEST: %d --- Going to check Setup fall constraint on LS in Write mode  --- \n\n", $time, test_num);
  setupholda("LS","Tflsc",$realtobits(0.516),0,0,1,2'b01,2'b00,2'b01);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 235;
  $display( "\n\n@%t TEST: %d --- Going to check Setup fall Violation on LS in Write mode  --- \n\n", $time, test_num);
  setupholda("LS","Tflsc",$realtobits(0.516),0,1,1,2'b01,2'b01,2'b11);
  $display ("\n#######################################################################");
  test_num = 236;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on LS in Write mode  --- \n\n", $time, test_num);
  setupholda("LS","Tlsx",$realtobits(0.093),1,0,1,2'b01,2'b00,2'b01);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 237;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on LS in Write mode  --- \n\n", $time, test_num);
  setupholda("LS","Tlsx",$realtobits(0.093),1,1,1,2'b01,2'b01,2'b11);
  @(negedge CLKA);



  @(negedge CLKA); 
  $display ("\n#######################################################################");
  test_num = 238;
  $display( "\n\n@%t TEST: %d --- Synchronous CLKA & ADRA events in Write mode  --- \n\n", $time, test_num); 
  synceventa("ADRA",1,2'b10,2'b00,2'b11); 
  @(negedge CLKB);
  write_mema(1,"","");
  $display ("\n#######################################################################");
  test_num = 239;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on MEB in Read mode  --- \n\n", $time, test_num);
  setupholdb("MEB","Tmc",$realtobits(0.067),0,0,0,2'b10,2'b00,2'b01);
  @(negedge CLKB);
  $display ("\n#######################################################################");
  test_num = 240;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on MEB in Read mode  --- \n\n", $time, test_num);
  setupholdb("MEB","Tmc",$realtobits(0.067),0,1,0,2'b10,2'b01,2'b01);
  @(negedge CLKB);
  write_mema(1,"","");
  $display ("\n#######################################################################");
  test_num = 241;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on MEB in Read mode  --- \n\n", $time, test_num);
  setupholdb("MEB","Tcmx",$realtobits(0.022),1,0,0,2'b10,2'b00,2'b01);
  @(negedge CLKB);
  $display ("\n#######################################################################");
  test_num = 242;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on MEB in Read mode  --- \n\n", $time, test_num);
  setupholdb("MEB","Tcmx",$realtobits(0.022),1,1,0,2'b10,2'b01,2'b01);
  @(negedge CLKB);
  $display ("\n#######################################################################");
  test_num = 243;
  $display( "\n\n@%t TEST: %d --- Going to check Setup fall Violation on MEB in Read mode  --- \n\n", $time, test_num);
  @(negedge CLKA);
  write_mema(1,"","");
  WEA = 1'b0;
  @(negedge CLKB);
  MEB = 1'b1;
  #((72.035 - 0.067)+0.001);
  MEB = 1'b0;
  @(posedge CLKB)
  begin
   #0.346
    if ( QB_BEHAV !== 80'bx )
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: The parameter Tmc not modelled effectively\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           The parameter Tmc modelled effectively \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLKB);
  MEB = 1'b1;
  read_memb(1,"","");
  if (err_cnt == 0)
  begin
    $display ("\n@%t            The Parameter Tmc is modelled effectively", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1 ;
    $display ("\n@%t               ERROR_MODEL: The Parameter Tmc is not modelled effectively ", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKA);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 244;
  $display( "\n\n@%t TEST: %d --- Going to check Setup fall Violation on MEB in Read mode  with ADRB = X --- \n\n", $time, test_num);
  @(negedge CLKA);
  write_mema(1,"","");
  WEA = 1'b0;
  @(negedge CLKB);
  ADRB = 10'bx;
  MEB = 1'b1;
  #((72.035 - 0.067)+0.001);
  MEB = 1'b0;
  @(posedge CLKB)
  begin
   #0.346
    if ( QB_BEHAV !== 80'bx )
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: The parameter Tmc not modelled effectively\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           The parameter Tmc modelled effectively \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLKB);
  ADRB = 10'b0;
  MEB = 1'b1;
  read_memb(1,"","");
  if (err_cnt == 0)
  begin
    $display ("\n@%t            The Parameter Tmc is modelled effectively", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1 ;
    $display ("\n@%t               ERROR_MODEL: The Parameter Tmc is not modelled effectively ", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKA);
  @(negedge CLKA);
  write_mema(1,"","");
  $display ("\n#######################################################################");
  test_num = 245;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on MEB in Read mode  --- \n\n", $time, test_num);
  setupholdb("MEB","Tcmx",$realtobits(0.022),1,0,0,2'b10,2'b00,2'b01);
  @(negedge CLKB);
  $display ("\n#######################################################################");
  test_num = 246;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on MEB in Read mode  --- \n\n", $time, test_num);
  setupholdb("MEB","Tcmx",$realtobits(0.022),1,1,0,2'b10,2'b01,2'b01);
  @(negedge CLKB);
  @(negedge CLKB);
  write_mema(1,"","");
  @(negedge CLKB);
  LS = 1'b1;
  $display ("\n#######################################################################");
  test_num = 247;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on MEB in Read mode  --- \n\n", $time, test_num);
  setupholdb("MEB","Tmc",$realtobits(0.067),0,1,0,2'b10,2'b01,2'b01);
  @(negedge CLKB);
  read_memb(1,"","");
  @(negedge CLKB);
  write_mema(1,"","");
  @(negedge CLKB);
  LS = 1'b1;
  $display ("\n#######################################################################");
  test_num = 248;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on MEB in Read mode  --- \n\n", $time, test_num);
  setupholdb("MEB","Tcmx",$realtobits(0.022),1,1,0,2'b10,2'b01,2'b01);
  @(negedge CLKB);
  @(negedge CLKB);
  read_memb(1,"","");
  @(negedge CLKB);
  read_memb(1,"","");

  $display ("\n#######################################################################");
  test_num = 249;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on MEA in Write mode  --- \n\n", $time, test_num);
  setupholda("MEA","Tmc",$realtobits(0.067),0,0,1,2'b01,2'b00,2'b01);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 250;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on MEA in Write mode  --- \n\n", $time, test_num);
  setupholda("MEA","Tmc",$realtobits(0.067),0,1,1,2'b01,2'b00,2'b11);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 251;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on MEA in Write mode  --- \n\n", $time, test_num);
  setupholda("MEA","Tcmx",$realtobits(0.022),1,0,1,2'b01,2'b00,2'b01);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 252;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on MEA in Write mode  --- \n\n", $time, test_num);
  setupholda("MEA","Tcmx",$realtobits(0.022),1,1,1,2'b01,2'b00,2'b11);
  @(negedge CLKA);
  @(negedge CLKA);
  LS = 1'b1;
  $display ("\n#######################################################################");
  test_num = 253;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on MEA in Write mode  --- \n\n", $time, test_num);
  setupholda("MEA","Tmc",$realtobits(0.067),0,1,1,2'b01,2'b00,2'b11);
  @(negedge CLKA);
  @(negedge CLKB);
  read_memb(1,"","");
  @(negedge CLKA);
  LS = 1'b1;
  $display ("\n#######################################################################");
  test_num = 254;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on MEA in Write mode  --- \n\n", $time, test_num);
  setupholda("MEA","Tcmx",$realtobits(0.022),1,1,1,2'b01,2'b00,2'b11);
  @(negedge CLKA);
  @(negedge CLKB);
  read_memb(1,"","");

  @(negedge CLKB); 
  $display ("\n#######################################################################");
  test_num = 255;
  $display( "\n\n@%t TEST: %d --- Synchronous CLKB & MEB events in Read mode  --- \n\n", $time, test_num); 
  synceventb("MEB",0,2'b10,2'b01,2'b01);
  @(negedge CLKA);  
  $display ("\n#######################################################################");
  test_num = 256;
  $display( "\n\n@%t TEST: %d --- Synchronous CLKA & MEA events in Write mode  --- \n\n", $time, test_num);  
  synceventa("MEA",1,2'b10,2'b00,2'b11);  
   
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 257;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on DA in Write mode  --- \n\n", $time, test_num);
  setupholda("DA","Tcdx",$realtobits(0.124),1,0,1,2'b01,2'b00,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 258;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on DA in Write mode  --- \n\n", $time, test_num);
  setupholda("DA","Tcdx",$realtobits(0.124),1,1,1,2'b01,2'b00,2'b10);
  @(negedge CLKA);

  $display ("\n#######################################################################");
  test_num = 259;
  $display( "\n\n@%t TEST: %d --- Going to check Bitwise Hold Violation on DA in Write mode  --- \n\n", $time, test_num);
  for ( d_num = 0; d_num < 80; d_num = d_num + 1 ) 
  begin
    @(negedge CLKA);
     write_mema("",10'd0, 80'd0);
    @(negedge CLKA);
    $display ("\n@%t  Check Hold Violation with DA[%0d] bit", $time, d_num);
     MEA = 1'b1;
     WEA = 1'b1;
     DA   = 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
    @(posedge CLKA);
     #0.123;
     DA[d_num]   = ~DA[d_num];
    @(negedge CLKA);
     WEA = 1'b0;
     data_expect = 80'd0;
     data_expect[d_num] = 1'bX;
     read_memb("",10'd0,data_expect);
    @(negedge CLKA);
     write_mema("",10'd0, 80'd0);
    @(negedge CLKA);
     MEA = 1'b1;
     WEA = 1'b1;
     DA   = 80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000;
     DA[d_num]   = 1'b1;
    @(posedge CLKA);
     #0.123;
     DA[d_num]   = ~DA[d_num];
    @(negedge CLKA);
     WEA = 1'b0;
     data_expect = 80'd0;
     data_expect[d_num] = 1'bX;
     read_memb("",10'd0,data_expect);
    @(negedge CLKA);
  end
  @(negedge CLKA);
   write_mema("",10'd0, 80'd0);
  $display ("\n#######################################################################");
  test_num = 260;
  $display( "\n\n@%t TEST: %d --- Going to check Bitwise Hold Violation on DA in Write mode with output bits high  --- \n\n", $time, test_num);
  for ( d_num = 0; d_num < 80; d_num = d_num + 1 ) 
  begin
    @(negedge CLKA);
     write_mema("",10'd0, 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111);
    @(negedge CLKA);
    $display ("\n@%t  Check Hold Violation with DA[%0d] bit", $time, d_num);
     MEA = 1'b1;
     WEA = 1'b1;
     DA   = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
    @(posedge CLKA);
     #0.123;
     DA[d_num]   = ~DA[d_num];
    @(negedge CLKA);
     WEA = 1'b0;
     data_expect = 80'b11111111111111111111111111111111111111111111111111111111111111111111111111111111;
     data_expect[d_num] = 1'bX;
     read_memb("",10'd0,data_expect);
    @(negedge CLKA);
  end
  @(negedge CLKA);
   write_mema("",10'd0, 80'd0);
  @(negedge CLKA);
    write_mema(1,"","");
  @(negedge CLKA);
    read_memb("",10'd0,80'd0);


  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 261;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on WEA  --- \n\n", $time, test_num);
  setupholda("WEA","Twc",$realtobits(0.074),0,0,1,2'b01,2'b00,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 262;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on WEA  --- \n\n", $time, test_num);
  setupholda("WEA","Twc",$realtobits(0.074),0,1,1,2'b01,2'b00,2'b10);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 263;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on WEA  with ADRA = X --- \n\n", $time, test_num);
  setupholda("WEA_ADRA_X","Twc",$realtobits(0.074),0,1,1,2'b10,2'b00,2'b11);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 264;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on WEA in Write mode  --- \n\n", $time, test_num);
  setupholda("WEA","Twc",$realtobits(0.074),0,0,1,2'b01,2'b00,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 265;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on WEA in Write mode  --- \n\n", $time, test_num);
  setupholda("WEA","Twc",$realtobits(0.074),0,1,1,2'b01,2'b00,2'b10);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 266;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on WEA in Write mode  with ADRA = X --- \n\n", $time, test_num);
  setupholda("WEA_ADRA_X","Twc",$realtobits(0.074),0,1,1,2'b10,2'b00,2'b11);
  @(negedge CLKA);

  @(negedge CLKA);
  ADRA = 0;
  $display ("\n#######################################################################");
  test_num = 267;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on WEA  --- \n\n", $time, test_num);
  setupholda("WEA","Tcwx",$realtobits(0.022),1,0,0,2'b01,2'b00,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 268;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on WEA  --- \n\n", $time, test_num);
  setupholda("WEA","Tcwx",$realtobits(0.022),1,1,0,2'b01,2'b00,2'b10);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 269;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on WEA  with ADRA = X --- \n\n", $time, test_num);
  setupholda("WEA_ADRA_X","Tcwx",$realtobits(0.022),1,1,1,2'b10,2'b00,2'b11);
  @(negedge CLKA);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 270;
  $display( "\n\n@%t TEST: %d --- Synchronous CLKA & WEA events  --- \n\n", $time, test_num);
  synceventa("WEA",1,2'b01,2'b01,2'b10);
    
  $display ("\n#######################################################################");
  test_num = 271;
  $display( "\n\n@%t TEST: %d --- Going to check Setup rise constraint on LS in Read mode  --- \n\n", $time, test_num);
  @(negedge CLKA);
  @(negedge CLKA);
  write_mema(1,"","");
  WEA = 1'b0;
  @(negedge CLKB);
  LS = 1'b0;
  #(72.035 - 0.049);
  LS = 1'b1;
  @(posedge CLKB)
  begin
   #0.001
    if ( QB_BEHAV === 80'bx )
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: The parameter Trlsc not modelled effectively\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           The parameter Trlsc modelled effectively \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLKB);
  LS = 1'b0;
  read_memb(1,"","");
  if (err_cnt == 0)
  begin
    $display ("\n@%t            The Parameter Trlsc is modelled effectively", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1 ;
    $display ("\n@%t               ERROR_MODEL: The Parameter Trlsc is not modelled effectively ", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKA);
  @(negedge CLKA);


  $display ("\n#######################################################################");
  test_num = 272;
  $display( "\n\n@%t TEST: %d --- Going to check Setup rise Violation on LS in Read mode  --- \n\n", $time, test_num);
  @(negedge CLKA);
  write_mema(1,"","");
  WEA = 1'b0;
  @(negedge CLKB);
  LS = 1'b0;
  #((72.035 - 0.049)+0.001);
  LS = 1'b1;
  @(posedge CLKB)
  begin
   #0.001
    if ( QB_BEHAV !== 80'bx )
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: The parameter Trlsc not modelled effectively\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           The parameter Trlsc modelled effectively \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLKB);
  LS = 1'b0;
  read_memb(1,"","");
  if (err_cnt == 0)
  begin
    $display ("\n@%t            The Parameter Trlsc is modelled effectively", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1 ;
    $display ("\n@%t               ERROR_MODEL: The Parameter Trlsc is not modelled effectively ", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKA);
  @(negedge CLKA);

  $display ("\n#######################################################################");
  test_num = 273;
  $display( "\n\n@%t TEST: %d --- Going to check Setup rise Violation on LS in Write mode  --- \n\n", $time, test_num);
  @(negedge CLKA);
  write_mema(1,"","");
  read_memb("",10'd0,80'b0);
  WEA = 1'b1;
  @(negedge CLKA);
  LS = 1'b0;
  #((72.035 - 0.049)+0.001);
  LS = 1'b1;
  @(posedge CLKA)
  begin
    #0.001
    if ( QB_BEHAV === 80'bx )
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: The parameter Trlsc not modelled effectively\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    else
    begin
      $display("\n\n@%t           The parameter Trlsc modelled effectively \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
  end
  @(negedge CLKA);
  WEA = 1'b0;
  LS = 1'b0;
  read_memb(1,"",80'bx);
  if (err_cnt == 0)
  begin
    $display ("\n@%t            The Parameter Trlsc is modelled effectively", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1 ;
    $display ("\n@%t               ERROR_MODEL: The Parameter Trlsc is not modelled effectively ", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  @(negedge CLKA);
  write_mema(1,"","");
  @(negedge CLKA);
  read_memb("",10'd0,80'b0);



  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 274;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on TEST1B in Read mode  --- \n\n", $time, test_num);
  setupholdb("TEST1B","TT1C",$realtobits(0.096),0,0,0,2'b00,2'b00,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 275;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on TEST1B in Read mode  --- \n\n", $time, test_num);
  setupholdb("TEST1B","TT1C",$realtobits(0.096),0,1,0,2'b10,2'b01,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 276;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on TEST1B in Read mode  --- \n\n", $time, test_num);
  setupholdb("TEST1B","TCT1X",$realtobits(2.034),1,0,0,2'b00,2'b00,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 277;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on TEST1B  in Read mode  --- \n\n", $time, test_num);
  setupholdb("TEST1B","TCT1X",$realtobits(2.034),1,1,0,2'b10,2'b01,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 278;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on TEST1A in Write mode  --- \n\n", $time, test_num);
  setupholda("TEST1A","TT1C",$realtobits(0.096),0,0,1,2'b01,2'b00,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 279;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on TEST1A in Write mode  --- \n\n", $time, test_num);
  setupholda("TEST1A","TT1C",$realtobits(0.096),0,1,1,2'b01,2'b00,2'b10);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 280;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on TEST1A in Write mode  --- \n\n", $time, test_num);
  setupholda("TEST1A","TCT1X",$realtobits(2.034),1,0,1,2'b01,2'b00,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 281;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on TEST1A  in Write mode  --- \n\n", $time, test_num);
setupholda("TEST1A","TCT1X",$realtobits(2.034),1,1,1,2'b01,2'b00,2'b10);
  @(negedge CLKA);

  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 282;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on RMB[2:0] in Read mode  --- \n\n", $time, test_num);
  setupholdb("RMB","Trmc",$realtobits(0.083),0,0,0,2'b00,2'b00,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 283;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on RMB[2:0] in Read mode  --- \n\n", $time, test_num);
  setupholdb("RMB","Trmc",$realtobits(0.083),0,1,0,2'b10,2'b01,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 284;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on RMB[3] in Read mode  --- \n\n", $time, test_num);
  setupholdb("RMB","Trm3c",$realtobits(0.516),0,0,0,2'b00,2'b00,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 285;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on RMB[3] in Read mode  --- \n\n", $time, test_num);
  setupholdb("RMB","Trm3c",$realtobits(0.516),0,1,0,2'b10,2'b01,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 286;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on RMB[1:0] in Read mode  --- \n\n", $time, test_num);
  setupholdb("RMB","Tcrmx",$realtobits(0.035),1,0,0,2'b00,2'b00,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 287;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on RMB[1:0] in Read mode  --- \n\n", $time, test_num);
  setupholdb("RMB","Tcrmx",$realtobits(0.035),1,1,0,2'b10,2'b01,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 288;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on RMB[3] in Read mode  --- \n\n", $time, test_num);
  setupholdb("RMB","Tcrm3x",$realtobits(2.034),1,0,0,2'b00,2'b00,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 289;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on RMB[3] in Read mode  --- \n\n", $time, test_num);
  setupholdb("RMB","Tcrm3x",$realtobits(2.034),1,1,0,2'b10,2'b01,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 290;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on RMA[2:0] in Write mode  --- \n\n", $time, test_num);
  setupholda("RMA","Trmc",$realtobits(0.083),0,0,1,2'b01,2'b00,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 291;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on RMA[2:0] in Write mode  --- \n\n", $time, test_num);
  setupholda("RMA","Trmc",$realtobits(0.083),0,1,1,2'b01,2'b00,2'b10);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 292;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on RMA[3] in Write mode  --- \n\n", $time, test_num);
  setupholda("RMA","Trm3c",$realtobits(0.516),0,0,1,2'b01,2'b00,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 293;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on RMA[3] in Write mode  --- \n\n", $time, test_num);
  setupholda("RMA","Trm3c",$realtobits(0.516),0,1,1,2'b01,2'b00,2'b10);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 294;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on RMA[1:0] in Write mode  --- \n\n", $time, test_num);
  setupholda("RMA","Tcrmx",$realtobits(0.035),1,0,1,2'b01,2'b00,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 295;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on RMA[1:0] in Write mode  --- \n\n", $time, test_num);
  setupholda("RMA","Tcrmx",$realtobits(0.035),1,1,1,2'b01,2'b00,2'b10);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 296;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on RMA[3] in Write mode  --- \n\n", $time, test_num);
  setupholda("RMA","Tcrm3x",$realtobits(2.034),1,0,1,2'b01,2'b00,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 297;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on RMA[2] in Write mode  --- \n\n", $time, test_num);
  setupholda("RMA","Tcrm3x",$realtobits(2.034),1,1,1,2'b01,2'b00,2'b10);
  @(negedge CLKA);
  RMA = 4'b0011;
  RMB = 4'b0011;
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 298;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on RMEB in Read mode  --- \n\n", $time, test_num);
  setupholdb("RMEB","Trmec",$realtobits(0.083),0,0,0,2'b00,2'b00,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 299;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on RMEB in Read mode  --- \n\n", $time, test_num);
  setupholdb("RMEB","Trmec",$realtobits(0.083),0,1,0,2'b10,2'b01,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 300;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on RMEB in Read mode  --- \n\n", $time, test_num);
  setupholdb("RMEB","Tcrmex",$realtobits(0.035),1,0,0,2'b00,2'b00,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 301;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on RMEB in Read mode  --- \n\n", $time, test_num);
  setupholdb("RMEB","Tcrmex",$realtobits(0.035),1,1,0,2'b10,2'b01,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 302;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on RMEA in Write mode  --- \n\n", $time, test_num);
  setupholda("RMEA","Trmec",$realtobits(0.083),0,0,1,2'b01,2'b00,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 303;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on RMEA in Write mode  --- \n\n", $time, test_num);
  setupholda("RMEA","Trmec",$realtobits(0.083),0,1,1,2'b01,2'b00,2'b10);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 304;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on RMEA in Write mode  --- \n\n", $time, test_num);
  setupholda("RMEA","Tcrmex",$realtobits(0.035),1,0,1,2'b01,2'b00,2'b00);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 305;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on RMEA in Write mode  --- \n\n", $time, test_num);
  setupholda("RMEA","Tcrmex",$realtobits(0.035),1,1,1,2'b01,2'b00,2'b10);
  @(negedge CLKA);
  RMA = 4'b0011;
  RMEA = 0;
  RMEB = 0;
  RMA = 4'b0011;
  @(negedge CLKA);
  write_mema(1,"","");
  $display ("\n#######################################################################");
  test_num = 306;
  $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on TEST_RNMA in Write mode  --- \n\n", $time, test_num);
  setupholda("TEST_RNMA","Ttrnmc",$realtobits(0.096),0,0,1,2'b10,2'b00,2'b01);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 307;
  $display( "\n\n@%t TEST: %d --- Going to check Setup Violation on TEST_RNMA in Write mode  --- \n\n", $time, test_num);
  setupholda("TEST_RNMA","Ttrnmc",$realtobits(0.096),0,1,1,2'b10,2'b00,2'b11);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 308;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on TEST_RNMA in Write mode  --- \n\n", $time, test_num);
  setupholda("TEST_RNMA","Tctrnmx",$realtobits(2.034),1,0,1,2'b10,2'b00,2'b01);
  @(negedge CLKA);
  $display ("\n#######################################################################");
  test_num = 309;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on TEST_RNMA  in Write mode  --- \n\n", $time, test_num);
  setupholda("TEST_RNMA","Tctrnmx",$realtobits(2.034),1,1,1,2'b10,2'b00,2'b11);
  @(negedge CLKA);


  @(negedge CLKB)

 
  @(negedge CLKB);
  assist_initial("");
// tcc is 0.558 for mode 
  $display ("\n#######################################################################");
  test_num = 310;
  $display( "\n\n@%t TEST: %d --- Going to check Tcl, Tch & Tcc violations --- \n\n", $time, test_num);
  @(negedge CLKB);
  write_mema(1,"","");
  @(negedge CLKB)
  begin
    MEB = 1'b0;
    WEA = 1'b0;
    ADRB = 0;    
    DA = 0; 
  end
   for (vec= 1; vec <=7; vec= vec+1)
   begin
     $display ("Creating patterns for Tch violations \n %t", $time);
     // Tch violations
     create_patternB(vec,"Tch");
     if ( vec == 7 )
       check_outputB(1,1,"Tch");
     else
       check_outputB(0,1,"Tch");
   end
   for (vec= 1; vec <=7; vec= vec+1)
   begin
     $display ("Creating patterns for Tcl violations \n %t", $time);
     // Tcl violations
     if ( vec != 6 )
     begin
       create_patternB(vec,"Tcl");
       if ( vec == 5 || vec == 7 )
         check_outputB(1,1,"Tcl");
       else
         check_outputB(0,1,"Tcl");
     end
   end
   for (vec= 1; vec <=7; vec= vec+1)
   begin
     $display ("Creating patterns for Tcx violations \n %t", $time);
     // Tcx violations
     if ( vec != 6 )
     begin
       create_patternB(vec,"Tcx");
       if ( vec == 7 )
         check_outputB(1,1,"Tcx");
       else
       check_outputB(0,1,"Tcx");
     end
   end
   for (j= 0; j <=6; j= j+1)
   begin
     if (j == 0)
     begin
       assign param_name = "Tccn_rmezo";
       assign param_val_tcc = 0.558;
       @(negedge CLKB);
       RMEB = 1'b0;
     end
     if (j == 1)
     begin
       assign param_name = "Tccn_rm0";
       assign param_val_tcc = 2.034;
       @(negedge CLKB);
       RMEB = 1'b1;
       RMB = 4'd0;
       WA = 2'b11;
WPULSE = 3'b000;

     end
     if (j == 2)
     begin
       assign param_name = "Tccn_rm1";
       assign param_val_tcc = 0.851;
       @(negedge CLKB);
       RMEB = 1'b1;
       RMB = 4'd1;
       WA = 2'b11;
WPULSE = 3'b000;

     end
     if (j == 3)
     begin
       assign param_name = "Tccn_rm2";
       assign param_val_tcc = 0.807;
       @(negedge CLKB);
       RMEB = 1'b1;
       RMB = 4'd2;
       WA = 2'b10;
WPULSE = 3'b000;

     end
     if (j == 4)
     begin
       assign param_name = "Tccn_rm3";
       assign param_val_tcc = 0.558;
       @(negedge CLKB);
       RMEB = 1'b1;
       RMB = 4'd3;
       WA = 2'b10;
WPULSE = 3'b000;

     end
     if (j == 5)
     begin
       assign param_name = "Tccn_rm4";
       assign param_val_tcc = 0.527;
       @(negedge CLKB);
       RMEB = 1'b1;
       RMB = 4'd4;
       WA = 2'b01;
WPULSE = 3'b000;

     end
     if (j == 6)
     begin
       assign param_name = "Tccn_rm5";
       assign param_val_tcc = 0.502;
       @(negedge CLKB);
       RMEB = 1'b1;
       RMB = 4'd5;
       WA = 2'b01;
WPULSE = 3'b000;

     end
     for (vec= 1; vec <=7; vec= vec+1)
     begin
       $display ("Creating patterns for %s negedge to negedge violations \n %t j is %d vec is %d", param_name, $time, j, vec);
       // Tcc violations
       if ( vec != 5 && vec != 6 )
       begin
         create_patternB(vec,param_name);
         if ( vec == 7 )
           check_outputB(1,1,param_name);
         else
           check_outputB(0,1,param_name);
       end
     end
   end
  @(negedge CLKB);
    assist_initial("");

   for (j= 0; j <=6; j= j+1)
   begin
     if (j == 0)
     begin
       assign param_name = "Tccp_rmezo";
       assign param_val_tcc = 0.558;
       @(negedge CLKB);
       RMEB = 1'b0;
     end
     if (j == 1)
     begin
       assign param_name = "Tccp_rm0";
       assign param_val_tcc = 2.034;
       @(negedge CLKB);
       RMEB = 1'b1;
       RMB = 4'd0;
       WA = 2'b11;
WPULSE = 3'b000;

     end
     if (j == 2)
     begin
       assign param_name = "Tccp_rm1";
       assign param_val_tcc = 0.851;
       @(negedge CLKB);
       RMEB = 1'b1;
       RMB = 4'd1;
       WA = 2'b11;
WPULSE = 3'b000;

     end
     if (j == 3)
     begin
       assign param_name = "Tccp_rm2";
       assign param_val_tcc = 0.807;
       @(negedge CLKB);
       RMEB = 1'b1;
       RMB = 4'd2;
       WA = 2'b10;
WPULSE = 3'b000;

     end
     if (j == 4)
     begin
       assign param_name = "Tccp_rm3";
       assign param_val_tcc = 0.558;
       @(negedge CLKB);
       RMEB = 1'b1;
       RMB = 4'd3;
       WA = 2'b10;
WPULSE = 3'b000;

     end
     if (j == 5)
     begin
       assign param_name = "Tccp_rm4";
       assign param_val_tcc = 0.527;
       @(negedge CLKB);
       RMEB = 1'b1;
       RMB = 4'd4;
       WA = 2'b01;
WPULSE = 3'b000;

     end
     if (j == 6)
     begin
       assign param_name = "Tccp_rm5";
       assign param_val_tcc = 0.502;
       @(negedge CLKB);
       RMEB = 1'b1;
       RMB = 4'd5;
       WA = 2'b01;
WPULSE = 3'b000;

     end

   for (vec= 1; vec <=7; vec= vec+1)
   begin
     $display ("Creating patterns for Tcc posedge to posedge violations \n %t", $time);
     // Tcc violations
     if ( vec != 6 )
     begin
       create_patternB(vec,param_name);
       if (  vec == 7 )
           check_outputB(1,1,param_name);
       else
           check_outputB(0,1,param_name);
     end
   end
 end
  @(negedge CLKB);
    assist_initial("");
  $display ("\n#######################################################################");
  test_num = 311;
  $display( "\n\n@%t TEST: %d --- Going to check Tcl, Tch & Tcc violations --- \n\n", $time, test_num);
  @(negedge CLKB);
  assist_initial("");
  @(negedge CLKB);
  @(negedge CLKB)
  begin
    MEB = 1'b1;
    WEA = 1'b0;
    ADRB = 0;    
    DA = 0; 
  end
  @(negedge CLKB);
  @(posedge CLKB)
  begin
    #0.077;
    CLKB = ~CLKB;
    begin
    #0.346;
    if (QB_BEHAV === 80'bx)
    begin
      $display("\n\n@%t           Clock high pulse width(Tch) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end   
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock high pulse width(Tch) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end  
    end 
  end
  restart_clk = 1'b1;
  @(negedge CLKB);
    MEB = 1'b0;
    MEB = 1'b0;
  #10;
  write_mema(1,"","");
  @(negedge CLKB);
   read_memb("",10'd0,80'b0);
  @(negedge CLKB);
  @(negedge CLKB)
  begin
    #25;
    CLKB = ~CLKB;
    #0.4620000000000001;
    CLKB = ~CLKB;
    #0.096;
    CLKB = ~CLKB;
    begin
    #0.346;
    if (QB_BEHAV === 80'bx)
    begin
      $display("\n\n@%t           Clock low pulse width(Tcl) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock low pulse width(Tcl) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
    end
  end
  restart_clk = 1'b1;
  @(negedge CLKB);
  #10;
  write_mema(1,"","");
  @(negedge CLKB);
    RMEB = 1'b1;
    RMB = 4'd0;
  @(negedge CLKB);
  @(negedge CLKB);
    #0.098;
    CLKB = ~CLKB;
    #1.9369999999999998;
    CLKB = ~CLKB;
    #0.097;
    CLKB = ~CLKB;
    #1.936;
    CLKB = ~CLKB;
    restart_clk = 1'b1;
  @(negedge CLKB);
  @(negedge CLKB);
    read_memb(1,"","");
    if (err_cnt == 0)
    begin    
      $display("\n\n@%t           Clock cycle time(Tccrm0) violation corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm0) violation does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
  @(negedge CLKB);
  write_mema(1,"","");
  @(negedge CLKB);
    RMEB = 1'b1;
    RMB = 4'd1;
  @(negedge CLKB);
  @(negedge CLKB);
    #0.098;
    CLKB = ~CLKB;
    #0.754;
    CLKB = ~CLKB;
    #0.097;
    CLKB = ~CLKB;
    #0.753;
    CLKB = ~CLKB;
    restart_clk = 1'b1;
  @(negedge CLKB);
  @(negedge CLKB);
    read_memb(1,"","");
    if (err_cnt == 0)
    begin    
      $display("\n\n@%t           Clock cycle time(Tccrm1) violation corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm1) violation does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
  @(negedge CLKB);
  write_mema(1,"","");
  @(negedge CLKB);
    RMEB = 1'b1;
    RMB = 4'd2;
  @(negedge CLKB);
  @(negedge CLKB);
    #0.098;
    CLKB = ~CLKB;
    #0.7100000000000001;
    CLKB = ~CLKB;
    #0.097;
    CLKB = ~CLKB;
    #0.7090000000000001;
    CLKB = ~CLKB;
    restart_clk = 1'b1;
  @(negedge CLKB);
  @(negedge CLKB);
    read_memb(1,"","");
    if (err_cnt == 0)
    begin    
      $display("\n\n@%t           Clock cycle time(Tccrm2) violation corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm2) violation does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
  @(negedge CLKB);
  write_mema(1,"","");
  @(negedge CLKB);
    RMEB = 1'b1;
    RMB = 4'd3;
  @(negedge CLKB);
  @(negedge CLKB);
    #0.098;
    CLKB = ~CLKB;
    #0.4610000000000001;
    CLKB = ~CLKB;
    #0.097;
    CLKB = ~CLKB;
    #0.4600000000000001;
    CLKB = ~CLKB;
    restart_clk = 1'b1;
  @(negedge CLKB);
  @(negedge CLKB);
    read_memb(1,"","");
    if (err_cnt == 0)
    begin    
      $display("\n\n@%t           Clock cycle time(Tccrm3) violation corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm3) violation does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
  @(negedge CLKB);
  write_mema(1,"","");
  @(negedge CLKB);
    RMEB = 1'b1;
    RMB = 4'd4;
  @(negedge CLKB);
  @(negedge CLKB);
    #0.098;
    CLKB = ~CLKB;
    #0.43000000000000005;
    CLKB = ~CLKB;
    #0.097;
    CLKB = ~CLKB;
    #0.42900000000000005;
    CLKB = ~CLKB;
    restart_clk = 1'b1;
  @(negedge CLKB);
  @(negedge CLKB);
    read_memb(1,"","");
    if (err_cnt == 0)
    begin    
      $display("\n\n@%t           Clock cycle time(Tccrm4) violation corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm4) violation does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
  @(negedge CLKB);
  write_mema(1,"","");
  @(negedge CLKB);
    RMEB = 1'b1;
    RMB = 4'd5;
  @(negedge CLKB);
  @(negedge CLKB);
    #0.098;
    CLKB = ~CLKB;
    #0.405;
    CLKB = ~CLKB;
    #0.097;
    CLKB = ~CLKB;
    #0.404;
    CLKB = ~CLKB;
    restart_clk = 1'b1;
  @(negedge CLKB);
  @(negedge CLKB);
    read_memb(1,"","");
    if (err_cnt == 0)
    begin    
      $display("\n\n@%t           Clock cycle time(Tccrm5) violation corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm5) violation does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
  @(negedge CLKB);
  write_mema(1,"","");
  @(negedge CLKB);
    RMEB = 1'b1;
    RMB = 4'd6;
  @(negedge CLKB);
  @(negedge CLKB);
    #0.098;
    CLKB = ~CLKB;
    #0.405;
    CLKB = ~CLKB;
    #0.097;
    CLKB = ~CLKB;
    #0.404;
    CLKB = ~CLKB;
    restart_clk = 1'b1;
  @(negedge CLKB);
  @(negedge CLKB);
    read_memb(1,"","");
    if (err_cnt == 0)
    begin    
      $display("\n\n@%t           Clock cycle time(Tccrm5) violation corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm5) violation does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
  @(negedge CLKB);
  write_mema(1,"","");
  @(negedge CLKB);
    RMEB = 1'b1;
    RMB = 4'd7;
  @(negedge CLKB);
  @(negedge CLKB);
    #0.098;
    CLKB = ~CLKB;
    #0.405;
    CLKB = ~CLKB;
    #0.097;
    CLKB = ~CLKB;
    #0.404;
    CLKB = ~CLKB;
    restart_clk = 1'b1;
  @(negedge CLKB);
  @(negedge CLKB);
    read_memb(1,"","");
    if (err_cnt == 0)
    begin    
      $display("\n\n@%t           Clock cycle time(Tccrm5) violation corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tccrm5) violation does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end 
  @(negedge CLKB);
  write_mema(1,"","");
  @(negedge CLKB);
   read_memb("",10'd0,80'b0);
  @(negedge CLKB);
 @(negedge CLKB);
   RMEA = 1'b0;
   RMEB = 1'b0;
  assist_initial("");
  RMA = 4'b0011;
  RMB = 4'b0011;
  @(negedge CLKB);
  @(negedge CLKB)
  begin
    #0.098;
    CLKB = ~CLKB;
    #0.4610000000000001; //tcc 
    CLKB = ~CLKB;
    #0.097;
    CLKB = ~CLKB;
    #0.4600000000000001;
    CLKB = ~CLKB;
   rmdel_tcq;
    if (QB_BEHAV === 80'bx)
    begin
      $display("\n\n@%t           Clock cycle time(Tcc) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end   
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tcc) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end   
  end
    restart_clk = 1'b1;
  #10;
  read_memb(1,"","");
  if ( err_cnt == 0 )
  begin    
    $display("\n\n@%t           Clock cycle time(Tcc) violation corrupts entire memory \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tcc) violation does not corrupt entire memory\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end    
  @(negedge CLKB);
   RMEA = 1'b0;
   RMEB = 1'b0;
  assist_initial("");
  RMA = 4'b0011;
  RMB = 4'b0011;
  #10;
  write_mema(1,"","");
  read_memb("",10'd0,80'b0);
  @(negedge CLKB);
  ADRB = 0;
  $display ("\n#######################################################################");
  test_num = 312;
  $display( "\n\n@%t TEST: %d --- Going to check first valid write after Tcl, Tch & Tcc violations --- \n\n", $time, test_num);
  @(negedge CLKB);
  @(negedge CLKB)
  begin
    MEB = 1'b1;
    WEA = 1'b0;
    ADRA = 0;    
    ADRB = 0;    
    DA = 0; 
  end
  @(negedge CLKB);
  @(posedge CLKB)
  begin
    #0.077;
    CLKB = ~CLKB;
    WEA = 1'b1;
    ADRA = 0;    
    ADRB = 0;    
    DA = 0; 
    rmdel_tcq;
    if (QB_BEHAV === 80'bx)
    begin
      $display("\n\n@%t           Clock high pulse width(Tch) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end   
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock high pulse width(Tch) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end   
  end
    restart_clk = 1'b1;
  @(negedge CLKB);
  @(negedge CLKB);
    WEA = 1'b0;
    ADRB = 0;
  @(posedge CLKB);
  @(posedge CLKB);
   rmdel_tcq;
  if (QB_BEHAV === 80'b0)
  begin
    $display("\n\n@%t           first valid write after Clock high pulse width(Tch) violation successfull \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: first valid write after Clock high pulse width(Tch) violation unsuccessfull\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  write_mema(1,"","");
  read_memb("",10'd0,80'b0);
 
    WEA = 1'b0;
    ADRA = 0;    
    ADRB = 0;    
    DA = 0; 
  @(negedge CLKB);
  @(negedge CLKB)
  @(negedge CLKA);
    WEA = 1'b1;
    ADRA = 0;
    ADRB = 0;
    DA = 0;
  @(negedge CLKB)
  begin
    #25;
    CLKB = ~CLKB;
    #0.4620000000000001;
    CLKB = ~CLKB;
    #0.096;
    CLKB = ~CLKB;
  rmdel_tcq;
    if (QB_BEHAV === 80'bx)
    begin
      $display("\n\n@%t           Clock low pulse width(Tcl) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock low pulse width(Tcl) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
  end
  @(negedge CLKA);
    WEA = 1'b0;
  restart_clk = 1'b1;
  @(negedge CLKB);
  @(negedge CLKB);
    WEA = 1'b0;
    ADRA = 0;
    ADRB = 0;
  @(posedge CLKB);
  @(posedge CLKB);
   rmdel_tcq;
  if (QB_BEHAV === 80'b0)
  begin 
    $display("\n\n@%t           first valid write after Clock low pulse width(Tcl) violation successfull \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: first valid write after Clock low pulse width(Tcl) violation unsuccessfull\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  #10;
  write_mema(1,"","");
  read_memb("",10'd0,80'b0);
  assist_initial("");
  @(negedge CLKB);
  @(negedge CLKB)
  begin
    #25;
    CLKB = ~CLKB;
    #0.4610000000000001;
    CLKB = ~CLKB;
    #0.097;
    CLKB = ~CLKB;
    #0.4600000000000001;
    CLKB = ~CLKB;
   rmdel_tcq;
    if (QB_BEHAV === 80'bx)
    begin
      $display("\n\n@%t           Clock cycle time(Tcc) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end   
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock cycle time(Tcc) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end   
  end
  restart_clk = 1'b1;
  @(negedge CLKB);
    WEA = 1'b0;
    ADRB = 0;
  @(negedge CLKA);
    WEA = 1'b1;
    ADRA = 0;
    ADRB = 0;
    DA = 0;
  @(posedge CLKB);
  @(posedge CLKB);
    rmdel_tcq;
  if (QB_BEHAV === 80'b0)
  begin
    $display("\n\n@%t           first valid write after Clock cycle time(Tcc) violation successfull \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
  end
  else
  begin
    test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: first valid write after Clock cycle time(Tcc) violation unsuccessfull\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
  end    
  #10;
  write_mema(1,"","");
  read_memb("",10'd0,80'b0);
  @(negedge CLKB);
  ADRB = 0;
      assist_initial("");

  $display ("\n#######################################################################");
  test_num = 313;
  $display( "\n\n@%t TEST: %d --- Going to check Tchtest1 && Tcltest1 violations --- \n\n", $time, test_num);
  @(negedge CLKB);
  write_mema("",10'd0, 80'd0);
  @(negedge CLKB);
  read_memb("",10'd0, 80'd0);
  restart_clk = 1'b1;
  @(negedge CLKB);
  @(negedge CLKB)
  begin
    MEB = 1'b1;
      #2.0349999999999997;
    
    TEST1B = 1'b1;
    MEA = 0; 
    ADRB = 0;    
  end
  @(negedge CLKB);
  no_clk = 1;
  #72.035;
  CLKB = 1'b1;
      #0.383;
  
  CLKB = 1'b0;
    #0.35;
    if (QB_BEHAV === 80'bx)
    begin
      $display("\n\n@%t           Clock high pulse width(Tchtest1) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end   
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock high pulse width(Tchtest1) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end   
  restart_clk = 1'b1;
  #10;
  @(negedge CLKB);
      #2.0349999999999997;
  
  TEST1B = 1'b0;
  write_mema(1,"","");
  @(negedge CLKB);
  read_memb("",10'd0, 80'd0);
  @(negedge CLKB);
  @(negedge CLKB);
      #2.0349999999999997;
  
  TEST1B = 1'b1;
  @(negedge CLKB);
  no_clk = 1;
  #72.035;
  CLKB = 1'b1;
      #0.21000000000000008;
  
  CLKB = 1'b0;
      #0.348;
  
  CLKB = 1'b1;
  restart_clk = 1'b1;
  @(negedge CLKB);
    #0.35;
    if (QB_BEHAV === 80'bx)
    begin
      $display("\n\n@%t           Clock low pulse width(Tcltest1) is modelled correctly \n\n", $time);
    $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
    $display("\n\n@%t  ERROR_MODEL: Clock low pulse width(Tcltest1) is not modelled correctly\n\n", $time);
    $display ("\n@%t            FAIL\n", $time);
    end
  #10;
  @(negedge CLKB);
      #2.0349999999999997;
  
  TEST1B = 1'b0;
  write_mema(1,"","");
  @(negedge CLKB);
  read_memb("",10'd0, 80'd0);
  @(negedge CLKA);
  @(negedge CLKB);
  $display ("\n#######################################################################");
  test_num = 314;
  $display( "\n\n@%t TEST: %d --- Going to check Setup fall constraint on LS in Read mode  --- \n\n", $time, test_num);
  setupholdb("LS","Tflsc",$realtobits(0.516),0,0,0,2'b01,2'b00,2'b01);
  @(negedge CLKB);
  $display ("\n#######################################################################");
  test_num = 315;
  $display( "\n\n@%t TEST: %d --- Going to check Setup fall Violation on LS in Read mode  --- \n\n", $time, test_num);
  setupholdb("LS","Tflsc",$realtobits(0.516),0,1,0,2'b00,2'b01,2'b11);
  $display ("\n#######################################################################");
  test_num = 316;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on LS in Read mode  --- \n\n", $time, test_num);
  setupholdb("LS","Tlsx",$realtobits(0.093),1,0,0,2'b01,2'b00,2'b01);
  @(negedge CLKB);
  $display ("\n#######################################################################");
  test_num = 317;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on LS in Read mode  --- \n\n", $time, test_num);
  setupholdb("LS","Tlsx",$realtobits(0.093),1,1,0,2'b00,2'b01,2'b11);
  @(negedge CLKB);



  @(negedge CLKB);
  $display ("\n#######################################################################");
  test_num = 318;
  $display( "\n\n@%t TEST: %d --- Synchronous CLKB & ADRB events in Read mode  --- \n\n", $time, test_num);
  synceventb("ADRB",0,2'b10,2'b01,2'b01);


   




  @(negedge CLKB);
  ADRB = 0;
    



  @(negedge CLKB);
  RMB = 4'b0011;
  RMB = 4'b0011;
  RMEA = 0;
  RMEB = 0;
  RMB = 4'b0011;

  @(negedge CLKA);  
  write_mema(1,"","");
  @(negedge CLKA);  
  read_memb("",10'd0,80'b0);

  @(negedge CLKA);
   write_mema(1,"","");
  @(negedge CLKA);
   read_memb("",10'd0,80'b0);

  @(negedge CLKA);
   read_memb("",10'd0,80'b0);

  $display ("\n#######################################################################");
  test_num = 319;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on WA in Write mode  --- \n\n", $time, test_num);
  setupholda("WA","Tcwax",$realtobits(2.034),1,0,1,2'b10,2'b00,2'b01);
  @(negedge CLKA);
   $display ("\n#######################################################################");
  test_num = 320;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on WA in Write Mode  --- \n\n", $time, test_num);
  setupholda("WA","Tcwax",$realtobits(2.034),1,1,1,2'b10,2'b00,2'b11);
  @(negedge CLKA);
   read_memb("",10'd0,80'b0);

  @(negedge CLKA);
    assist_initial("WA");

  @(negedge CLKA);
   write_mema(1,"","");
  @(negedge CLKA);
   read_memb("",10'd0,80'b0);

  @(negedge CLKA);
   read_memb("",10'd0,80'b0);

  $display ("\n#######################################################################");
  test_num = 321;
  $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on WPULSE in Write mode  --- \n\n", $time, test_num);
  setupholda("WPULSE","Tcwpx",$realtobits(2.034),1,0,1,2'b10,2'b00,2'b01);
  @(negedge CLKA);
   $display ("\n#######################################################################");
  test_num = 322;
  $display( "\n\n@%t TEST: %d --- Going to check Hold Violation on WPULSE in Write Mode  --- \n\n", $time, test_num);
  setupholda("WPULSE","Tcwpx",$realtobits(2.034),1,1,1,2'b10,2'b00,2'b11);
  @(negedge CLKA);
   read_memb("",10'd0,80'b0);

  @(negedge CLKA);
    assist_initial("WA");

  
  
 $display( "\n\n@%t TEST:  --------- All Memory test over ---------- \n\n", $time);


 $display("\n####################################################################################");
 $display("\n                    ********** TEST SUMMARY **********\n");
 $display("\n1.  No. of test_status Errors is  %d", test_status);
 $display("\n2.  Please check ERROR_MODEL messages in the verilog.log file");
 $display("    for the cause of test_status Errors");
 $display("\n3.  Please check OP in the verilog.log file for any mismatch");
 $display("    between  verilog and vhdl memory model!\n");
 $display("\n####################################################################################");


#1000 $finish;
end //initial

endmodule
