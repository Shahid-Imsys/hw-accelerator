Imsys Tools 0.23.2 -- MASM
Microprogram version: 1.1.0.3

FILE: ..\mpgm\Tmpgm\Sequence_Test.mas
                                               (00001) 
                                               (00002) ( Pointwise generic bypass v20.
                                               (00003) ( The purpose of this is to have a generic fallback pointwise.
                                               (00004) 
FILE: ..\mpgm\Definitions/Definitions_wide_20.mas
                                               (00001) *INIT*
                                               (00002) 
                                               (00003) MICROINSTRUCTION SIZE IS 10;
                                               (00004) MICROPROGRAM LENGTH IS 100;
                                               (00005) 
                                               (00006) 
                                               (00007) *FIELDS*
                                               (00008) (
                                               (00009) (
                                               (00010) (
                                               (00011) (
                                               (00012) (
                                               (00013) (
                                               (00014) (
                                               (00015) (		  **********************************
                                               (00016) (		  *				   *
                                               (00017) (		  *	      I M S Y S		   *
                                               (00018) (		  *				   *
                                               (00019) (		  *   CPU MICROPROGRAM ASSEMBLER   *
                                               (00020) (		  *				   *
                                               (00021) (		  *        DEFINITION PART         *
                                               (00022) (		  *				   *
                                               (00023) (		  *	       For the		   *
                                               (00024) (		  *        GP2000 processor        *
                                               (00025) (		  *				   *
                                               (00026) (		  **********************************
                                               (00027) (
                                               (00028) (
                                               (00029) (		      Copyright Imsys AB (2001)
                                               (00030) (
                                               (00031) (
                                               (00032) (
                                               (00033) (
                                               (00034) 'CPU. STRING/REG. MEM, LATCH AND D-BUS SELECTOR.
                                               (00035) (		 +======+=====+=====+	 +===+======================+
                                               (00036) (		 !	V     V     V	 V   V			    !
                                               (00037) (		 !   +-----+-----+-----+---+----+		    !
                                               (00038) (		 !   ! PS  ! MS  ! SB  ! B ! R	!		    !
                                               (00039) (		 ! +>! CTR ! CTR ! CTR !REG!CTR !		    !
                                               (00040) (		 ! ! +-----+-----+-----+---+----+		    !
                                               (00041) ( PE-field  -----!-+    !     !     !    !---'                      !
                                               (00042) (		 !	V     V     V	 V	 +=======+	+===+
                                               (00043) (		 !    +-----------------------+  !	 V	V   !
                                               (00044) ( GAS-field -----!-+->!    GMEM ADDRESS       !  !     +-----------+!
                                               (00045) (		 ! !  !      Selector	      !  !     !Latch Sel. !!
                                               (00046) (		 ! !  +-----------------------+  !     +-----------+!
                                               (00047) (		 ! !		!		 !	     !	    !
                                               (00048) (		 ! !		+==========+	 !  M	     V	    !
                                               (00049) (		 ! !		V	   !	 !  A  +-----------+!
                                               (00050) (		 ! !	+---------------+  !	 !  P  !   LATCH   !!
                                               (00051) (		 ! +--->!Register/String!  !	 !  R  +-----------+!
                                               (00052) (		 !	!    Memory.	!  !	 !  !	     V	    !
                                               (00053) (		 !	!  1024x8 bits	!  !	 ! +-------+ !	    !
                                               (00054) (		 !	+---------------+  !	 +-!  MBM  !-+	    !
                                               (00055) (		 !   +--+	V	   !	 ! +---+---+ !	    !
                                               (00056) (Y-bus f ALU>====+==>!YE!>======+================+     V     !	    !
                                               (00057) (		     +--+		   !	 !	     !	    !
                                               (00058) (		D  F  Y  Y  P  E  D  D	D  !  Y  !  D  M  Y  !	    !
                                               (00059) (		A  L  S  B  O  X  F  F	F  !  F  !  F  B  P  !	    !
                                               (00060) (MAPR-field==>	T  G  W  U  R  C  M  I	C  !  L  !  S  M  R  !	    !
                                               (00061) (	   +=>	A  S  P  S  T  E     O	L  !  I  !  P	  I  !	    !
                                               (00062) (	   !	1     P     S  P	C  V  P	 V	  O  V	    !
                                               (00063) (	   !  +------------------------------------------------+    !
                                               (00064) (	   !  ! 0  1  3  4  E  7  8  9	A  6  B  C  D  5  F  2 !    !
                                               (00065) (DS-field =+=>! 	       Data source selector	       !    !
                                               (00066) (	      +------------------------------------------------+    !
                                               (00067) (					!			    !
                                               (00068) (					!			    !	D-bus to
                                               (00069) (					+===========================+=> ALU,CLC
                                               (00070) (					!				CLC
                                               (00071) (					!
                                               (00072) (					!
                                               (00073) (					+==============!>!==> Data TO PAD
                                               (00074) '2901 ALU DESIGN
                                               (00075) (	       . . . . . . . .2 x 2901 . . . . . . . . . . . .
                                               (00076) (	       .	  +===========+================+     .
                                               (00077) (	       .	  V	      ! 	       !     .
                                               (00078) (	       .     +---------+      !       +=======+!     .
                                               (00079) (	R7    ------>! R shift !<-----!-------!-------!!------- R0
                                               (00080) (	       .     +---------+      !       V       !!     .
                                               (00081) (	       .	  !	      !  +---------+  !!     .
                                               (00082) (	Q7    ------------V-----------!->! Q shift !<-!!------- Q0
                                               (00083) (	       .     +---------+      !  +---------+  !!     .
                                               (00084) (	       .     !	  B    !      !       !       !!     .
                                               (00085) (  A-field    ======>!A-adr    !      V       V       !!     .
                                               (00086) (  B-field    ======>!B-adr    !    +-----------+     !!     .
                                               (00087) (              .     !    A  B !    ! F       Q'!     !!     .
                                               (00088) (	       .     +---------+    !Q Register !     !!     .
                                               (00089) (	       .	  !  !	    +-----------+     !!     .
                                               (00090) (	       .  +=======+  !		  !Q	      !!     .
                                               (00091) (	       .  !	  !  !	    ZERO  +===========+!     .
                                               (00092) (  D-bus      ==========+ !  !	     !	  !	       !     .
                                               (00093) (	       .  !	V V  V	     V	  V	       !     .
                                               (00094) (	       .  !   +--------------------------+     !     .
                                               (00095) (  ALUS-field =======>! ALU data source selector !     !     .
                                               (00096) (	       .  !   +--------------------------+     !     .
                                               (00097) (	       .  !	      !        !	       !     .
                                               (00098) (	       .  !	      V        V	       !     .
                                               (00099) (	       .  !   +--------------------------+------------> F7 (Sign)
                                               (00100) (	       .  !   !       R        S	 !<------------ Carry In
                                               (00101) (  ALUF-field =======>! 	 ALU   F	 !------------> Carry Out
                                               (00102) (	       .  !   +--------------------------+------------> Zero
                                               (00103) (	       .  !		       !	       !     .
                                               (00104) (	       .  +===========+        +===============+     .
                                               (00105) (	       .	      V        V		     .
                                               (00106) (	       .      +--------------------------+	     .
                                               (00107) (  ALUD-field =======>!   Output data selector	 !	     .
                                               (00108) (	       .      +--------------------------+	     .
                                               (00109) (	       .		   !			     .
                                               (00110) (	       . . . . . . . . . . !. . . . . . . . . . . . ..
                                               (00111) (				   V --------------------------> Y-MSB
                                               (00112) (				 Y-BUS
                                               (00113) 'DEFINITION REVISION
                                               (00114) (
                                               (00115) (==========================================================================
                                               (00116) (		   R E V I S I O N   H I S T O R Y:
                                               (00117) (		   ================================
                                               (00118) (
                                               (00119) (..DATE.. SIGN. VERS  .......SHORT DESCRIPTION............  ..SOLVE PROBL..
                                               (00120) (
                                               (00121) (87-11-12  jo	12    Started to uppdate for the VLSI design. changes marked (V)
                                               (00122) (88-02-22  JO	22    ENTERED CHANGES DEFINED IN MEETING SB.BS,JO 88-02-18
                                               (00123) (88-03-02  jo	27    Entered new DSOURCES, LATCH is loaded as in old days.
                                               (00124) (88-05-04  jo	55    exchanged reg names to W6....WF from TBFLGS...PCL
                                               (00125) (88-05-05  jo	62    Shanges in field definition (AUX1 covers COND)
                                               (00126) (88-05-24  jo	74    Defined SEQC=1F ( IF CTR=0 CONTINUE, ... )
                                               (00127) (88-05-25  jo	77    New definitions for COUNTER load. (short and long)
                                               (00128) (88-05-27  bs	83    1. Set/Reset ALLRAS moved from CUIRQ to PC-field
                                               (00129) (		      2. Added and corrected definitions for LOADADP and LOADADH
                                               (00130) (			 Affects PC-field, which now has no spare.
                                               (00131) (		      3. Corrected PD-field (LOADDTM)
                                               (00132) (88-05-30  jo	91    Defined INVPMSB
                                               (00133) (88-05-31  jo	93    Defined SKIP
                                               (00134) (88-05-31  jo   94    COMMENTED AWAY SOME DEFINITIONS search for  "(Z"
                                               (00135) (88-06-01  jo   96    Corrected "DOPLUS1" statement.
                                               (00136) (88-06-16  bs	99    Changed ALLRAS and MMU-strap definitions.
                                               (00137) (88-06-26  jo	06    Defined GNU/Psys load puls
                                               (00138) (88-06-26  jo	06    Defined TRACE FF.
                                               (00139) (88-06-27  jo	08    Defined Ybus priority to Dsource Selector
                                               (00140) (88-06-27  jo	12    Defined YEQNEG Condition.
                                               (00141) (88-06-28  bs	13    Changed ALLRAS and MMU-strap definitions
                                               (00142) (88-08-11  jo	22    Implemented MBM and MUL definitions.  Removed constant 07
                                               (00143) (88-08-12  jo	23     Additional definitions for barrelshift and mask.
                                               (00144) (88-08-26  jo   28    Additional def's for GNU-ctr, and changes in COND sel.
                                               (00145) (88-08-29  jo	30    Impl. definition for NREG used by Barrelshifter.
                                               (00146) (88-08-30  jo	34    Tried to put in some more DBLASS, to improve varnings.
                                               (00147) (88-09-07  jo	36    Added CTREQ0 to conditions, T12 and T19 to Dsel.
                                               (00148) (88-09-08  jo	37    Removed DATA0:=0 in DSIRQ.  TEST ONLY
                                               (00149) (88-09-09  jo	38    Added DATA0 AGAIN
                                               (00150) (88-09-26  jo	LSI   Changes in definition for INVPSMSB and LOAD NREG
                                               (00151) (88-10-05  jo	LSI   Added def for SEQC:=1A, it shuld be SKIP NEXT.
                                               (00152) (88-10-05  jo   LSI   Added def for SEQC:=1d,   "   "    REPPLUS1
                                               (00153) (88-10-19  jo	GPR   Renamed Wxx back to original names.
                                               (00154) (88-10-21  jo   GPR   Change def. for CONSTANT = " old DATA1 ".
                                               (00155) (88-10-21  jo	GPR   Change def. for ADPA to ADP, no changes has to be i TXT.
                                               (00156) (88-10-27  jo   GPR   Removed CPOL def in Auxiliary func's, and DBLASS
                                               (00157) (88-10-27  jo	GPR   Added a new FIELD called NOMASK, it is the same as BITMSK
                                               (00158) (88-10-27  jo	GPR   Added a new FIELD called DT0H, equal to DATA0 7..4
                                               (00159) (88-10-28  jo	GPR   Added a new FIELD called MSEL, equal to MAP.
                                               (00160) (88-10-28  jo	GPR   Removed MAPR:=0 for & PUSH CSTACK
                                               (00161) (88-11-09  jo	GPR   Added CPTR, DSOURCE CREG
                                               (00162) ( Now Definition part is called  GDEF_[Version].TXT
                                               (00163) (	   GDEF_[Version].TXT
                                               (00164) (88-12-08  jo	01    Added C-code registers definitions. ( GDEF_01.TXT)
                                               (00165) (88-12-14  jo   02    Added names for "wait for spreq", 'WAIT FOR SPREQ'
                                               (00166) (88-12-19  jo	03    Improved definitions of TESTBIT to allow space before nbr
                                               (00167) (88-12-28  jo	04    Added some comments for MBM block functions.
                                               (00168) (89-02-20  jo   04    Added comments for BUG's in GPU72008A, and MMU 72101A.
                                               (00169) (89-03-29  jo	05    Change polarity on GRAREADY condition.
                                               (00170) (89-04-17  jo	06    Added XOR8 function for CREG.
                                               (00171) (90-04-10  jo	--    More comment for GRAREADY condition ( to clearify)
                                               (00172) (90-07-18  cb	--    Changed definition for LDIO and included NEXT
                                               (00173) (90-11-01  jo	--    changed definition of NEXT, now NEXT active = 0 (low)
                                               (00174) (                       And removed mnemonic "LOAD DTIO".
                                               (00175) (91-03-15  jo	--    Added som comments regarding LOAD LATCH FROM Y
                                               (00176) (		      RENAMED multibyte shift MNEMONICS form MSKANDTOTL .. to
                                               (00177) (		      FIRSTSHIFT and NEXTSHIFT.
                                               (00178) (91-04-23  jo	      Changed name of this file to LDEF_01.TXT.
                                               (00179) (		      Changed definition for NEXT INPUT so it match to LPB.
                                               (00180) (			       (changed the active level from low to high)
                                               (00181) (91-05-17  jo	      Added more mnemonics to PLA condition (like FF_EMPTY..)
                                               (00182) (91-08-28  jo	      Comments regarding REPPLUS1 statement.
                                               (00183) (		      Change order in FLAGS table.
                                               (00184) (		      Set Default in MAPR field to F in stead of 0. to prevent
                                               (00185) (		      load of ACCUMULATOR in MBM logic.
                                               (00186) (91-09-12  jo	      New Comments regarding LATCH.
                                               (00187) (91-11-05  jo	      Set DEFAULT to 0 in stead of F for MAPRANGE field
                                               (00188) (91-11-06  jo	      More comments regarding YBUSPRIORITY encoding DSYPRIO
                                               (00189) (92-01-27  jo	      Change definition for YDECODE and UNC YDECODE
                                               (00190) (92-03-31  jo	      Added definitions for CREG1, CREG2, CREG3
                                               (00191) (		      because of the feature of using multiple CREG pointers
                                               (00192) (		      within the selected CREG-block.
                                               (00193) (92-11-16  cb	      Removed MAPRANGE:=0 from LLOAD CTR FROM Y,MEM,SP,IR
                                               (00194) (		      to enable loading of a value greater than 255. CTR bits
                                               (00195) (		      8-11 are loaded from MAPRANGE, which now must be
                                               (00196) (		      specified.
                                               (00197) (93-02-11  cb         Added 'TESTBIT LABEL'.
                                               (00198) (94-03-04  cb	      Added more comments about the multiplier functions
                                               (00199) (95-01-20  cb         Added 'STEP ADL' for the ADL stepping function in
                                               (00200) (		      the new MMR on the IME2.
                                               (00201) (95-07-03  cb         Added 'SET STEP' for the ADL stepping function in
                                               (00202) (		      the new MMR on the IME2.
                                               (00203) (97-08-17  cb	      Added more comments.
                                               (00204) (==========================================================================
                                               (00205) (CHANGES FOR THE NGPU START HERE
                                               (00206) (97-08-25  cb         Removed LONGRAS, makes condition 1A spare.
                                               (00207) (97-08-25  cb         Removed "DS MAPMEM" and "LOAD MAPMEM". Makes DS E spare.
                                               (00208) (97-08-25  cb         Removed all CREG,CPTR,CCTR and CTRSEL definitions.
                                               (00209) (                     Makes pulse CUIRQ(5) spare.
                                               (00210) (97-08-25  cb         Changed ALU function 5 from 1ANDNOT2 to MIN/MAX.
                                               (00211) (97-08-26  cb         Removed GRAREADY, PF, PM, WRITEERR and PC_ACCESS, making
                                               (00212) (                     conditions 1B,1E,1F spare. Also makes bits 7,2,1,0 in
                                               (00213) (                     "DS EXEPT" (7) spare.
                                               (00214) (97-08-30  cb         Reduced time field to 1 bit, making bit 60 a spare. Edited
                                               (00215) (                     the associated definitions and comments.
                                               (00216) (97-09-11  cb         Merged fields PD and PI. This created three new pulses
                                               (00217) (                     (PD=1,6,7).
                                               (00218) (97-09-11  cb         Added definitions for general port control. Used pulse
                                               (00219) (                     PD=1 and dsource DS=E.
                                               (00220) (97-09-11  cb         Added 'DSOURCE G' to be able to use the new, latch-free,
                                               (00221) (                     gmem read-modify-write.
                                               (00222) (97-09-17  cb         Completed changes to the microinstruction format: TIME
                                               (00223) (                     decreased to 1 bit, MEMCP decreased to 2 bits, AADDR and
                                               (00224) (                     BADDR increased to 5 bits each, PD and PI merged to new,
                                               (00225) (                     3-bit PD.
                                               (00226) (97-09-25  cb         Added definitions for double ADL stepping.
                                               (00227) (97-10-09  cb         Added 'LOAD DTM FROM BUS'.
                                               (00228) (97-10-10  cb         Added definitions for the 16-bit fast transfers.
                                               (00229) (97-10-22  cb         Added definitions for micro program loading.
                                               (00230) (97-10-22  cb         Switched places for AUX functions "PUSH CSTACK" and
                                               (00231) (                     "INCREMENT STCTR" and changed "INCREMENT STCTR & DECREMENT
                                               (00232) (                     CTR" to "PUSH CSTACK & DECREMENT CTR".
                                               (00233) (97-10-23  cb         Added DBLAUX, analogous to DBLASS, but for the AUX1 field,
                                               (00234) (		      causing a 3 in the NOTE field.
                                               (00235) (97-09-11  cb         Removed definitions fo general I/O port D and added defs
                                               (00236) (                     for general output ports D and E.
                                               (00237) (97-11-26  cb	      Added definitions for the 'BLOCK' auxillary functions
                                               (00238) (                     now available together with 'UNC DO' and 'UNC LDO'.
                                               (00239) (97-11-27  cb	      Changed 'DS Y/16' to 'DS YFLIPPED'.
                                               (00240) (97-11-28  cb	      Defined bit block rotation.
                                               (00241) (98-01-17  cb	      Added defs and comments for LOAD CCFF and SLEEP.
                                               (00242) (98-12-22  cb	      Moved out definitions for named registers (like
                                               (00243) (		      NEG W1) to AsmDefs and AddDefs. Completely removed
                                               (00244) (		      such defs for the C machine.
                                               (00245) (98-12-22  cb	      Moved in definitions for preselecting GAS from JDEF,
                                               (00246) (		      added some more defs for the same purpose.
                                               (00247) (98-12-29  cb	      Added SIMZERO definition.
                                               (00248) (
                                               (00249) (==========================================================================
                                               (00250) (CHANGES FOR GP2000 START HERE
                                               (00251) (01-08-08  sb         Removed SELST and PE fields (four bits), added GACS
                                               (00252) (		      and GACD fields (four bits). Removed GAS field (two
                                               (00253) (		      bits), added GASS and GASD fields (four bits).
                                               (00254) (01-09-15  cb         Moved MIFORM field next to DS field.
                                               (00255) (01-09-15  cb         MEMCP field expanded from two to three bits.
                                               (00256) (01-09-15  cb         Moved apart DATA1 and AD fields so that they don't
                                               (00257) (		      overlap. Added four bits.
                                               (00258) (01-09-15  cb         SHIN/PA field expanded from three to four bits.
                                               (00259) (01-09-15  cb         Microinstruction is now 80 bits wide.
                                               (00260) (01-09-15  cb         INVRMSB, DSOURCE GRX8, WRITE GRX8, LOAD LATCH FROM
                                               (00261) (		      GRX8 removed.
                                               (00262) (01-09-15  cb         Changes to SHIN/PA definitions: Removed LOAD CCFF,
                                               (00263) (		      added LOAD CRB. Made use of new bit (see above) to
                                               (00264) (		      move SELECT BLK, SET/RESET SPECIAL, LOAD NREG from
                                               (00265) (		      CUIRQ to regular PA pulses. Also gave LOAD LATCH
                                               (00266) (		      FROM Y its own PA pulse, freeing PC=F. Changed the
                                               (00267) (		      code assignments, moved default (no pulse) to code 0.
                                               (00268) (01-09-16  cb         Added new field MBMOP, overlapping low part of DATA1.
                                               (00269) (		      Used MBMOP to control the MBM instead of MAPRANGE,
                                               (00270) (		      which still overlaps high part of AD, but not low
                                               (00271) (		      part of DATA1. Renamed MAPRANGE to MAPR.
                                               (00272) (01-09-28  cb         Removed TIME definitions, removed old comments
                                               (00273) (		      regarding memory and timing.
                                               (00274) (01-09-28  cb         Removed AC and AZ conditions, added comments on YMSB
                                               (00275) (		      ODD/EVEN, YBITSET, YEQNEG, YDECODE and VECTOR jump
                                               (00276) (		      that they refer to the previous Y bus value.
                                               (00277) (01-09-28  cb         Added comments on DSOURCE Y, YSWAPPED, YFLIPPED,
                                               (00278) (		      YPRIO and CU that they refer to the previous Y bus
                                               (00279) (		      value.
                                               (00280) (01-09-28  cb         Added comments LATCH to indicate that it now works
                                               (00281) (		      as a register rather that as a latch.
                                               (00282) (01-10-04  cb	      Changed loadning of ADP/SADP from D to Y (comments
                                               (00283) (		      only).
                                               (00284) (01-10-04  cb	      Added definitions for GSOURCE and GDEST to assign
                                               (00285) (		      to the GAS fields separately.
                                               (00286) (01-10-04  cb	      Changed definitions of all Y bus functions that
                                               (00287) (		      now uses the previous value of the Y bus instead
                                               (00288) (		      of the current, changed Y to YREG in these
                                               (00289) (		      definitions.
                                               (00290) (01-10-08  cb	      Removed TIME field, narrowed MEMCP from three to two
                                               (00291) (		      bits, expanded ALUS from three to four bits, added
                                               (00292) (		      the GAPP field.
                                               (00293) (01-10-08  cb	      Added definitions for GMEM counter push/pop.
                                               (00294) (01-11-05  cb	      Added definitions for new general ports D-J.
                                               (00295) (02-11-13  cb	      Changed encoding of SEQC field. Changed DOPLUS1 to
                                               (00296) (		      LDOPLUS1. Added DSOURCE RTC and LOAD RTC.
                                               (00297) (06-05-08  cb	      Added DSOURCE DSIGN and condition DSXFC. Removed
                                               (00298) (                     condition DBITSET.
                                               (00299) (06-05-22  pa         Added DSOURCE CRBA-CRBF and LOAD CRBA-CRBF.
                                               (00300) (06-09-13  pa         Added '& POP SRCCTR' and '& POP DSTCTR'.
                                               (00301) (15-04-22  mn         Added PUSH SBCTR and POP SBCTR.
                                               (00302) (
                                               (00303) (==========================================================================
                                               (00304) (CHANGES FOR LLVM START HERE
                                               (00305) (17-06-27  pa         Added RSTACK and RSCTR.
                                               (00306) (17-07-15  pa         Added LSTACK and LSCTR.
                                               (00307) (17-09-18  pa         Assign RSTACK to MSTACK and LSTACK to SB
                                               (00308) (18-07-20  pa         Assign LSTACK and RSTACK as GMEM source & destination
                                               (00309) (18-10-24  pa         Assign LSTACK to PSTACK
                                               (00310) (
                                               (00311) (==========================================================================
                                               (00312) 'Hardware BUG description for GP1000
                                               (00313) (
                                               (00314) (
                                               (00315) (1. This is not really a bug, it's intentional, but hazardous:
                                               (00316) (   If an addition is made to ALU register 0E (PCH), the flag PCCY will always
                                               (00317) (   be added to the result. So if for exampel a constant is going to be added
                                               (00318) (   to PCH, make sure that PCCY is cleared prior to the addition.
                                               (00319) (
                                               (00320) (
                                               (00321) (
                                               (00322) (
                                               (00323) 'FIELDS SECTION
                                               (00324) (
                                               (00325) (	  FORMAT FOR LISTS (SP ORDERS+MESSAGES AND EXTERNAL LINKAGE)
                                               (00326) (	  ==========================================================
                                               (00327) (
                                               (00328) (-------(------(----------(----------------------------(----------------
                                               (00329) (LENGTH ( NAME ( DEFAULT  ( DESCRIPTION 	       (DEFAULT FUNCTION
                                               (00330) (-------(------(----------(----------------------------(----------------
                                               (00331) (
                                               (00332) +8; +8; +8; +8; +8; +8; +8; +8; +8;
                                               (00333) (
                                               (00334)     8	 CODE		  ;(CODE FOR SP REQUEST OR CU CALL
                                               (00335)    -C;
                                               (00336)     C	 XADR		  ;(ADDRESS VALUE IN EXTERNAL REFERENCE LIST
                                               (00337) (
                                               (00338) -8; -8; -8; -8; -8; -8; -8; -8; -8; -8;
                                               (00339) 'FIELDS SECTION
                                               (00340) (
                                               (00341) (	  MICROINSTRUCTION FORMAT
                                               (00342) (	  =======================
                                               (00343) (
                                               (00344) (-------(------(----------(----------------------------(----------------
                                               (00345) (LENGTH ( NAME ( DEFAULT  ( DESCRIPTION 	       (DEFAULT FUNCTION
                                               (00346) (-------(------(----------(----------------------------(----------------
                                               (00347) 
                                               (00348) ( Vector engine fields starts here and goes from bit 127 to bit 80
                                               (00349) (    8   MCLM        0;      ( Bits 127-120: Holds the microcode loading mechanism.
                                               (00350)     1   PE_READY    0;      ( 127 This signals the top level that this PE have finished it´s assigned work.
                                               (00351)     5   AVAIL_0     0;      ( 126-122 Bits that are available for future expansion.
                                               (00352)     1   BYPASS      0;      ( 121 This selects the bypass mode. i.e. SRAM loading is skipped.
                                               (00353)     1   AVAIL_1     0;      ( 120 Bit that are available for future expansion.
                                               (00354) 
                                               (00355)     4   DEST_BYTE   0;      ( Bits 119-116: This bits expands the Data To Memory
                                               (00356)     1   C5          0;      ( Bit 115: Expansion of the condition codes. We add conditions to know when certain engines are done or in progress.
                                               (00357)     1   FIFO_PUSH   0;      ( Bit 114
                                               (00358)     1   SEND_REQ    0;      ( Bit 113
                                               (00359)     4   SRC_BYTE    0;      ( Bits 112-109 When reading the DFM register onto the D-bus this selects the byte choosen.
                                               (00360)     1   DS4         0;      ( Bit 108:  This bit is for expanding Dbus source so we can source the D-Bus output.
                                               (00361)     1   CONV_COMP   0;      ( 107:   This select the convolution mode of operation.
                                               (00362)     1   FFT_COMP    0;      ( 106:   This select the FFT mode of operation.
                                               (00363)     6   REG_WRITE   0;      ( Bits 105-100: This 6 bits is used to write the selected register from Y_bus.
                                               (00364)     
                                               (00365)     1   COUNTER_RESET    0;      ( Bit 99: This resets the addressing units to zero. I.e the start_address preset values will be the first value next round..
                                               (00366)     1   MODE_A      0;      ( Bit 98: Used for direct Re engine and Ve engine.
                                               (00367)     1   MODE_B      0;      ( Bit 97:
                                               (00368)     1   RE_DFY_SRC  0;      ( bit 96: Tells the Re to read from DFY instead of DFM.
                                               (00369)     1   ENGINE_START       0;      ( Bit 95: Bit for starting the selected engine.
                                               (00370)     1   RE_MODE_SEL 0;      ( Bit 94: This select the receive mode.
                                               (00371) 
                                               (00372)     1   CLR_ACC     0;      ( Bit 93: This is needed to clear the accumulator's via software. When a new vector is starting it should
                                               (00373)                             ( zero. Having this explicit also add for back to back stacking of long vectors.
                                               (00374)     1   MODE_C      0;      ( Bit 92: Bit for extending the modes for the vector engines. This is used to allow for loading params
                                               (00375)                             ( into the ring mode in the vector engine. It is expected that MODE_A and MODE_B is zero and this allows
                                               (00376)                             ( for further combinations and extensions. Like more complex addressing.
                                               (00377)     1   MODE_D      0;      ( Bit 91: See above on bit 92..
                                               (00378)     1   A_SRC_HIGH  0;      ( Bit 90: Expanding the number of workregisters to 64.
                                               (00379)     1   B_SRC_HIGH  0;      ( Bit 89: See bit 90. Also used for writing the workregisters. r32->r63
                                               (00380)     1   LD_DTM      0;      ( Bit 88: Load the dtm register from the dtm_array in ve. Auto incremented.
                                               (00381)     8   AVAILABLE   0;      ( Bits 87-80: This are available for future expansion. NOTE HEX..
                                               (00382) 
                                               (00383) ( Note that according to the fields description below: the low byte have the low bits.
                                               (00384) ( This legacy field description fill in the fields from byte 9 -> 0
                                               (00385) ( Thus the above should fill in the fields from byte 15 -> 10.
                                               (00386) 
                                               (00387) 
                                               (00388) ( This is the legacy fields that we dont touch at the moment. This start at bit 79 and going down to bit 0.
                                               (00389)     5    SEQC      11	  ;(SEQUENCER INSTRUCTION	(CONTINUE)
                                               (00390)     1    COND4		  ;
                                               (00391)     4    BITMSK		  ;
                                               (00392)    -4			  ;
                                               (00393)     4    NOMASK		  ;(USED AS DEFAULT MASK TO AVOID DOUBLE ASSIGNMENT
                                               (00394)    -5			  ;
                                               (00395)     5    COND      00     ;(CONDITION SELECTOR
                                               (00396)    -5			  ;
                                               (00397)     3	 AUX1	    0	  ;(AUX FCN FIELD 1	       (No Op
                                               (00398)     2	 AUX2	    0	  ;(AUX FCN FIELD 2	       (DATA0
                                               (00399)     1	 CPOL	    0	  ;(CONDITION POLARITY	       (if)
                                               (00400)     2	 MEMCP	    0  	  ;(MEMCLOCK SEQU ELEMENT TYPE (type C)
                                               (00401)     1	 MIFORM     1	  ;(MICROPROGRAM FORMAT SELECT (Not constant
                                               (00402)     8	 DATA1		  ;(IMMEDIATE DATA (TO D-BUS)
                                               (00403)    -8			  ;
                                               (00404)     4	 DS	    0	  ;(DBUS SOURCE
                                               (00405)     4	 MBMOP	    0	  ;(MBM operation	       (LANDD0)
                                               (00406)     4	 MAPR	    0	  ;(ADDR BITS 11,10,9,8 FOR VECTOR JUMPS
                                               (00407)    -4			  ;
                                               (00408)     C	 AD	  000	  ;(ADDRESS/DATA TO SEQUENCER,12 BIT
                                               (00409)    -4			  ;
                                               (00410)     4	 MAP		  ;(AUX FUNCTION SELECT
                                               (00411)    -4			  ;
                                               (00412)     4	 MSEL	          ;(ADDR SOURCE SELECT FOR VECTOR JUMPS AND ENDDECODE
                                               (00413)    -8			  ;
                                               (00414)     4	 DA0H		  ;(DATA0 7..4, TO AVOID DOUBLE ASSIGNMENT
                                               (00415)    -4			  ;
                                               (00416)     8	 DATA0		  ;(IMMEDIATE DATA (OLD DATA)
                                               (00417)     1    AFORM      0     ;(ALU A OPERAND FORMAT       (REG)
                                               (00418)     3    ALUS       0     ;( "  SOURCE CTRL            (D)
                                               (00419)     3    ALUF       0     ;( "  FUNCTION CTRL          (PLUS CARRYIN)
                                               (00420)     3    ALUD       0     ;( "  DESTINATION CTRL       (F TO Y, NO LOAD)
                                               (00421)     2	 CIN	    0	  ;(CARRY-IN SELECTOR	       (CARRYIN = 0)
                                               (00422)     4	 FF/PB	    0	  ;(CONDITION FLIPFLOPS /PGEN B(NO CHANGE)
                                               (00423)     5	 A	   1F	  ;(2901 A ADDRESS (ALSO USED FOR OTHER PURPOSES)
                                               (00424)     5    B         1F     ;(  "  B ADDRESS
                                               (00425)     4	 PC	    0	  ;(PULSE GENERATOR C	       (NO PULSE)
                                               (00426)     4	 SHIN/PA    0	  ;(SHIFT INPUT SELECTORS / PULSE GENERATOR A
                                               (00427)     2	 GASS	    0	  ;(GMEM source address select
                                               (00428)     2	 GASD	    0	  ;(GMEM destination address select
                                               (00429)     2    GACS       0     ;(GMEM source address control
                                               (00430)     2    GACD	    0     ;(GMEM destination address control
                                               (00431)     1    GAPP	    0     ;(GMEM address push/pop control
                                               (00432)     3	 PD	    0	  ;(PULSE GENERATOR D	       (NO PULSE)
                                               (00433) 
                                               (00434) 
                                               (00435) (
                                               (00436) (TOTAL LENGTH ABOVE IS 80 BITS.
                                               (00437) (THE FOLLOWING FIELD IS NOT INCLUDED IN THE MICROPROGRAM MEMORY:
                                               (00438)     3	 NOTE	    0	  ;(NOTE DIGIT TO BE PRINTED IN OUTPUT LISTINGS
                                               (00439)     1	 DDEST      0	  ;(Decode destination marker for mpgmscan tool
                                               (00440)     1	 NFDEC      0	  ;(Not full decode marker for mpgmscan tool
                                               (00441)     1	 NPCHG      0	  ;(No pointer change marker for mpgmscan tool
                                               (00442) (
                                               (00443) 'FIELDS SECTION
                                               (00444) (BYTE 9       8       7       6       5       4       3       2       1       0
                                               (00445) (!       !7      !  6    !    5  !      4!       !3      !  2    !    1  !
                                               (00446) (9876543210987654321098765432109876543210987654321098765432109876543210987654321
                                               (00447) (!       !       !       !       !       !       !       !       !       !     0
                                               (00448) (!    xxxxx xx xxxxxxxx  !       ! xxxx  !xxx  xxxx     xxxxx    xxxx  xx! xx xx
                                               (00449) (xxxxx   ! x  x  !     xxxxxxxxxxxx    xxx   xx  ! xxxxx !   xxxx!   xx  xx  x x
                                               (00450) (S    C  ! CM M D!     A !       ! A   A !A  C F ! A    B!   P   S   G G G G G P
                                               (00451) (E    O  ! OE I A!     D !       ! L   L !L  I F ! A    A!   C   H   A A A A A D
                                               (00452) (Q    N  ! NM F T!     D !       ! U   U !U  N / ! D    D!       I   S S C C P
                                               (00453) (C    D  ! DC O A!     R !       ! S   F !D    P ! D    D!       N   S D S D P
                                               (00454) (O    I  ! PP R 1!     E !       !       !     B ! R    R!       /	 !
                                               (00455) (N    T  ! O  M  !     S !       !       !       !       !       P	 !
                                               (00456) (T    I  ! L	 !     S !       !       !       !       !       A       !
                                               (00457) (R    O  !  	 !	 !	 !       !       !       !       !       !
                                               (00458) (O    N  !	 !       !	 !       !       !       !       !       !
                                               (00459) (L       !       !	 !       !       !       !       !       !       !
                                               (00460) (!    xxx!       ! xxxx  ! xxxxxxxx      !       !       !       !       !
                                               (00461) (!       xx    xxxx    xxxx    xxxx      !       !       !       !       !
                                               (00462) (!    A  A     D ! M   M ! D   M !       !       !       !       !       !
                                               (00463) (!    U  U     S ! B   A ! A   A !       !       !       !       !       !
                                               (00464) (!    X  X	 ! M   P ! T   P !       !       !       !       !       !
                                               (00465) (!    1  2	 ! O   R ! A     !       !       !       !       !       !
                                               (00466) (!       !       ! P     ! 0     !       !       !       !       !       !
                                               (00467) (!       !       !	 !	 !       !       !       !       !       !
                                               (00468) (!    x  !     CONSTANT  !     xxxx      !       !       !       !       !
                                               (00469) (!     xxxx      !       ! xxxx  !       !       !       !       !       !
                                               (00470) (!    C B!	 !	 ! D   M !       !       !       !       !       !
                                               (00471) (!    O I!	 !	 ! A   S !       !       !       !       !       !
                                               (00472) (!    N T! 	 !	 ! 0   E !       !       !       !       !       !
                                               (00473) (!    D M! 	 !	 ! H   L !       !       !       !       !       !
                                               (00474) (!    4 S! 	 !	 !       !       !       !       !       !       !
                                               (00475) (!      K! 	 !	 !   	 !       !       !       !       !       !
                                               (00476) (!       !       !	 !	 !       !       !       !       !       !
                                               (00477) (!     xxxx      !       !       !       !       !       !       !       !
                                               (00478) (!     N !       !       !       !       !       !       !       !       !
                                               (00479) (!     O !       !       !       !       !       !       !       !       !
                                               (00480) (!     M !       !       !       !       !       !       !       !       !
                                               (00481) (!     A !       !       !       !       !       !       !       !       !
                                               (00482) (!     S !       !       !       !       !       !       !       !       !
                                               (00483) (!     K !       !       !       !       !       !       !       !       !
                                               (00484) (!       !       !       !       !       !       !       !       !       !
                                               (00485) (DEFAULT:! 	 !	 !	 !       !       !       !       !       !
                                               (00486) (+-------+-------+-------+-------+-------+-------+-------+-------+-------+------
                                               (00487) (1000100000000100000000000000000000000000000000000011111111110000000000000000000
                                               (00488) (+-------+-------+-------+-------+-------+-------+-------+-------+-------+-----0
                                               (00489) (  8   8 ! 0   4 ! 0   0 ! 0   0 ! 0   0 ! 0   0 ! 3   F ! F   0 ! 0   0 ! 0   0
                                               (00490) (========!=======!=======!=======!=======!=======!=======!=======!=======!======
                                               (00491) 
                                               (00492) 'RULES SECTION
                                               (00493) *RULES*
                                               (00494) (DEFINTIONS
                                               (00495) LET CONDITION NOTEIS2 BE FIELD NOTE IS 2;
                                               (00496) LET CONDITION NOTEIS3 BE FIELD NOTE IS 3;
                                               (00497) 
                                               (00498) LET CONDITION NOTEISNOT4 BE FIELD NOTE IS NOT 4;
                                               (00499) 
                                               (00500) LET CONDITION ISRAMATOY BE FIELD ALUD IS 2;
                                               (00501) LET CONDITION ISBASSIGNED BE FIELD B IS ASSIGNED;
                                               (00502) 
                                               (00503) LET CONDITION ISSELBLOCK BE FIELD SHIN/PA IS IN RANGE C AND F;
                                               (00504) LET CONDITION ISSELBLOCKAUXSEQC BE FIELD SEQC IS ANY OF 16, 17;
                                               (00505) LET VALUE SELBLOCKAUXFLAG BE FIELD AUX1 MASKED WITH 1;
                                               (00506) LET CONDITION ISSELBLOCKAUX1 BE SELBLOCKAUXFLAG IS NOT 0;
                                               (00507) LET CONDITION ISSELBLOCKAUX BE ALL OF ISSELBLOCKAUXSEQC, ISSELBLOCKAUX1;
                                               (00508) 
                                               (00509) LET CONDITION SIMSELBLOCKS BE ALL OF ISSELBLOCK, ISSELBLOCKAUX;
                                               (00510) 
                                               (00511) LET VALUE SELBLOCK BE FIELD SHIN/PA ADDED TO -C;
                                               (00512) LET VALUE SELBLOCKAUX BE FIELD AUX1 SHIFTED BY 1 MASKED WITH 3;
                                               (00513) LET CONDITION EQUALSELBLOCKS BE SELBLOCK IS VALUE SELBLOCKAUX;
                                               (00514) 
                                               (00515) LET CONDITION ISCONDJUMP BE FIELD SEQC IS ANY OF
                                               (00516) 2, 3, 4, 5, 6, 7, 8, 9, A, C, D, E, F, 18, 19, 1A, 1B, 1D, 1F;
                                               (00517) LET CONDITION ISCONDASSIGNED BE FIELD COND IS ASSIGNED;
                                               (00518) 
                                               (00519) LET CONDITION ISOKTOSELBLOCK BE FIELD SEQC IS ANY OF
                                               (00520) 1, 15, 17, 1D, 1E, 1F;
                                               (00521) 
                                               (00522) LET CONDITION ISSHORTDIRECTJUMP BE FIELD SEQC IS ANY OF
                                               (00523) 4, 6, 8, 9, A, D, F, 10, 14, 16, 18;
                                               (00524) LET CONDITION ISLONGDIRECTJUMP BE FIELD SEQC IS ANY OF
                                               (00525) 5, 7, 15, 17,1D, 1F;
                                               (00526) 
                                               (00527) LET CONDITION ISVECTORJUMP BE FIELD SEQC IS 1;
                                               (00528) LET CONDITION ISCPOL0 BE FIELD CPOL IS 0;
                                               (00529) LET CONDITION ISCPOL1 BE FIELD CPOL IS 1;
                                               (00530) LET CONDITION ISSHORTVECTORJUMP BE ALL OF ISVECTORJUMP, ISCPOL0;
                                               (00531) LET CONDITION ISLONGVECTORJUMP BE ALL OF ISVECTORJUMP, ISCPOL1;
                                               (00532) 
                                               (00533) LET CONDITION ISSHORTJUMP BE ANY OF ISSHORTDIRECTJUMP, ISSHORTVECTORJUMP;
                                               (00534) LET CONDITION ISLONGJUMP BE ANY OF ISLONGDIRECTJUMP, ISLONGVECTORJUMP;
                                               (00535) 
                                               (00536) LET VALUE ADDRL BE * MASKED WITH FF;
                                               (00537) LET VALUE ADDRH BE * MASKED WITH FF00;
                                               (00538) LET VALUE ADDRB BE * SHIFTED BY C MASKED WITH F;
                                               (00539) LET VALUE NEXTADDRH BE ADDRH ADDED TO 100;
                                               (00540) LET CONDITION ISROWLAST BE ADDRL IS FF;
                                               (00541) LET CONDITION ISNOTROWLAST BE ADDRL IS NOT FF;
                                               (00542) 
                                               (00543) LET CONDITION ISSHORTJUMPONROWLAST BE ALL OF ISSHORTJUMP, ISROWLAST;
                                               (00544) LET CONDITION ISSHORTJUMPONNOTROWLAST BE ALL OF ISSHORTJUMP, ISNOTROWLAST;
                                               (00545) 
                                               (00546) LET VALUE DATA0H BE FIELD DATA0 MASKED WITH FF00;
                                               (00547) 
                                               (00548) LET CONDITION EQUALADDRH BE ADDRH IS VALUE DATA0H;
                                               (00549) LET CONDITION EQUALNEXTADDRH BE NEXTADDRH IS VALUE DATA0H;
                                               (00550) 
                                               (00551) LET VALUE ADB BE FIELD AD SHIFTED BY C MASKED WITH F;
                                               (00552) LET CONDITION NOTEQUALADDRB BE ADDRB IS NOT VALUE ADB;
                                               (00553) LET CONDITION LONGJUMPCHANGESBLOCK BE ALL OF ISLONGJUMP, NOTEQUALADDRB;
                                               (00554) 
                                               (00555) LET CONDITION ISANYSELBLOCK BE ANY OF ISSELBLOCK, ISSELBLOCKAUX;
                                               (00556) 
                                               (00557) LET CONDITION LONGJUMPSELBLOCK BE ALL OF ISLONGJUMP, ISANYSELBLOCK;
                                               (00558) 
                                               (00559) LET CONDITION EQUALSELBLOCKAD BE SELBLOCK IS VALUE ADB;
                                               (00560) LET CONDITION CORRECTSELBLOCK BE ALL OF ISSELBLOCK, EQUALSELBLOCKAD;
                                               (00561) 
                                               (00562) LET CONDITION EQUALSELBLOCKAUX BE SELBLOCKAUX IS VALUE ADB;
                                               (00563) LET CONDITION CORRECTSELBLOCKAUX BE ALL OF ISSELBLOCKAUX, EQUALSELBLOCKAUX;
                                               (00564) 
                                               (00565) LET CONDITION CORRECTANYSELBLOCK BE ANY OF CORRECTSELBLOCK, CORRECTSELBLOCKAUX;
                                               (00566) 
                                               (00567) LET CONDITION ISPLUS1JUMP BE FIELD SEQC IS ANY OF 1D, 1F;
                                               (00568) LET VALUE DATA0LB BE FIELD DATA0 MASKED WITH 1;
                                               (00569) LET CONDITION ISDATA0EVEN BE DATA0LB IS 0;
                                               (00570) 
                                               (00571) LET CONDITION ISSKIP BE FIELD SEQC IS 19;
                                               (00572) LET VALUE ADDRLB BE * MASKED WITH 1;
                                               (00573) LET CONDITION ISADDRODD BE ADDRLB IS NOT 0;
                                               (00574) 
                                               (00575) LET CONDITION SKIPTOCHECK BE ALL OF NOTEISNOT4, ISSKIP;
                                               (00576) 
                                               (00577) (IGNORES FOR DOUBLE ASSIGNMENTS
                                               (00578) ALWAYS IGNORE DOUBLE ASSIGNMENT FOR NOTE;
                                               (00579) IF NOTEIS2 THEN IGNORE DOUBLE ASSIGNMENT FOR SEQC;
                                               (00580) IF NOTEIS3 THEN IGNORE DOUBLE ASSIGNMENT FOR AUX1;
                                               (00581) 
                                               (00582) (IGNORES FOR OVERLAPPING ASSIGNMENTS
                                               (00583) ALWAYS IGNORE OVERLAPPING ASSIGNMENTS OF AD AND MSEL; (TODO
                                               (00584) ALWAYS IGNORE OVERLAPPING ASSIGNMENTS OF BITMSK AND NOMASK; (TODO
                                               (00585) ALWAYS IGNORE OVERLAPPING ASSIGNMENTS OF MSEL AND DATA0; (TODO -- TestIO
                                               (00586) 
                                               (00587) (CONSTRAINTS
                                               (00588) IF ISRAMATOY THEN MAKE SURE ISBASSIGNED FOR B IS NOT DEFINED FOR RAMATOY;
                                               (00589) IF SIMSELBLOCKS THEN MAKE SURE EQUALSELBLOCKS FOR CONFLICTING BLOCK SELECTION;
                                               (00590) IF ISCONDJUMP THEN MAKE SURE ISCONDASSIGNED FOR MISSING JUMP CONDITION;
                                               (00591) IF ISSELBLOCK THEN MAKE SURE ISOKTOSELBLOCK FOR
                                               (00592) BLOCK SELECTION ON SHORT OR UNCONDITIONAL JUMP;
                                               (00593) IF ISSHORTJUMPONROWLAST THEN MAKE SURE EQUALNEXTADDRH FOR
                                               (00594) SHORT JUMP OUT OF RANGE;
                                               (00595) IF ISSHORTJUMPONNOTROWLAST THEN MAKE SURE EQUALADDRH FOR
                                               (00596) SHORT JUMP OUT OF RANGE;
                                               (00597) IF LONGJUMPCHANGESBLOCK THEN MAKE SURE ISANYSELBLOCK FOR
                                               (00598) MISSING BLOCK SELECTION;
                                               (00599) IF LONGJUMPSELBLOCK THEN MAKE SURE CORRECTANYSELBLOCK FOR
                                               (00600) LONG JUMP TO WRONG BLOCK;
                                               (00601) IF ISPLUS1JUMP THEN MAKE SURE ISDATA0EVEN FOR PLUS1 JUMP TO ODD ADDRESS;
                                               (00602) IF SKIPTOCHECK THEN MAKE SURE ISADDRODD FOR SKIP ON AN EVEN ADDRESS;
                                               (00603) 
                                               (00604) 'GENERAL INFO
                                               (00605) *CODES*
                                               (00606) (
                                               (00607) (	  GENERAL INFORMATION
                                               (00608) (	  ===================
                                               (00609) (
                                               (00610) (---------------------------------------------------------------------
                                               (00611) (
                                               (00612) (EXPLANATION OF WORD-CONNECTING AND ABBREVIATING FUNCTION:
                                               (00613) (DURING PASS 1, DEFINITIONS OF THE TYPE  " NAME: 'STRING' "
                                               (00614) (ARE STORED IN THE CODE LIST, LIKE ALL MNEMONIC DEFINITIONS IN THE
                                               (00615) (CODES SECTION. WHEN DETECTING ONE OF THESE NAMES DURING PASS 2 OR 3,
                                               (00616) (IN THE PROGRAM SECTION, THE ASSEMBLER PROGRAM WILL INTERPRET IT
                                               (00617) (IN THE FOLLOWING MANNER:
                                               (00618) (THE NAME AND THE SPACE AFTER IT ARE REPLACED, IN THE INPUT BUFFER
                                               (00619) (AREA, BY THE STRING BETWEEN THE APOSTROPHES. AFTER THAT, THE
                                               (00620) (ASSEMBLER CONTINUES READING, SEARCHING FOR A NEW WORD, STARTING AT
                                               (00621) (THE LOCATION WHERE THE FIRST CHARACTER OF THE STRING WAS WRITTEN.
                                               (00622) (
                                               (00623) (-------------------------------------------------------------------------------
                                               (00624) (
                                               (00625) (THE FOLLOWING WORD WILL BE ACCEPTED BUT WILL NOT HAVE ANY EFFECT
                                               (00626) (ON THE ASSEMBLER OUTPUT:
                                               (00627) (
                                               (00628) WITH:       ''
                                               (00629) (
                                               (00630) (THE FOLLOWING MNEMONIC IS USED IN EXTERNAL REFERENCE LIST, IN ORDER TO
                                               (00631) (GET A PRINTOUT OF THE ADDRESS VALUE OF A LABEL IN THE MICROPROGRAM
                                               (00632) (MODULE BEEING COMPILED:
                                               (00633) (
                                               (00634) %:    '>>> XADR:=@'
                                               (00635) (
                                               (00636) (THE FOLLOWING MNEMONIC IS USED IN SP<->CPU MESSAGE LIST, IN ORDER TO
                                               (00637) (GET A PRINTOUT OF THE LAST 8 BITS OF THE VALUE OF A LABEL:
                                               (00638) (
                                               (00639) >:    '>>> CODE:=@'
                                               (00640) >>>:  SEQC:=00, COND:=00, CPOL:=0, MEMCP:=0, MIFORM:=0, DATA1:=0,
                                               (00641)       AD:=0, AFORM:=0, ALUS:=0, ALUF:=0, ALUD:=0, CIN:=0, FF/PB:=0,
                                               (00642)       A:=0, B:=0, PC:=0, SHIN/PA:=0, GASS:=0, GASD:=0, GACS:=0,
                                               (00643)       GACD:=0, GAPP:=0, PD:=0;
                                               (00644) 
                                               (00645) (
                                               (00646) (THE VALUE IS TO BE USED AS AN SP ORDER. WHEN RECEIVING THE ORDER
                                               (00647) (AND DOING "SPDECODE", A JUMP IN THE MICROPROGRAM WILL BE PERFORMED,
                                               (00648) (TO THE LOCATION OF THE LABEL.
                                               (00649) (
                                               (00650) (THE SAME MNEMONIC IS USED IN THE CPU->SP MESSAGE LIST. THE ADDRESS
                                               (00651) (OF THE MICROINSTRUCTION GENERATING A CALL TO SP IS USED AS A
                                               (00652) (MESSAGE TO SP IDENTIFYING THE CAUSE OF THE CALL.
                                               (00653) (
                                               (00654) 'NOTES
                                               (00655) (
                                               (00656) (	  NOTES
                                               (00657) (	  =====
                                               (00658) (
                                               (00659) (-------------------------------------------------------------------------------
                                               (00660) (
                                               (00661) (THE FOLLOWING WORDS WILL GENERATE A DIGIT IN THE "NOTE" FIELD.
                                               (00662) (THE DIGIT WILL APPEAR ALSO IN THE LISTING MADE BY ASSEMBLER PASS 3.
                                               (00663) (
                                               (00664) DS:	    NOTE1;   (DEFINE STORAGE)
                                               (00665) DBLASS:     NOTE2;   (DOUBLE ASSIGNMENT IN SEQCTRL WILL BE REGISTERED
                                               (00666) DBLAUX:     NOTE3;   (DOUBLE ASSIGNMENT IN AUX1 WILL BE REGISTERED
                                               (00667) ORG:	    NOTE4;   (DISABLES SOME MAKE SURE RULES...
                                               (00668) NOT:        'NOT'
                                               (00669) NOTUSED:    NOTE1;   (WORD NOT USED)
                                               (00670) MODELDEPDT: NOTE1;   (MODEL DEPENDENT)
                                               (00671) !!!!!:	    NOTE1;   (UNUSED HOLE, TEMPRARY MODIFICATION, A.S.O
                                               (00672) 
                                               (00673) (
                                               (00674) NOTE1: NOTE:=1;
                                               (00675) NOTE2: NOTE1 NOTE:=2;
                                               (00676) NOTE3: NOTE2 NOTE:=3;
                                               (00677) NOTE4: NOTE3 NOTE:=4;
                                               (00678) 
                                               (00679) DECODEDEST: DDEST:=1;
                                               (00680) NOTFULLDECODE: NFDEC:=1;
                                               (00681) NOPTRCHANGE: NPCHG:=1;
                                               (00682) (ECODEDEST: NOTE:=8;
                                               (00683) (
                                               (00684) 'SEQUENCER OPERATIONS
                                               (00685) (
                                               (00686) (  Table  1. Functions determined by the SEQC-field
                                               (00687) (----+---+------+--------+-----+---------------------------------------+-------+
                                               (00688) (SEQC!C- ! COND !  AD	 !Addi-!				       !Corresp!
                                               (00689) (    !POL!   X2 !  !DATA0!tion ! Description                           !old CP !
                                               (00690) (    !	 !AX1	!MR! !MAP!tab #!				       !SQCT!JT!
                                               (00691) (----+---+------+--+-+---+-----+---------------------------------------+----+--+
                                               (00692) (  0 ! 0 !- --	! - -  - !     ! RESET				       ! 0   - !
                                               (00693) (  0 ! 1 !1mask ! - d10..!     ! BREAK1 (->adr d + masked reqbits)     !  - -  !
                                               (00694) (  0 ! 1 !0mask ! - d1100!     ! BREAK2 (->adr d + maskd LZPCIRQ(3..0))! - -   !
                                               (00695) (  0 ! 1 !1mask ! - d1100!     ! BREAK3 (->adr d + maskd LZPCIRQ(7..4))!  - -  !
                                               (00696) (----+---+------+--------+-----+---------------------------------------+-------+
                                               (00697) ( 11 ! - !  --	! - -  - !    6! CONTINUE                    (default) ! E   - !
                                               (00698) ( 19 !t/f! cond ! - -  - ! 3   ! SKIP IF cond			       !  - -  !
                                               (00699) ( 14 ! - !  --	! -  d	 !  4  ! UNC GO TO d			       !(3    )!
                                               (00700) ( 1D !t/f! cond !  ad	 !     ! LGO TO ad, PLUS 1 IF cond	       !(6   1)!
                                               (00701) ( 15 ! - !  --	!  ad	 !  4  ! UNC LGO TO ad			       ! 2   1 !
                                               (00702) (  4 !t/f! cond ! -  d	 !     ! GO TO d IF cond 		       !(3    )!
                                               (00703) (  8 !t/f! cond ! -  d	 !     ! GO TO d IF cond, ELSE TO STORED       !(7   1)!
                                               (00704) (  5 !t/f! cond !  ad	 !     ! LGO TO ad IF cond		       ! 3   1 !
                                               (00705) (----+---+------+--------+-----+---------------------------------------+-------+
                                               (00706) ( 16 ! - !  --	! -  d	 !   5 ! UNC DO d			       !(1   1)!
                                               (00707) ( 1F !t/f! cond !  ad	 !     ! LDOPLUS1 ad, IF cond		       !  - -  !
                                               (00708) ( 17 ! - !  --	!  ad	 !   5 ! UNC LDO ad			       !(1   1)!
                                               (00709) (  6 !t/f! cond ! -  d	 !     ! DO d IF cond			       !(1   1)!
                                               (00710) (  A !t/f! cond ! -  d	 !     ! DO d IF cond, ELSE DO STORED	       !(5   1)!
                                               (00711) (  7 !t/f! cond !  ad	 !     ! LDO ad IF cond 		       ! 1   1 !
                                               (00712) (----+---+------+--------+-----+---------------------------------------+-------+
                                               (00713) ( 13 ! - !  --	! - -  - !    6! UNC RETURN			       !(A   -)!
                                               (00714) ( 1B !t/f! cond ! - -  - ! 3   ! UNC RETURN & SKIP 1 IF cond	       !  - -  !
                                               (00715) (  3 !t/f! cond ! - -  - ! 3   ! RETURN IF cond 		       ! A   - !
                                               (00716) (  9 !t/f! cond ! -  d	 !     ! POPJUMP d IF cond		       !(B   -)!
                                               (00717) (----+---+------+--------+-----+---------------------------------------+-------+
                                               (00718) (to be continued on next page.
                                               (00719) 'SEQUENCER OPERATIONS
                                               (00720) (
                                               (00721) (----+---+------+--------+-----+---------------------------------------+-------+
                                               (00722) ( 1E ! - !  --	!mr  01..!  4  ! UNC YDECODE	 		       !(3   0)!
                                               (00723) ( 1E ! - !  --	!mr  11mm!  4  ! UNC mDECODE (see tab 2) 	       !(3   3)!
                                               (00724) (  E !t/f! cond !mr  01..!     ! YDECODE IF cond		       ! 3   0 !
                                               (00725) (  E !t/f! cond !mr  11mm!     ! mDECODE IF cond (see tab 2)	       ! 3   3 !
                                               (00726) (  1 ! 0 !0mask !   d01..!     ! VJTO d PLUS LSHALF OF Y 	       !(2   2)!
                                               (00727) (  1 ! 0 !1mask !   d01..!     ! VJTO d PLUS MSHALF OF Y 	       !(2   2)!
                                               (00728) (  1 ! 0 !0mask !   d11mm!     ! VJTO d PLUS LSHALF OF m (see tab 2)   !(2   3)!
                                               (00729) (  1 ! 0 !1mask !   d11mm!     ! VJTO d PLUS MSHALF OF m (see tab 2)   !(2   3)!
                                               (00730) (  1 ! 1 !0mask !  ad01..!     ! LVJTO ad PLUS LSHALF OF Y	       ! 2   2 !
                                               (00731) (  1 ! 1 !1mask !  ad01..!     ! LVJTO ad PLUS MSHALF OF Y	       ! 2   2 !
                                               (00732) (  1 ! 1 !0mask !  ad11mm!     ! LVJTO ad PLUS LSHALF OF m (see tab 2) ! 2   3 !
                                               (00733) (  1 ! 1 !1mask !  ad11mm!     ! LVJTO ad PLUS MSHALF OF m (see tab 2) ! 2   3 !
                                               (00734) (----+---+------+--------+-----+---------------------------------------+-------+
                                               (00735) (  C !t/f! cond !  ad	 !     ! STORE ad IF cond, &PUSH CSTACK        ! 4   1 !
                                               (00736) ( 1C ! 0 !  --	! -  d	 !  4  ! STORE d		               !(C   1)!
                                               (00737) ( 1C ! 1 !  --	!  ad	 !  4  ! LSTORE ad			       ! C   1 !
                                               (00738) (  B ! 0 !  --	! -  01..!  4  ! LOAD CTR FROM YREG		       !(C   0)!
                                               (00739) (  B ! 0 !  --	! -  11mm!  4  ! LOAD CTR FROM m (see tab 2)	       !(C   3)!
                                               (00740) (  B ! 1 !  --	!mr  01..!  4  ! LLOAD CTR FROM YREG		       ! C   0 !
                                               (00741) (  B ! 1 !  --	!mr  11mm!  4  ! LLOAD CTR FROM m (see tab 2)	       ! C   3 !
                                               (00742) (----+---+------+--------+-----+---------------------------------------+-------+
                                               (00743) ( 12 ! - !  --	! - -  - !    6! REPEAT CSTACK UNTIL CTR=0 	       ! 8   - !
                                               (00744) ( 1A !t/f! cond ! - -  - ! 3   ! REP CSTACK UNTIL CTR=0 &SKIP IF cond  !  - -  !
                                               (00745) (  2 !t/f! cond ! - -  - ! 3   ! PROCEED IF cond, ELSE REPEAT CSTACK   ! D   - !
                                               (00746) ( 10 ! - !  --	!    d	 !  4  ! REPEAT FROM d UNTIL CTR=0 	       !(9   1)!
                                               (00747) ( 18 !t/f! cond !    d	 !     ! REPPLUS1 FROM d, IF cond, UNTIL CTR=0 !  - -  !
                                               (00748) (  D !t/f! cond !    d	 !     ! IF cond CONT, EIF C=0 GT d, EREP CSTK !(F   1)!
                                               (00749) (  F !t/f! cond !    d	 !     ! IF C=0 CONT, EGT d IF cond, EREP CSTK !  - -  !
                                               (00750) (----+---+------+--------+-----+---------------------------------------+-------+
                                               (00751) '
                                               (00752) (  Table 2. Select of "m" in                  Table 3. Additional function for
                                               (00753) (  operations 13..15, 18 (och 0)	      operations 2,10,11,1A,1B
                                               (00754) (----------+--------------+                (Note: Provided DS = "DSOURCE CU")
                                               (00755) ( MAP(1:0) !		  !		   +----------+-------------------+
                                               (00756) (----------+--------------+		   ! MAP(1:0) ! 		  !
                                               (00757) (    00    !  "LZPCIRQ"   !                +----------+-------------------+
                                               (00758) (    01    !     IR       !                !    00    ! DSOURCE "LZPCIRQ" !
                                               (00759) (    10    !	 DFM	  !		   !	01    ! DSOURCE  IR	  !
                                               (00760) (    11    !	 SPCMD	  !		   !	11    ! DSOURCE  SPCMD	  !
                                               (00761) (----------+--------------+		   +----------+-------------------+
                                               (00762) (
                                               (00763) ( NOTE!    LZPCIRQ is a combination of LINK, ZERO, PCCY, CARRY, TRACE, IRQ(2:0).
                                               (00764) (
                                               (00765) (
                                               (00766) (  Table 4. Additional functions to operations 3,5,13,17,18,1C.
                                               (00767) (---+-------+------+-----------------------------------------------------------+
                                               (00768) (C- ! COND  ! MAP  !							       !
                                               (00769) (POL! AUX1  !	   !							       !
                                               (00770) (---+-------+------+-----------------------------------------------------------+
                                               (00771) (   ! 000.. !	   !   No Op (default)					       !
                                               (00772) (   ! 001.. !	   !   POP CSTACK					       !
                                               (00773) (   ! 010.. !	   !   DECREMENT CTR					       !
                                               (00774) (   ! 011.. !	   !   POP AND DECREMENT CTR				       !
                                               (00775) (   ! 100.. !	   !   INCREMENT STCTR					       !
                                               (00776) (   ! 101.. !	   !   PUSH CSTACK (egen adr+1 -> cstack)		       !
                                               (00777) (   ! 110.. !	   !   WHEN SPREQ					       !
                                               (00778) (   ! 111.. !	   !   PUSH CSTACK & DECREMENT CTR			       !
                                               (00779) (---+-------+------+-----------------------------------------------------------+
                                               (00780) (
                                               (00781) (  Table 5. Additional functions to operations 9,B.
                                               (00782) (---+-------+------+-----------------------------------------------------------+
                                               (00783) (C- ! COND  ! MAP  !							       !
                                               (00784) (POL! AUX1  !	   !							       !
                                               (00785) (---+-------+------+-----------------------------------------------------------+
                                               (00786) (   ! 000.. !	   !   No Op (default)					       !
                                               (00787) (   ! 001.. !	   !   BLOCK 0						       !
                                               (00788) (   ! 010.. !	   !   DECREMENT CTR					       !
                                               (00789) (   ! 011.. !	   !   BLOCK 1				       		       !
                                               (00790) (   ! 100.. !	   !   No Op					       	       !
                                               (00791) (   ! 101.. !	   !   BLOCK 2						       !
                                               (00792) (   ! 110.. !	   !   WHEN SPREQ					       !
                                               (00793) (   ! 111.. !	   !   BLOCK 3						       !
                                               (00794) (---+-------+------+-----------------------------------------------------------+
                                               (00795) 'SEQUENCER OPERATIONS
                                               (00796) (
                                               (00797) (  Table 6. Aditional functions to operations 1, F, och 19
                                               (00798) (---+-------+------+-----------------------------------------------------------+
                                               (00799) (C- ! COND  ! MAP  !							       !
                                               (00800) (POL! AUX1  !	   !							       !
                                               (00801) (   !	 X2 !	   !							       !
                                               (00802) (---+-------+------+-----------------------------------------------------------+
                                               (00803) ( 0 ! 000.. !	   !   No Op (default)					       !
                                               (00804) ( 0 ! 001.. !	   !   POP CSTACK (See note)                                   !
                                               (00805) ( 0 ! 010.. !	   !   DECREMENT CTR					       !
                                               (00806) ( 0 ! 011.. !	   !   POP AND DECREMENT CTR (See note)			       !
                                               (00807) ( 0 ! 100.. !	   !   INCREMENT STCTR (See note)			       !
                                               (00808) ( 0 ! 101.. !	   !   PUSH CSTACK (egen adr+1 -> cstack)(See note)	       !
                                               (00809) ( 0 ! 110.. !	   !   WHEN SPREQ					       !
                                               (00810) ( 0 ! 111.. !	   !   PUSH CSTACK & DECREMENT CTR (See note)		       !
                                               (00811) ( 0 ! ....1 ! 00.. !   DSOURCE CSTACK					       !
                                               (00812) ( 0 ! ....1 ! 01.. !   DSOURCE CTRL					       !
                                               (00813) ( 0 ! ....1 ! 10.. !   DSOURCE CSTACKH (obs: i msb l{ggs signalen STCTREQ0)    !
                                               (00814) ( 0 ! ....1 ! 11.. !   DSOURCE CTRH					       !
                                               (00815) ( 0 ! ...00 ! .... !   DSOURCE DATA0	    				       !
                                               (00816) ( 0 ! ...10 ! 1100 !   DSOURCE LZPCIRQ					       !
                                               (00817) ( 0 ! ...10 ! 1101 !   DSOURCE IR					       !
                                               (00818) ( 0 ! ...10 ! 1111 !   DSOURCE SPCMD					       !
                                               (00819) ( 1 ! 0mmmm ! 01.. !   DSOURCE d PLUS LSHALF OF Y, WITH BITMASK mmmm	       !
                                               (00820) ( 1 ! 1mmmm ! 01.. !   DSOURCE d PLUS MSHALF OF Y, WITH BITMASK mmmm	       !
                                               (00821) ( 1 ! 1mmmm ! 10.. !   DSOURCE d PLUS IRA, WITH BITMASK mmmm		       !
                                               (00822) ( 1 ! 0mmmm ! 1100 !   DSOURCE d PLUS LSHALF OF LZPCIRQ, WITH BITMASK mmmm     !
                                               (00823) ( 1 ! 1mmmm ! 1100 !   DSOURCE d PLUS MSHALF OF LZPCIRQ, WITH BITMASK mmmm     !
                                               (00824) ( 1 ! 0mmmm ! 1101 !   DSOURCE d PLUS LSHALF OF IR, WITH BITMASK mmmm	       !
                                               (00825) ( 1 ! 1mmmm ! 1101 !   DSOURCE d PLUS MSHALF OF IR, WITH BITMASK mmmm	       !
                                               (00826) ( 1 ! 0mmmm ! 1110 !   DSOURCE d PLUS LSHALF OF MEM, WITH BITMASK mmmm	       !
                                               (00827) ( 1 ! 1mmmm ! 1110 !   DSOURCE d PLUS MSHALF OF MEM, WITH BITMASK mmmm	       !
                                               (00828) ( 1 ! 0mmmm ! 1111 !   DSOURCE d PLUS LSHALF OF SPCMD, WITH BITMASK mmmm       !
                                               (00829) ( 1 ! 1mmmm ! 1111 !   DSOURCE d PLUS MSHALF OF SPCMD, WITH BITMASK mmmm       !
                                               (00830) (---+-------+------------------------------------------------------------------+
                                               (00831) (Note: When op=F or (op=19 and CTR=0), no PUSH, POP, or INCREMENT STCTR will
                                               (00832) (be performed.
                                               (00833) (
                                               (00834) 'GO TO
                                               (00835) (
                                               (00836) (	  GO TO
                                               (00837) (	  =====
                                               (00838) (
                                               (00839) (-------------------------------------------------------------------------------
                                               (00840) (Skip
                                               (00841) (Example:
                                               (00842) ("SKIP IF CARRY"                   (Must be located on a ODD address
                                               (00843) (
                                               (00844) (Simple jumps
                                               (00845) (
                                               (00846) (a) short (8 least significant address bits given)
                                               (00847) (Examples:
                                               (00848) ("UNC GO TO LABEL1"
                                               (00849) ("GO TO LABEL2 IF NOT ZERO"
                                               (00850) (
                                               (00851) (b) long (12 least significant address bits given)
                                               (00852) (Examples:
                                               (00853) (
                                               (00854) ("UNCL GO TO LABEL1"
                                               (00855) ("LGO TO LABEL2 IF NOT ZERO"
                                               (00856) (
                                               (00857) (NOTE: "SELECT BLK2" (FOR EXAMPLE) HAS TO BE ADDED WHEN JUMPING BETWEEN
                                               (00858) (MICROPROGRAM BLOCKS (4096 WORDS). NOTE, HOWEVER, THAT FIELD SHIN/PA
                                               (00859) (IS OCCUPIED BY THIS BLOCK SELECTION.
                                               (00860) ("SELECT BLK.." CAN BE USED WITH ALL KINDS OF JUMP, ALSO SUBROUTINE CALLS.
                                               (00861) (
                                               (00862) SKIP:	  SEQC:=19;
                                               (00863) UNC:      'U'
                                               (00864) UGO:      'UGO'
                                               (00865) UGOTO:    'UGT DATA0:=@'
                                               (00866) UGT:	  SEQC:=14;
                                               (00867) 
                                               (00868) GO:       'GO'
                                               (00869) GOTO:     'GT DATA0:=@'
                                               (00870) GT:	  SEQC:=4;
                                               (00871) 
                                               (00872) UNCL:     'UL'                (kan skriva antingen UNC L GO..
                                               (00873) UL:       'UL'                (eller UNCL GO..
                                               (00874) ULGO:     'ULGO'
                                               (00875) ULGOTO:   'ULGT AD:=@'
                                               (00876) ULGT:	  SEQC:=15;
                                               (00877) 
                                               (00878) LGO:      'LGO'
                                               (00879) LGOTO:    'LGT AD:=@'
                                               (00880) LGT:	  SEQC:=5;
                                               (00881) (---------
                                               (00882) ("ELSE TO STORED" USED TOGETHER WITH A "GO TO" STATEMENT
                                               (00883) ("PLUS 1" USED TOGETHER WITH A "LGO TO" STATEMENT
                                               (00884) (NOTE: THESE TWO ARE MUTUALLY EXCLUSIVE.
                                               (00885) ("ELSE GO TO STORED" CAN ALSO BE USED WITH A 256-WAY DECODE JUMP.
                                               (00886) (
                                               (00887) (Examples:
                                               (00888) ("GO TO LAB3 IF CARRY, ELSE TO STORED" (STORED refers to contents of CTR/REG)
                                               (00889) ("LGO TO LABEL4, PLUS 1 IF CARRY"  (LABEL4 must be even)
                                               (00890) (
                                               (00891) ELSE:     'ELSE'
                                               (00892) ELSETO:   'ELTO'
                                               (00893) ELTOSTORED:SEQC:=8 DBLASS;	(DOUBLE ASSIGNMENT WILL BE REGISTERED)
                                               (00894) (PLUS IS DEFINED ELSEWHERE)
                                               (00895) PLUS1:	  SEQC:=1D DBLASS;	(DOUBLE ASSIGNMENT WILL BE REGISTERED)
                                               (00896) 'AUXFN
                                               (00897) (
                                               (00898) (	  AUXILIARY FUNCTIONS SPECIFIED BY COND FIELD
                                               (00899) (	  ===========================================
                                               (00900) (
                                               (00901) (-------------------------------------------------------------------------------
                                               (00902) (
                                               (00903) (COMBINED WITH SEQC = 11, 14, 15, 16, 17, 13, 1E, 1C, 0B, 12, 10.
                                               (00904) (EXAMPLE 1:
                                               (00905) ("GO TO LABEL1 WHEN SPREQ"
                                               (00906) (THE TIMING HARDWARE WILL STOP UNTIL SPREQ IS VALID
                                               (00907) (
                                               (00908) (EXAMPLE 2:
                                               (00909) ("UNC LDO LABEL1, BLOCK 1"
                                               (00910) (PERFORMS A LONG JUMP TO LABEL1 IN BLOCK 1
                                               (00911) (
                                               (00912) WHEN:      'WHEN'
                                               (00913) WHENSPREQ: AUX1:=6 ;
                                               (00914) (
                                               (00915) POPCSTACK:  AUX1:=1 ;                   (POP:      'POP' (defined elsewhere)
                                               (00916) (
                                               (00917) DECTR:      AUX1:=2 ;                   (DECREMENT:'DE' (defined elsewhere)
                                               (00918) (
                                               (00919) POPAND:    'P'
                                               (00920) PDECREMENT:'PD'
                                               (00921) PDCTR:	    AUX1:=3 ;
                                               (00922) (
                                               (00923) PUSH:     'PUSH'
                                               (00924) PUSHCSTACK: AUX1:=5 ;
                                               (00925) (
                                               (00926) INSTCTR:    AUX1:=4 ;                   (INCREMENT:'IN' (defined elsewhere)
                                               (00927) 
                                               (00928) &DECREMENT:'&DE'                        (&:        '&' (defined elsewhere)
                                               (00929) &DECTR:     AUX1:=7 DBLAUX;
                                               (00930) 
                                               (00931) BLOCK:     'BLK'
                                               (00932) BLOCK0:     AUX1:=1;
                                               (00933) BLOCK1:     AUX1:=3;
                                               (00934) BLOCK2:     AUX1:=5;
                                               (00935) BLOCK3:     AUX1:=7;
                                               (00936) BLK0:       AUX1:=1;
                                               (00937) BLK1:       AUX1:=3;
                                               (00938) BLK2:       AUX1:=5;
                                               (00939) BLK3:       AUX1:=7;
                                               (00940) (
                                               (00941) 'VECTOR JUMPS
                                               (00942) (
                                               (00943) (	  UNCONDITIONAL 2- TO 16-WAY JUMPS
                                               (00944) (	  ================================
                                               (00945) (
                                               (00946) (-------------------------------------------------------------------------------
                                               (00947) (UNCONDITIONAL 2- TO 16-WAY DECODE JUMPS, WITH SHIFTING AND MASKING
                                               (00948) (OF TESTED BYTES
                                               (00949) (
                                               (00950) (EXAMPLE STATEMENT:
                                               (00951) ("VECTOR JUMP TO LABEL1 PLUS LSHALF OF IR, WITH BITMASK 1001"
                                               (00952) (
                                               (00953) (THE WORD "LONG" CAN BE ADDED IN THE BEGINNING, TO 12 BIT ADDRESS INSTEAD OF 8.
                                               (00954) ("LSHALF" CAN BE REPLACED BY "MSHALF".
                                               (00955) ("IR" CAN BE REPLACED BY "Y", "MEM", "SP", "LZPCIRQ".
                                               (00956) (IF "Y" IS SELECTED, THE Y BUS VALUE IN THE PREVIOUS CYCLE WILL BE TESTED.
                                               (00957) ("1001" CAN BE REPLACED BY ANY COMBINATION OF 4 BITS.
                                               (00958) ("LABEL1" CAN BE REPLACED BY ANY NAME GIVEN TO THE BASE ADDRESS FOR
                                               (00959) (THE VECTOR JUMP, I.E. THE DESTINATION ADDRESS FOR THE CASE WHEN THE
                                               (00960) (TESTED BITS ARE ALL ZERO.
                                               (00961) (IN THE EXAMPLE ABOVE, A JUMP WILL BE PERFORMED TO LABEL1 WITH AN OFFSET
                                               (00962) (OF 0, +1, +8, OR +9, DEPENDING ON THE VALUES OF THE TESTED BITS.
                                               (00963) (THE BASE ADDRESS, HERE NAMED LABEL1, SHOULD BE A MULTIPLE OF HEX 10.
                                               (00964) (
                                               (00965) VECTOR:    'VECTOR'
                                               (00966) VECTORJUMP:'VJ'
                                               (00967) VJTO:      'S01 CPOL:=0 DATA0:=@'
                                               (00968) S01:	   SEQC:=1 NOMASK:=F;
                                               (00969) LONG:      'L'
                                               (00970) LVECTOR:   'LV'
                                               (00971) LVJUMP:    'LVJ'
                                               (00972) LVJTO:     'S01 CPOL:=1 AD:=@'
                                               (00973) PLUS:      'PLUS'
                                               (00974) PLUSLSHALF:COND4:=0;
                                               (00975) PLUSMSHALF:COND4:=1;
                                               (00976) OF:        'OF'
                                               (00977) OFYREG:	   MSEL:=4;
                                               (00978) OFIR:	   MSEL:=D;
                                               (00979) OFMEM:	   MSEL:=E;
                                               (00980) OFSP:	   MSEL:=F;
                                               (00981) OFLZPCIRQ: MSEL:=C;
                                               (00982) BITMASK:   'BM'
                                               (00983) BM0001:    BITMSK:=1 ;
                                               (00984) BM0010:    BITMSK:=2 ;
                                               (00985) BM0011:    BITMSK:=3 ;
                                               (00986) BM0100:    BITMSK:=4 ;
                                               (00987) BM0101:    BITMSK:=5 ;
                                               (00988) BM0110:    BITMSK:=6 ;
                                               (00989) BM0111:    BITMSK:=7 ;
                                               (00990) BM1000:    BITMSK:=8 ;
                                               (00991) BM1001:    BITMSK:=9 ;
                                               (00992) BM1010:    BITMSK:=A ;
                                               (00993) BM1011:    BITMSK:=B ;
                                               (00994) BM1100:    BITMSK:=C ;
                                               (00995) BM1101:    BITMSK:=D ;
                                               (00996) BM1110:    BITMSK:=E ;
                                               (00997) BM1111:    BITMSK:=F ; (NOTE: THIS IS THE DEFAULT VALUE NO LONGER, NOW NOMASK)
                                               (00998) (
                                               (00999) (---------
                                               (01000) ("ENDDECODE", "STOPDECODE", ETC ARE SPECIAL CASES OF THE TYPE
                                               (01001) (DESCRIBED ABOVE.
                                               (01002) (
                                               (01003) ("ENDDECODE" IS EQUIVALENT TO:
                                               (01004) (   "LONG VECTOR JUMP TO ENDDECBASE PLUS LSHALF OF LZPCIRQ, WITH BITMASK 1111"
                                               (01005) (
                                               (01006) ENDDECODE:     SEQC:=1 CPOL:=1 AD:=@ENDDECBASE COND4:=0 MSEL:=C BITMSK:=F NFDEC:=1;
                                               (01007) ENDDECODEM:    SEQC:=1 CPOL:=1 AD:=@ENDDECMBASE COND4:=0 MSEL:=C BITMSK:=F NFDEC:=1;
                                               (01008) J.ENDDECODE:   SEQC:=1 CPOL:=1 AD:=@J.ENDDECBASE COND4:=0 MSEL:=C BITMSK:=F NFDEC:=1;
                                               (01009) J.ENDDECODEM:  SEQC:=1 CPOL:=1 AD:=@J.ENDDECMBASE COND4:=0 MSEL:=C BITMSK:=F NFDEC:=1;
                                               (01010) (ENDDECODEP:    SEQC:=1 CPOL:=1 AD:=30 COND4:=0 MSEL:=C BITMSK:=F;
                                               (01011) (CENDDEC:       SEQC:=1 CPOL:=1 AD:=00 COND4:=0 MSEL:=C BITMSK:=F;
                                               (01012) (CENDDECM:      SEQC:=1 CPOL:=1 AD:=10 COND4:=0 MSEL:=C BITMSK:=F;
                                               (01013) 'VECTOR JUMPS
                                               (01014) (
                                               (01015) (	  CONDITIONAL 256-WAY JUMPS
                                               (01016) (	  =========================
                                               (01017) (-------------------------------------------------------------------------------
                                               (01018) (
                                               (01019) (CONDITIONAL 256-WAY DECODE JUMPS (NO SHIFT OR MASK)
                                               (01020) (NOTE: CAN BE MADE UNCONDITIONAL BY ADDING "UNC" IN BEGINNING OF STATEMENT.
                                               (01021) (NOTE: MAPR CAN BE SPECIFIED (ADDRESS BITS 11..8). DEFAULT IS
                                               (01022) (MAPR=4 FOR SPDECODE, =2 FOR MEMDECODE.
                                               (01023) (
                                               (01024) (EXAMPLE 1 (EXECUTING A "JUMP TO CONTROL STORE" INSTRUCTION):
                                               (01025) ("UNC MEMDECODE WITH MAPR:=1"
                                               (01026) (A JUMP WILL BE MADE TO ADDRESS 1XX, WHERE XX IS THE
                                               (01027) (BYTE READ  FROM MEMORY.
                                               (01028) (
                                               (01029) (EXAMPLE 2 (CONDITIONALLY DECODING SP ORDER):
                                               (01030) ("SPDECODE WITH MAPR:=2 IF CARRY, ELSE GO TO STORED"
                                               (01031) (IF CARRY TRUE, JUMP TO 2XX, WHERE XX IS SP ORDER CODE.
                                               (01032) (IF CARRY FALSE, JUMP TO ADDRESS PREVIOUSLY STORED IN
                                               (01033) (COUNTER/REGISTER IN SEQUENCER.
                                               (01034) (
                                               (01035) (EXAMPLE 3 (CONDITIONALLY YDECODE ):
                                               (01036) ("YREGDECODE TABSIZE IF CARRY; "where TABSIZE(=E) is the value for MAPR"
                                               (01037) (IF CARRY TRUE, JUMP TO EXX, WHERE XX IS THE YBUS VALUE IN THE PREVIOUS
                                               (01038) (CYCLE. IF CARRY FALSE, Continue to next address.
                                               (01039) (
                                               (01040) YREGDECODE:   'SEQC:=E MAP:=4 MAPR:='  (SB98
                                               (01041) SPDECODE:  'SEQC:=E MAP:=F MAPR:='  (SB98
                                               (01042) MEMDECODE: 'SEQC:=E MAP:=E MAPR:='  (SB98
                                               (01043) IRDECODE:  'SEQC:=E MAP:=D MAPR:='  (SB98
                                               (01044) UYREGDECODE:  'SEQC:=1E MAP:=4 MAPR:='  (SB98
                                               (01045) USPDECODE: 'SEQC:=1E MAP:=F MAPR:='  (SB98
                                               (01046) UMEMDECODE:'SEQC:=1E MAP:=E MAPR:='  (SB98
                                               (01047) UIRDECODE: 'SEQC:=1E MAP:=D MAPR:='  (SB98
                                               (01048) 'CSTACK
                                               (01049) (
                                               (01050) (	  PUSH CSTACK AND LOAD COUNTER/REGISTER IN SEQUENCER
                                               (01051) (	  ==================================================
                                               (01052) (
                                               (01053) (-------------------------------------------------------------------------------
                                               (01054) (
                                               (01055) (Load counter/register without pushing cstack:
                                               (01056) (
                                               (01057) (Example 1:
                                               (01058) ("STORE LOOP COUNT 10 PLUS LSHALF OF Y WITH BITMASK 0111"
                                               (01059) ("STORE LOOP COUNT 10 UNCOND, & PUSH CSTACK"
                                               (01060) ("STORE LOOP COUNT 10"
                                               (01061) (
                                               (01062) (Example 2:
                                               (01063) ("LOAD REG WITH LABEL LYNX1"         (old " STORE LABEL "
                                               (01064) ("LLOAD REG WITH LABEL LYNX1"        (old " STORE LABEL "
                                               (01065) (
                                               (01066) ("LOAD CTR WITH LABEL LYNX1"         (old " STORE LABEL "
                                               (01067) ("LLOAD CTR WITH LABEL LYNX1"        (old " STORE LABEL "
                                               (01068) (
                                               (01069) ("LOAD REG WITH CONSTANT 12"
                                               (01070) ("LLOAD REG WITH CONSTANT 345"
                                               (01071) (
                                               (01072) ("LOAD CTR WITH CONSTANT 12"
                                               (01073) ("LLOAD CTR WITH CONSTANT 345"
                                               (01074) (
                                               (01075) (
                                               (01076) (Example 3:
                                               (01077) ("LOAD CTR FROM YREG"
                                               (01078) ("LLOAD CTR FROM YREG, MAPR:=2"
                                               (01079) (Restriction: "IF.." cannot be used.
                                               (01080) (
                                               (01081) ("2" can be replaced by any unsigned hex number less than 10,
                                               (01082) ("345" can be replaced by any unsigned hex number less than 1000,
                                               (01083) ("12" can be replaced by any unsigned hex number less than 100,
                                               (01084) (but when a shifted/masked data source is added like in this example,
                                               (01085) (the number must be a multiple of hex 10.
                                               (01086) ("LSHALF" can be replaced by "MSHALF".
                                               (01087) ("Y" can be replaced by "IR", "MEM", "SP", or "LZPCIRQ",
                                               (01088) ("0111" can be replaced by any combination of four bits.
                                               (01089) ("LABEL2" can be any name biven to an address value, which will
                                               (01090) (here be loaded into the counter/register. "PLUS LS/MSHALF OF .." can
                                               (01091) (be used here too, if it is a multiple of hex 10.
                                               (01092) (Since the microprogram memory has been increased, and the blockselect is
                                               (01093) (is moved up to address bit 12 and 13, and the counter/register is only 12 bit
                                               (01094) (wide SELECT BLOCK has no affect on the loaded value any more.
                                               (01095) (
                                               (01096) (---------
                                               (01097) (PUSH CSTACK AND CONDITIONALLY LOAD COUNTER/REGISTER:
                                               (01098) (
                                               (01099) (To examples 1, 2, and 3 above can be added "& PUSH CSTACK", in which
                                               (01100) (case the address to the next microinstruction will be pushed onto
                                               (01101) (the cstack. Note that when doing this, a condition can be specified
                                               (01102) (for loading the counter/register, and (because of this) shifting
                                               (01103) (and masking must not be specified.
                                               (01104) (Restriction 1 is still valid.
                                               (01105) (
                                               (01106) (Example:
                                               (01107) ("STORE LOOP COUNT 1A IF CARRY, & PUSH CSTACK"
                                               (01108) (
                                               (01109) (Label can be used instead of constant, (see example 2 above)
                                               (01110) ("1A" can be replaced by any unsigned hex number, less than 800.
                                               (01111) (Note: STORE LOOP COUNT/LABEL is unconditional (i.e. "IF.." cannot
                                               (01112) (be used) if "& PUSH CSTACK" is left out.
                                               (01113) (
                                               (01114) STORE:      'STORE'
                                               (01115) STORELOOP:  'STL'
                                               (01116) STLCOUNT:   'SEQC:=1C AD:='
                                               (01117) LDLCTRA:    SEQC:=1C;
                                               (01118) (** STORELABEL: 'SEQC:=1C CPOL:=0 DATA0:=@'
                                               (01119) LOADREG:    'LREG'
                                               (01120) LREGWITH:   'LW'
                                               (01121) LWCONSTANT: 'LDLCTRA CPOL:=0 DATA0:='
                                               (01122) LWLABEL:    'LDLCTRA CPOL:=0 DATA0:=@'
                                               (01123) LLOAD:      'LLD'
                                               (01124) LLDREG:     'LLREG'
                                               (01125) LLREGWITH:  'WW'
                                               (01126) WWCONSTANT: 'SEQC:=1C CPOL:=1 AD:='
                                               (01127) WWLABEL:    'SEQC:=1C CPOL:=1 AD:=@'
                                               (01128) LOADCTR:    'LDCT'
                                               (01129) LLDCTR:     'LLDCT'
                                               (01130) LDCTWITH:   'CW'
                                               (01131) CWCONSTANT: 'LDLCTRA CPOL:=0 DATA0:='
                                               (01132) CWLABEL:    'LDLCTRA CPOL:=0 DATA0:=@'
                                               (01133) LLDCTWITH:  'CH'
                                               (01134) CHCONSTANT: 'SEQC:=1C CPOL:=1 AD:='
                                               (01135) CHLABEL:    'SEQC:=1C CPOL:=1 AD:=@'
                                               (01136) LDCTFROM:   'LDCTF' (LOAD CTR FROM YREG/SP/MEM/IR
                                               (01137) LLDCTFROM:  'LLDCTF' (LLOAD CTR FROM YREG/SP/MEM/IR
                                               (01138) LDCTFYREG:  LDLCTRI CPOL:=0 MAP:=4;
                                               (01139) LLDCTFYREG: LDLCTRI CPOL:=1 MAP:=4;  (bit 8-11 loaded from MAPR
                                               (01140) LDCTFSP:    LDLCTRI CPOL:=0 MAP:=F;
                                               (01141) LLDCTFSP:   LDLCTRI CPOL:=1 MAP:=F;  (bit 8-11 loaded from MAPR
                                               (01142) LDCTFMEM:   LDLCTRI CPOL:=0 MAP:=E;
                                               (01143) LLDCTFMEM:  LDLCTRI CPOL:=1 MAP:=E;  (bit 8-11 loaded from MAPR
                                               (01144) LDCTFIR:    LDLCTRI CPOL:=0 MAP:=D;
                                               (01145) LLDCTFIR:   LDLCTRI CPOL:=1 MAP:=D;  (bit 8-11 loaded from MAPR
                                               (01146) LDLCTRI:    SEQC:=B;
                                               (01147) &:        '&'
                                               (01148) &PUSH:    '&PUS'
                                               (01149) &PUSCSTACK:SEQC:=C DBLASS;(DBLE ASSIGNMENT WILL BE REG'D BY PASS 3)
                                               (01150) (
                                               (01151) 'SUBROUTINES
                                               (01152) (
                                               (01153) (	  SUBROUTINE CALL AND RETURN
                                               (01154) (	  ==========================
                                               (01155) (
                                               (01156) (-------------------------------------------------------------------------------
                                               (01157) (SUBROUTINE CALLS CAN BE NESTED IN 9 LEVELS.
                                               (01158) 
                                               (01159) UDO:      'SEQC:=16 DATA0:=@'
                                               (01160) 
                                               (01161) DO:       'SEQC:=6 DATA0:=@'
                                               (01162) 
                                               (01163) ULDO:     'SEQC:=17 AD:=@'
                                               (01164) 
                                               (01165) LDO:      'SEQC:=7 AD:=@'
                                               (01166) (---------
                                               (01167) ("ELSE DO STORED" AND "PLUS 1"
                                               (01168) (NOTE: THESE TWO ARE MUTUALLY EXCLUSIVE.
                                               (01169) (LDOPLUS1 LABEL, IF CARRY; (jmp to LABEL+1 if carry, else to LABEL)
                                               (01170) (
                                               (01171) ELSEDO:     'ELDO'
                                               (01172) ELDOSTORED: SEQC:=A DBLASS;	       (DOUBLE ASSIGNMENT WILL BE REGISTERED)
                                               (01173) LDOPLUS1:   'LDPL1 AD:=@'
                                               (01174) LDPL1:	    SEQC:=1F;
                                               (01175) 
                                               (01176) RETURN:   SEQC:=3;
                                               (01177) URETURN:  SEQC:=13;
                                               (01178) &SKIP:    '&SKIP'
                                               (01179) &SKIP1:   SEQC:=1B DBLASS;	       (DOUBLE ASSIGNMENT WILL BE REGISTERED)
                                               (01180) &SKIPNEXT: SEQC:=1A DBLASS;    (LSI    (DOUBLE ASSIGNMENT WILL BE REGISTERED)
                                               (01181) 
                                               (01182) BREAK0:   SEQC:=0 CPOL:=1 COND4:=0 MAP:=8;	    (-> ADR   + MASKED REQBITS
                                               (01183) BREAK1:  'SEQC:=0 CPOL:=1 COND4:=1 MAP:=8 DATA0:=@' (-> ADR D + MASKED REQBITS
                                               (01184) (
                                               (01185) 'END OF LOOP
                                               (01186) (
                                               (01187) (	  TEST AT END OF LOOP
                                               (01188) (	  ===================
                                               (01189) (-------------------------------------------------------------------------------
                                               (01190) (ALT. 1:
                                               (01191) ("REPEAT FROM LABEL1 UNTIL CTR=0"  NOTE: CONDITION CANNOT BE USED.
                                               (01192) (
                                               (01193) ("REPPLUS1 FROM LABEL1, IF cond, UNTIL CTR=0" NOTE: This is a 2 * 2way jump i.e
                                               (01194) (						    also conditional PLUS1 when
                                               (01195) (Read it as this:				    CTR=0, (CONTINUE or CONT.+1)
                                               (01196) ("REPEAT FROM LABEL1 PLUS1 IF cond, UNTIL CTR=0 and SKIP1 IF cond"
                                               (01197) (
                                               (01198) (ALT. 2:
                                               (01199) ("PROCEED IF CARRY,          (AND POP)
                                               (01200) ( ELSE REPEAT CSTACK"
                                               (01201) (ALT. 3:
                                               (01202) ("REPEAT CSTACK UNTIL CTR=0" (AND POP)        NOTE: CONDITION CANNOT BE USED
                                               (01203) (
                                               (01204) (ALT. 4A:
                                               (01205) ("IF CARRY CONTINUE          (No POP or CTR decr.)
                                               (01206) ( ELSE IF CTR=0 GO TO LABEL1 (AND POP),
                                               (01207) ( ELSE REPEAT CSTACK"        (Decr. CTR
                                               (01208) (
                                               (01209) (ALT. 4B:
                                               (01210) ( DONT CONTINUE
                                               (01211) ( ELSE IF CTR=0 GO TO LABEL1 (AND POP),
                                               (01212) ( ELSE REPEAT CSTACK"        (Decr. CTR
                                               (01213) (
                                               (01214) (ALT. 5, ONLY FOR ONE-WORD "LOOPS":
                                               (01215) ("REPEAT UNTIL CARRY"
                                               (01216) ("REPEAT WHILE CARRY"
                                               (01217) ("REPEAT UNTIL CARRY, THEN GO TO STORED")
                                               (01218) (
                                               (01219) (ALT. 6: (SEQCTRL=F; New threeWayJump)
                                               (01220) (
                                               (01221) ( IF CTR=0 CONTINUE    (And POP)    (END
                                               (01222) ( ELSE GO TO LABEL IF cond,	    (cond
                                               (01223) ( ELSE REPEAT CSTACK;		    (Decr. CTR
                                               (01224) (
                                               (01225) (THE COUNTER IN THE SEQUENCER IS DECREMENTED BY 1 IN ALT. 1, 3, 4 and 6
                                               (01226) (ALT. 3  AND, IF THE CONDITION IS FALSE, ALSO ALT. 4 and 6 WILL JUMP
                                               (01227) (BACK TO THE ADDRESS STORED ON THE CSTACK, IF THE COUNTER IS NOT ZERO.
                                               (01228) (Alt.4 Has condition as highest priority, but ALT.6 has CTR=0 as highest.
                                               (01229) (ALT. 1 IS SIMILAR, EXCEPT THAT THE ADDRESS IS GIVEN IN THE
                                               (01230) (MICROINSTRUCTION.
                                               (01231) (ALT. 2 JUMPS ACCORDING TO THE CSTACK UNTIL THE SPECIFIED CONDITION
                                               (01232) (IS TRUE, REGARDLESS OF THE COUNTER.
                                               (01233) ("CARRY" CAN BE REPLACED BY OTHER CONDITIONS, BUT "CTR=0"
                                               (01234) (CANNOT BE REPLACED.
                                               (01235) (THE COMMENTS "(AND POP)" CAN BE LEFT OUT.
                                               (01236) 'END OF LOOP
                                               (01237) REPEAT:   'REP'
                                               (01238) REPFROM:  'SQCT1C DATA0:=@'
                                               (01239) SQCT1C:   SEQC:=10;
                                               (01240) (UNTIL IS DEFINED ELSEWHERE AS 'FN')
                                               (01241) UNTIL:     'FN'
                                               (01242) FNCTR=0:   ''
                                               (01243) REPPLUS1: 'RPP'                   (LSI
                                               (01244) RPPFROM:  'SQCT1D DATA0:=@'       (LSI
                                               (01245) SQCT1D:   SEQC:=18;		  (LSI
                                               (01246) PROCEED:   SEQC:=2;
                                               (01247) ELSEREPEAT:'ELRE'
                                               (01248) ELRECSTACK:''
                                               (01249) REPCSTACK: SEQC:=12;
                                               (01250) IFCTR=0:   'I0'
                                               (01251) I0CONTINUE:''
                                               (01252) ELSEIF:    'ELIF'
                                               (01253) ELIFCTR=0: 'EI0'
                                               (01254) EI0GO:     'EI0GO'
                                               (01255) EI0GOTO:   'SEQC:=D DATA0:=@'
                                               (01256) ELSEGO:   'ELSEGO'
                                               (01257) ELSEGOTO:  'SEQC:=F DATA0:=@'
                                               (01258) REPUNTIL:  'GT DATA0:=* FN'
                                               (01259) REPWHILE:  'GT DATA0:=* IF'
                                               (01260) WAIT:      'WT'
                                               (01261) WTFOR:     'WTF'
                                               (01262) WTFSPREQ:  'UGT DATA0:=* AUX1:=6'
                                               (01263) THEN:      'ELSE'
                                               (01264) DONT:     'DT'
                                               (01265) DTCONTINUE: CONDFALSE;
                                               (01266) CONTINUE:  ''
                                               (01267) 
                                               (01268) 'ALT. EXIT
                                               (01269) (
                                               (01270) (	  ALTERNATIVE EXIT FROM LOOP OR SUBROUTINE
                                               (01271) (	  ========================================
                                               (01272) (
                                               (01273) (-------------------------------------------------------------------------------
                                               (01274) (
                                               (01275) (EXAMPLE:
                                               (01276) ("POPJUMP LABEL1 IF CARRY"
                                               (01277) (
                                               (01278) (IF THE SPECIFIED CONDITION IS TRUE, THE JUMP WILL BE PERFORMED AND
                                               (01279) (THE CSTACK WILL BE POPPED.
                                               (01280) (USEFUL TOGETHER WITH LOOP ALTERNATIVES 2, 3, AND 4 ABOVE, AND
                                               (01281) (ALSO TO EXIT A SUBROUTINE IN SUCH CASES WHERE A NORMAL RETURN
                                               (01282) (IS NOT WANTED.
                                               (01283) (
                                               (01284) POPJUMP: 'SEQC:=9 DATA0:=@'
                                               (01285) (
                                               (01286) (
                                               (01287) 'CONDITION
                                               (01288) (
                                               (01289) (	  CONDITION CONTROL
                                               (01290) (	  =================
                                               (01291) (
                                               (01292) (-------------------------------------------------------------------------------
                                               (01293) (NOTE:
                                               (01294) (1)  WRITE "IF ZERO", "IF NOT ZERO" ETC.
                                               (01295) (2)  "UNCOND" IS DEFAULT (CAN BE LEFT OUT)
                                               (01296) (3)  SOME OF THE SEQUENCER FUNCTIONS ARE UNCONDITIONAL. THUS,
                                               (01297) (    "IF .." OR "IF NOT .." SHOULD NOT BE USED WITH:
                                               (01298) (      "PUSH CSTACK" (BUT CAN BE USED WITH "..& PUSH CSTACK")
                                               (01299) (      "REPEAT FROM .."
                                               (01300) (      "REPEAT CSTACK"
                                               (01301) (      "STORE LOOP COUNT..", "STORE LABEL..", AND "LOAD CTR FROM..",
                                               (01302) (         IF NOT USING "..& PUSH CSTACK"
                                               (01303) (
                                               (01304) (-------------------------------------------------------------------------------
                                               (01305) (
                                               (01306) IF:        'IF'
                                               (01307) IFNOT:     'FN'
                                               (01308) IFZERO:    COND:=00 CPOL:=0;	      (ZERO FLIPFLOP
                                               (01309) FNZERO:    COND:=00 CPOL:=1;
                                               (01310) IFCARRY:   COND:=01 CPOL:=0;	      (CARRY FLIPFLOP
                                               (01311) FNCARRY:   COND:=01 CPOL:=1;
                                               (01312) IFFH:	   COND:=02 CPOL:=0;	      (FAST HALFCARRY (FROM BIT 3)
                                               (01313) FNFH:	   COND:=02 CPOL:=1;
                                               (01314) IFNEG:	   COND:=03 CPOL:=0;	      (NEG FLIPFLOP, sign bit
                                               (01315) FNNEG:	   COND:=03 CPOL:=1;
                                               (01316) IFFZ:	   COND:=04 CPOL:=0;	      (FZ
                                               (01317) FNFZ:	   COND:=04 CPOL:=1;
                                               (01318) IFFC:	   COND:=05 CPOL:=0;	      (FC
                                               (01319) FNFC:	   COND:=05 CPOL:=1;
                                               (01320) IFFN:	   COND:=06 CPOL:=0;	      (FN
                                               (01321) FNFN:	   COND:=06 CPOL:=1;
                                               (01322) IFFV:	   COND:=07 CPOL:=0;	      (FV
                                               (01323) FNFV:	   COND:=07 CPOL:=1;
                                               (01324) IFOVERFLOW:COND:=08 CPOL:=0;	      (OVERFLOW FLIPFLOP
                                               (01325) FNOVERFLOW:COND:=08 CPOL:=1;
                                               (01326) IFLESS:	   COND:=09 CPOL:=0;	      (NEG ^ OVERFLOW
                                               (01327) FNLESS:	   COND:=09 CPOL:=1;
                                               (01328) IFPCCY:    COND:=0A CPOL:=0;	      (PROGRAM COUNTER CARRY
                                               (01329) FNPCCY:    COND:=0A CPOL:=1;
                                               (01330) IFLINK:    COND:=0B CPOL:=0;	      (LINK FLIPFLOP
                                               (01331) FNLINK:    COND:=0B CPOL:=1;
                                               (01332) IFYREGODD: COND:=0C CPOL:=0;	      (ODD PARITY (Previous Y!)
                                               (01333) IFYREGEVEN: COND:=0C CPOL:=1;	      (EVEN PARITY (Previous Y!)
                                               (01334) IFFL:	   COND:=0D CPOL:=0;	      (FN ^ FV
                                               (01335) FNFL:	   COND:=0D CPOL:=1;
                                               (01336) IFQLSB:    COND:=0E CPOL:=0;	      (Q-0 FROM SHIFT ,UTAN MELLAN LAGR
                                               (01337) FNQLSB:    COND:=0E CPOL:=1;
                                               (01338) CONDFALSE: COND:=0F CPOL:=0;          (USED BY DON'T CONTINUE
                                               (01339) UNCOND:    COND:=0F CPOL:=1;	      (UNCONDITIONALLY
                                               (01340) (
                                               (01341) ' CONDITION SELECT cont.
                                               (01342) (
                                               (01343) IFDSXFC:   COND:=10 CPOL:=0;	      (FC ^ (D bit 7 in previous cycle)
                                               (01344) FNDSXFC:   COND:=10 CPOL:=1;
                                               (01345) IFYREGBITSET: COND:=11 CPOL:=0;	      (Bit test on Y-bus (Previous Y!)
                                               (01346) FNYREGBITSET: COND:=11 CPOL:=1;
                                               (01347) IFPSCAFU:  COND:=12 CPOL:=0;	      (Pstack almost full (PSCTR = 00000xxx)
                                               (01348) FNPSCAFU:  COND:=12 CPOL:=1;
                                               (01349) IFPSCFULL: COND:=13 CPOL:=0;	      (Pstack Full (PSCTR = 00000000)
                                               (01350) FNPSCFULL: COND:=13 CPOL:=1;
                                               (01351) IFPSCAEM:  COND:=14 CPOL:=0;	      (Pstack Almost Empty (PSCTR = 11111xxx)
                                               (01352) FNPSCAEM:  COND:=14 CPOL:=1;
                                               (01353) IFPSCEM:   COND:=15 CPOL:=0;	      (Pstack Empty (PSCTR = 11111111)
                                               (01354) FNPSCEM:   COND:=15 CPOL:=1;
                                               (01355) IFCTREQ0:  COND:=16 CPOL:=0;	      (IF COUNTER IN SEQUENCER = 0
                                               (01356) FNCTREQ0:  COND:=16 CPOL:=1;
                                               (01357) IFGREATER: COND:=17 CPOL:=0;	      (!(NEG ^ OVERFLOW) & !ZERO
                                               (01358) FNGREATER: COND:=17 CPOL:=1;
                                               (01359) IFSPREQ:   COND:=18 CPOL:=1;	      (SP REQUEST: ORDER OR DATA TO CU
                                               (01360) FNSPREQ:   COND:=18 CPOL:=0;
                                               (01361) IFSPACK:   COND:=19 CPOL:=1;	      (SP ACKNOWLEDGE OF CALL FROM CU
                                               (01362) FNSPACK:   COND:=19 CPOL:=0;
                                               (01363) IFFG:	   COND:=1A CPOL:=0;	      (!(FN ^ FV) & !FZ
                                               (01364) FNFG:	   COND:=1A CPOL:=1;
                                               (01365) IFABOVE:   COND:=1B CPOL:=0;	      (CARRY & !ZERO
                                               (01366) FNABOVE:   COND:=1B CPOL:=1;
                                               (01367) IFSPECIAL: COND:=1C CPOL:=0;	      (SPECIAL CONDITION (FLIPFLOP)
                                               (01368) FNSPECIAL: COND:=1C CPOL:=1;
                                               (01369) IFYREGEQNEG:  COND:=1D CPOL:=0;	      (Ybus = NEG FlipFlop (Previous Y!)
                                               (01370) FNYREGEQNEG:  COND:=1D CPOL:=1;
                                               (01371) IFFA:	   COND:=1E CPOL:=0;          (FC & !FZ
                                               (01372) FNFA:	   COND:=1E CPOL:=1;
                                               (01373) IFADLCY:   COND:=1F CPOL:=0;          (ADL wrap indicator
                                               (01374) FNADLCY:   COND:=1F CPOL:=1;
                                               (01375) (
                                               (01376) 'GMEM SOURCE AND DESTINATION DEFINITIONS
                                               (01377) (
                                               (01378) (
                                               (01379) (	  GMEM SOURCE & DESTINATION
                                               (01380) (	  =========================
                                               (01381) (
                                               (01382) (
                                               (01383) (-------------------------------------------------------------------------------
                                               (01384) (Use these definitions to assign to the GAS fields separately
                                               (01385) (when the usual definitions (like DSOURCE MSTACK, WRITE SB) are
                                               (01386) (unsuitable.
                                               (01387) (
                                               (01388) GSOURCE:  'GS'
                                               (01389) GDEST:    'GD'
                                               (01390) (
                                               (01391) GSGR:        GASS:=0; (GENERAL REGISTER USING B,R AS POINTER
                                               (01392) GSSB:        GASS:=1; (STRING BUFFER, USING SBCTR AS POINTER
                                               (01393) GSMSTACK:    GASS:=2; (MSTACK, USING MSCTR AS POINTER
                                               (01394) GSPSTACK:    GASS:=3; (PSTACK, USING PSCTR AS POINTER
                                               (01395) (GSLSTACK:   GASS:=1; (LSTACK, assigned to STRING BUFFER COUNTER!!!
                                               (01396) GSLSTACK:    GASS:=3; (LSTACK, assigned to PSTACK COUNTER!!!
                                               (01397) GSRSTACK:    GASS:=2; (RSTACK, assigned to MSTACK COUNTER!!!
                                               (01398) (
                                               (01399) GDGR:        GASD:=0; (GENERAL REGISTER USING B,R AS POINTER
                                               (01400) GDSB:        GASD:=1; (STRING BUFFER, USING SBCTR AS POINTER
                                               (01401) GDMSTACK:    GASD:=2; (MSTACK, USING MSCTR AS POINTER
                                               (01402) GDPSTACK:    GASD:=3; (PSTACK, USING PSCTR AS POINTER
                                               (01403) (GDLSTACK:   GASD:=1; (LSTACK, assigned to STRING BUFFER COUNTER!!!
                                               (01404) GDLSTACK:    GASD:=3; (LSTACK, assigned to PSTACK COUNTER!!!
                                               (01405) GDRSTACK:    GASD:=2; (RSTACK, assigned to MSTACK COUNTER!!!
                                               (01406) (
                                               (01407) (
                                               (01408) 'D-BUS SOURCE DEFINITIONS
                                               (01409) (
                                               (01410) (
                                               (01411) (	  D-BUS SOURCE
                                               (01412) (	  ============
                                               (01413) (
                                               (01414) (
                                               (01415) (-------------------------------------------------------------------------------
                                               (01416) (
                                               (01417) DSOURCE:  'DS'
                                               (01418) (
                                               (01419) DSCONSTANT:  'MIFORM:=0 DATA1:='   (IMMEDIATE DATA COMBINED OF DS AND MBMOP.
                                               (01420) 				   (CAN JUMP SIMULTANEOUSLY WITHIN 4096 ADDR.
                                               (01421) DSLABEL:     'MIFORM:=0 DATA1:=@'  (Note! only short labels shuld be defined.
                                               (01422) (-------------------------------------------------------------------------------
                                               (01423) (
                                               (01424) (Y-BUS SOURCES, ALL USE THE PREVIOUS Y BUS VALUE
                                               (01425) (
                                               (01426) DSYREG:	     DS:=4;
                                               (01427) DSYREGSWAPPED:  DS:=3;		   (Y WITH BITS 7..4 AND 3..0 INTERCHANGED
                                               (01428) (				    Y: 76543210,  D: 32107654
                                               (01429) DSYREGFLIPPED:  DS:=B;		   (Y WITH BITS IN REVERSE ORDER
                                               (01430) (				    Y: 76543210,  D: 01234567
                                               (01431) (-------------------------------------------------------------------------------
                                               (01432) (
                                               (01433) (SOURCES FROM OUTSIDE CHIP
                                               (01434) (
                                               (01435) DSMEM:       DS:=8;		   (DATA FROM PRIMARY MEMORY
                                               (01436) DSINDATA:    DS:=9;		   (DATA FROM I/O UNITS
                                               (01437) DSSP:        DS:=D;		   (DATA FROM PC VIA SERIAL PORT
                                               (01438) (-------------------------------------------------------------------------------
                                               (01439) (
                                               (01440) (SOURCES FROM ENGINES AND DFM
                                               (01441) ( This should match what is in the simulator constants.
                                               (01442) DSMAC_ALL:	 DS4:=1, DS:=0;		( 0x10
                                               (01443) DSDFM:       DS4:=1, DS:=1;     ( 0x11
                                               (01444) DSID_NUM:    DS4:=1, DS:=2;     ( 0x12
                                               (01445) 
                                               (01446) 
                                               (01447) (
                                               (01448) (SOURCES FROM GENERAL PORTS
                                               (01449) (NOTE: CAN NOT SIMULTANEOUSLY SPECIFY AN "A" OPERAND
                                               (01450) (
                                               (01451) DSCPORT:     'DSCPORT'
                                               (01452) DSDPORT:     'DSDPORT'
                                               (01453) DSPORT:      DS:=E;		   (Data from general port, source specified with AADDR
                                               (01454) DSCPORTA:    DSPORT A:=00;	   (Data from configuration reg of general port A
                                               (01455) DSCPORTB:    DSPORT A:=01;	   (Data from configuration reg of general port B
                                               (01456) DSCPORTC:    DSPORT A:=02;	   (Data from configuration reg of general port C
                                               (01457) DSCPORTD:    DSPORT A:=03;	   (Data from configuration reg of general port D
                                               (01458) DSCPORTE:    DSPORT A:=04;	   (Data from configuration reg of general port E
                                               (01459) DSCPORTF:    DSPORT A:=05;	   (Data from configuration reg of general port F
                                               (01460) DSCPORTG:    DSPORT A:=06;	   (Data from configuration reg of general port G
                                               (01461) DSCPORTH:    DSPORT A:=07;	   (Data from configuration reg of general port H
                                               (01462) DSCPORTI:    DSPORT A:=08;	   (Data from configuration reg of general port I
                                               (01463) DSCPORTJ:    DSPORT A:=09;	   (Data from configuration reg of general port J
                                               (01464) 
                                               (01465) DSDPORTA:    DSPORT A:=10;	   (Data from input of general port A
                                               (01466) DSDPORTB:    DSPORT A:=11;	   (Data from input of general port B
                                               (01467) DSDPORTC:    DSPORT A:=12;	   (Data from input of general port C
                                               (01468) DSDPORTD:    DSPORT A:=13;	   (Data from input of general port D
                                               (01469) DSDPORTE:    DSPORT A:=14;	   (Data from input of general port E
                                               (01470) DSDPORTF:    DSPORT A:=15;	   (Data from input of general port F
                                               (01471) DSDPORTG:    DSPORT A:=16;	   (Data from input of general port G
                                               (01472) DSDPORTH:    DSPORT A:=17;	   (Data from input of general port H
                                               (01473) DSDPORTI:    DSPORT A:=18;	   (Data from input of general port I
                                               (01474) DSDPORTJ:    DSPORT A:=19;	   (Data from input of general port J
                                               (01475) 
                                               (01476) DSCPORTK:    DSPORT A:=0A;	   (Data from configuration reg of general port K
                                               (01477) DSCPORTL:    DSPORT A:=0B;	   (Data from configuration reg of general port L
                                               (01478) DSCPORTM:    DSPORT A:=0C;	   (Data from configuration reg of general port M
                                               (01479) DSCPORTN:    DSPORT A:=0D;	   (Data from configuration reg of general port N
                                               (01480) DSCPORTO:    DSPORT A:=0E;	   (Data from configuration reg of general port O
                                               (01481) DSCPORTP:    DSPORT A:=0F;	   (Data from configuration reg of general port P
                                               (01482) DSDPORTK:    DSPORT A:=1A;	   (Data from input of general port K
                                               (01483) DSDPORTL:    DSPORT A:=1B;	   (Data from input of general port L
                                               (01484) DSDPORTM:    DSPORT A:=1C;	   (Data from input of general port M
                                               (01485) DSDPORTN:    DSPORT A:=1D;	   (Data from input of general port N
                                               (01486) DSDPORTO:    DSPORT A:=1E;	   (Data from input of general port O
                                               (01487) DSDPORTP:    DSPORT A:=1F;	   (Data from input of general port P
                                               (01488) (-------------------------------------------------------------------------------
                                               (01489) 'GMEM POINTERS AND SOURCES
                                               (01490) (		GMEM
                                               (01491) (	       +-----+
                                               (01492) (  B,R	 --->  !     !
                                               (01493) (	       !-----!
                                               (01494) (  SBCTR --->  !     !
                                               (01495) (	       !-----!
                                               (01496) (  MSCTR --->  !     !
                                               (01497) (	       !-----!
                                               (01498) (  PSCTR --->  !     !
                                               (01499) (	       +-----+
                                               (01500) (
                                               (01501) (
                                               (01502) (GMEM COUNTERS
                                               (01503) (
                                               (01504) DSGCTR:      DS:=6;		(GASS has to be specified separately
                                               (01505) DSBR:        DS:=6 GASS:=0;	(BLOCK AND REGISTER COUNTERS
                                               (01506) DSSBCTR:     DS:=6 GASS:=1;	(STRING BUFFER COUNTER
                                               (01507) DSMSCTR:     DS:=6 GASS:=2;	(MSTACK COUNTER
                                               (01508) DSPSCTR:     DS:=6 GASS:=3;	(PSTACK COUNTER
                                               (01509) (DSLSCTR:    DS:=6 GASS:=1;	(LSTACK COUNTER, assigned to STRING BUFFER COUNTER!!!
                                               (01510) DSLSCTR:     DS:=6 GASS:=3;	(LSTACK COUNTER, assigned to PSTACK COUNTER!!!
                                               (01511) DSRSCTR:     DS:=6 GASS:=2;	(RSTACK COUNTER, assigned to MSTACK COUNTER!!!
                                               (01512) (-------------------------------------------------------------------------------
                                               (01513) (
                                               (01514) (
                                               (01515) (
                                               (01516) (GMEM
                                               (01517) (
                                               (01518) DSG:        DS:=C;         (GMEM (from Y), GASS specified separately
                                               (01519) DSGR:       DS:=C GASS:=0; (GENERAL REGISTER USING B,R AS POINTER
                                               (01520) DSSB:       DS:=C GASS:=1; (STRING BUFFER, USING SBCTR AS POINTER
                                               (01521) DSMSTACK:   DS:=C GASS:=2; (MSTACK, USING MSCTR AS POINTER
                                               (01522) DSPSTACK:   DS:=C GASS:=3; (PSTACK, USING PSCTR AS POINTER
                                               (01523) (DSLSTACK:  DS:=C GASS:=1; (LSTACK, USING RSCTR AS POINTER, assigned to STRING BUFFER!!!
                                               (01524) DSLSTACK:   DS:=C GASS:=3; (LSTACK, USING LSCTR AS POINTER, assigned to PSTACK
                                               (01525) DSRSTACK:   DS:=C GASS:=2; (RSTACK, USING LSCTR AS POINTER, assigned to MSTACK
                                               (01526) 
                                               (01527) (-------------------------------------------------------------------------------
                                               (01528) 'D-BUS SOURCE DEFINITIONS CONT.
                                               (01529) (OTHER DBUS SOURCES
                                               (01530) (                                  (Bit's:      7 6 5 4  3 2 1 0
                                               (01531) DSALLFLAGS:  DS:=1;		   (Flag:	X F V N  L Z P C
                                               (01532) (						  V
                                               (01533) DSMBM:	     DS:=5;		   (Data from Multiplier ,Barrel shifter
                                               (01534) DSCU:	     DS:=A;		   (Data from SEQUENCER L2910
                                               (01535) DSCRB0:      DS:=7 A:=0;
                                               (01536) DSCRB1:      DS:=7 A:=1;
                                               (01537) DSCRB2:      DS:=7 A:=2;
                                               (01538) DSCRB3:      DS:=7 A:=3;
                                               (01539) DSCRB4:      DS:=7 A:=4;
                                               (01540) DSCRB5:      DS:=7 A:=5;
                                               (01541) DSCRB6:      DS:=7 A:=6;
                                               (01542) DSCRB7:      DS:=7 A:=7;
                                               (01543) DSCRB8:      DS:=7 A:=8;
                                               (01544) DSCRB9:      DS:=7 A:=9;
                                               (01545) DSCRBA:      DS:=7 A:=A;
                                               (01546) DSCRBB:      DS:=7 A:=B;
                                               (01547) DSCRBC:      DS:=7 A:=C;
                                               (01548) DSCRBD:      DS:=7 A:=D;
                                               (01549) DSCRBE:      DS:=7 A:=E;
                                               (01550) DSCRBF:      DS:=7 A:=F;
                                               (01551) DSRTC:       DS:=7 A:=F;
                                               (01552) DSLATCH:     DS:=2;		   (LATCH LOADED FROM D-BUS, Y-BUS or GMEM
                                               (01553) DSDSIGN:     DS:=0;		   (All bits equal to D bus bit 7 in last cycle
                                               (01554) (-------------------------------------------------------------------------------
                                               (01555) (RETURNS PRIORITY ENCODING OF PREVIOUS Y BUS VALUE
                                               (01556) DSYREGPRIO:     DS:=F;    (Encode Ybus priority, D-bit:7..3=0, 2..0 = prio Not.
                                               (01557) 				( ..... Y-bus .........   D-bus  YEQNEG   NEG_FF
                                               (01558) 				( -hex----------bin----   -----  ------   ------
                                               (01559) 				( 00          0000 0000    07	  True	    0
                                               (01560) 				( 01          0000 0001    07	  False	    "
                                               (01561)                                 ( 02-03       0000 001X    06       "       "
                                               (01562)                                 ( 04-07       0000 01XX    05       "       "
                                               (01563)                                 ( 08-0F       0000 1XXX    04       "       "
                                               (01564)                                 ( 10-1F       0001 XXXX    03       "       "
                                               (01565)                                 ( 20-3F       001X XXXX    02       "       "
                                               (01566)                                 ( 40-7F       01XX XXXX    01       "       "
                                               (01567)                                 ( 80-FF       1XXX XXXX    00       "       "
                                               (01568) 				(-----------------------------------------------
                                               (01569) 				( FF          1111 1111    07	   True     1
                                               (01570) 				( FE          1111 1110    07	   False    "
                                               (01571)                                 ( FD-FC       1111 110X    06       "       "
                                               (01572)                                 ( FB-F8       1111 10XX    05       "       "
                                               (01573)                                 ( F7-F0       1111 0XXX    04       "       "
                                               (01574)                                 ( EF-E0       1110 XXXX    03       "       "
                                               (01575)                                 ( DF-C0       110X XXXX    02       "       "
                                               (01576)                                 ( BF-80       10XX XXXX    01       "       "
                                               (01577)                                 ( 7F-00       0XXX XXXX    00       "       "
                                               (01578) (-------------------------------------------------------------------------------
                                               (01579) 'D-BUS SOURCE DEFINITIONS CONT.
                                               (01580) (
                                               (01581) (Additional functions for SEQ. operations: 1, F, and 19.
                                               (01582) (
                                               (01583) (DEFAULT:    DS:=8;		   (Data From MEM
                                               (01584) (
                                               (01585) DSCSTACKL:   DSCU CPOL:=0 AUX2:=1 MAP:=0 ;(8 lsb of Stack in SEQUENCER
                                               (01586) DSCSTACKH:   DSCU CPOL:=0 AUX2:=1 MAP:=8 ;(6 msb of Stack + StackCTRZeroNOT:b7
                                               (01587) DSCTRL:      DSCU CPOL:=0 AUX2:=1 MAP:=4 ;(8 lsb of counter in SEQUENCER
                                               (01588) DSCTRH:      DSCU CPOL:=0 AUX2:=1 MAP:=C ;(4 msb of counter in SEQUENCER
                                               (01589) DSDATA0:    'DSCU CPOL:=0 AUX2:=0 DATA0:='  (DATA0, AD 0..7, old IMMDATA
                                               (01590) DSLZPCIRQ:   DSCU CPOL:=0 AUX2:=2 MAP:=C ;(FLG:LINK,ZERO,PCCY,CARRY,TRACE,IRQ(2:0)
                                               (01591) DSIR:	     DSCU CPOL:=0 AUX2:=2 MAP:=D ;(Instuction Register
                                               (01592) DSSPCMD:     DSCU CPOL:=0 AUX2:=2 MAP:=F ;(SP data to CU (WDCU)
                                               (01593) DSD:	     DSCU CPOL:=1;		  (
                                               (01594) (
                                               (01595) DSOP:	     DSD COND4:=1 DA0H:=0, MAP:=D BITMSK:=F;  (IR BIT 7654
                                               (01596) DSARG:	     DSD COND4:=0 DA0H:=0, MAP:=D BITMSK:=F;  (IR BIT 3210
                                               (01597) DSFLAGS:     DSD COND4:=1 DA0H:=0, MAP:=C BITMSK:=5;  (b2= ZERO, b0= CARRY
                                               (01598) DSIRQ:	     DSD COND4:=0 DA0H:=0, MAP:=C BITMSK:=7;  (CU IRPTREQ CODE
                                               (01599) DSIRA2:	     DSD COND4:=1 DA0H:=0, MAP:=8 BITMSK:=4;  (IRA2, returns PSCTR carry in bit 2.
                                               (01600) 						      (Carry will be affected by INCREMENT,
                                               (01601) 						      (DECREMENT, LOAD, PUSH and POP. It
                                               (01602) 						      (will be set when incrementing to 00,
                                               (01603) 						      (or when decremented to anything other
                                               (01604) 						      (than 00. Otherwise it will be cleared.
                                               (01605) DSISAMODE:   DSD COND4:=0 DA0H:=0, MAP:=C BITMSK:=8;  (Instruction decoding mode
                                               (01606) (						      (returns trace flag in bit 3!
                                               (01607) (
                                               (01608) (
                                               (01609) (
                                               (01610) (  Definition of Interrupt Priority Encoder in GPU:
                                               (01611) (
                                               (01612) (			INTERRUPT:  ENDDECODE:	  DSOURCE IRQ:
                                               (01613) (			----------  ----------	  ------------
                                               (01614) (   Highest Priority :	SPREQ	       1/9	       1
                                               (01615) (   ----------------	FWI	       2/A	       2
                                               (01616) (			CLKREQ	       3/B	       3
                                               (01617) (			DMA1 (HDA)     4/C	       4
                                               (01618) (			DMA0 spare     5/D	       5
                                               (01619) (   Lowest Priority :	PCCY	       6/E	       6
                                               (01620) (   ---------------
                                               (01621) (
                                               (01622) 'MULTIPLIER FUNCTIONS
                                               (01623) (
                                               (01624) (All the multiplier, shift and mask functions are DISABLED when doing
                                               (01625) (DSOURCE CONSTANT...XXXXXXXX
                                               (01626) (
                                               (01627) (
                                               (01628) (	  MASK FUNCTIONS
                                               (01629) (	  ==============
                                               (01630) (
                                               (01631) (None of these functions load ACK
                                               (01632) (
                                               (01633) LANDD0:     MBMOP:=0 ; (  LATCH "AND" DATA0
                                               (01634) ROTL1ANDD0: MBMOP:=1 ; (  (ROT (LATCH) 1 POS LEFT) "AND" DATA0 (* 2)
                                               (01635) ROTL2ANDD0: MBMOP:=2 ; (  (ROT (LATCH) 2 POS LEFT) "AND" DATA0 (* 4)
                                               (01636) ROTL3ANDD0: MBMOP:=3 ; (  (ROT (LATCH) 3 POS LEFT) "AND" DATA0 (* 8)
                                               (01637) ROTL4ANDD0: MBMOP:=4 ; (  (ROT (LATCH) 4 POS LEFT) "AND" DATA0 (* 16)
                                               (01638) ROTL5ANDD0: MBMOP:=5 ; (  (ROT (LATCH) 5 POS LEFT) "AND" DATA0 (* 32)
                                               (01639) ROTL6ANDD0: MBMOP:=6 ; (  (ROT (LATCH) 6 POS LEFT) "AND" DATA0 (* 64)
                                               (01640) ROTL7ANDD0: MBMOP:=7 ; (  (ROT (LATCH) 7 POS LEFT) "AND" DATA0 (* 128)
                                               (01641) YREGORD0:   MBMOP:=8 ; (  YREG "OR" DATA0 (PREVIOUS Y BUS VALUE)
                                               (01642) ROTLATCH:   MBMOP:=9 ; (  ROT LATCH	  (rot controlled by NREG
                                               (01643) MASKANDYREG: MBMOP:=A ; (  MASK "AND" YREG (mask controlled by NREG
                                               (01644) (			  (PREVIOUS Y BUS VALUE)
                                               (01645) (
                                               (01646) (
                                               (01647) (
                                               (01648) (	  SHIFT FUNCTIONS
                                               (01649) (	  ===============
                                               (01650) (
                                               (01651) (Both these functions load ARL (ACK(7:0))
                                               (01652) (Rotation count and mask are controlled by NREG
                                               (01653) (
                                               (01654) FIRSTSHIFT: MBMOP:=B ; (  MBM out: MASK "AND" ROT(LATCH)
                                               (01655) (                         (  To ARL : MASKn "AND" ROT(LATCH)
                                               (01656) (
                                               (01657) NEXTSHIFT:  MBMOP:=C ; (  MBM out: (MASK "AND" ROT(LATCH)) "OR" ARL
                                               (01658) (                         (  To ARL : MASKn "AND" ROT(LATCH)
                                               (01659) (
                                               (01660) ( "FIRSTSHIFT" (MBMOP=B) is used as first step in a multibyte shift
                                               (01661) ( "NEXTSHIFT"  (MBMOP=C) is used in following steps.
                                               (01662) (
                                               (01663) (
                                               (01664) (
                                               (01665) (	  MULTIPLICATION FUNCTIONS
                                               (01666) (	  ========================
                                               (01667) (
                                               (01668) (All these functions load ACK
                                               (01669) (
                                               (01670) MUL1:	    MBMOP:=E ; (  MBM out: Zero
                                               (01671) (			  (  To ACK : MUL(LATCH*Y)
                                               (01672) (
                                               (01673) MUL2:	    MBMOP:=D ; (  MBM out: ARL
                                               (01674) (			  (  To ACK : ACK/256 + MUL(LATCH*Y)
                                               (01675) (
                                               (01676) MUL3:	    MBMOP:=F ; (  MBM out: Zero
                                               (01677) (			  (  To ACK : ACK + MUL(LATCH*Y)
                                               (01678) (
                                               (01679) UNSIGNED:   MAPR:=0;	(Both factors unsigned
                                               (01680) LSIGNED:    MAPR:=4;    (LATCH signed
                                               (01681) YSIGNED:    MAPR:=8;    (Y signed
                                               (01682) SIGNED:	    MAPR:=C;    (Both factors signed
                                               (01683) (
                                               (01684) 'Multiplication example
                                               (01685) (
                                               (01686) (Ex: Mult. of two 4-byte numbers, a3a2a1a0 * b3b2b1b0 = c7c6c5c4c3c2c1c0.
                                               (01687) (
                                               (01688) (	ALU op. 	MBM op.   Prod. out	ACK
                                               (01689) (	------- 	-------   ---------	---
                                               (01690) (	a0 -> LATCH	-			-
                                               (01691) (	b0 -> Y 	MUL1			a0b0
                                               (01692) (	b1 -> Y 	MUL2	  c0		a0b1
                                               (01693) (       a1 -> LATCH     -                        "
                                               (01694) (	b0 -> Y 	MUL3			a0b1 + a1b0
                                               (01695) (	b1 -> Y 	MUL2	  c1		a1b1
                                               (01696) (       a0 -> LATCH     -                        "
                                               (01697) (	b2 -> Y 	MUL3			a1b1 + a0b2
                                               (01698) (       a2 -> LATCH     -                        "
                                               (01699) (	b0 -> Y 	MUL3			a1b1 + a0b2 + a2b0
                                               (01700) (	b1 -> Y 	MUL2	  c2		a2b1
                                               (01701) (       a0 -> LATCH     -                        "
                                               (01702) (	b3 -> Y 	MUL3			a2b1 + a0b3
                                               (01703) (       a1 -> LATCH     -                        "
                                               (01704) (	b2 -> Y 	MUL3			a2b1 + a0b3 + a1b2
                                               (01705) (       a3 -> LATCH     -                        "
                                               (01706) (	b0 -> Y 	MUL3			a2b1 + a0b3 + a1b2 + a3b0
                                               (01707) (	b1 -> Y 	MUL2	  c3		a3b1
                                               (01708) (       a1 -> LATCH     -                        "
                                               (01709) (	b3 -> Y 	MUL3			a3b1 + a1b3
                                               (01710) (       a2 -> LATCH     -                        "
                                               (01711) (	b2 -> Y 	MUL3			a3b1 + a1b3 + a2b2
                                               (01712) (	b3 -> Y 	MUL2	  c4		a2b3
                                               (01713) (       a3 -> LATCH     -                        "
                                               (01714) (	b2 -> Y 	MUL3			a2b3 + a3b2
                                               (01715) (	b3 -> Y 	MUL2	  c5		a3b3
                                               (01716) (	0  -> Y 	MUL2	  c6
                                               (01717) (			MUL2	  c7
                                               (01718) (
                                               (01719) (
                                               (01720) 'Multiplication example
                                               (01721) (
                                               (01722) (This is the order in which the above multiplication is carried out:
                                               (01723) (
                                               (01724) (		      a3  a2  a1  a0
                                               (01725) (     * 	      b3  b2  b1  b0
                                               (01726) (     ------------------------------
                                               (01727) (				a0b0
                                               (01728) (			    a0b1
                                               (01729) (			    a1b0
                                               (01730) (			a1b1
                                               (01731) (			a0b2
                                               (01732) (			a2b0
                                               (01733) (		    a2b1
                                               (01734) (		    a0b3
                                               (01735) (		    a1b2
                                               (01736) (		    a3b0
                                               (01737) (		a3b1
                                               (01738) (		a1b3
                                               (01739) (		a2b2
                                               (01740) (	    a2b3
                                               (01741) (	    a3b2
                                               (01742) (     + a3b3
                                               (01743) (     ------------------------------
                                               (01744) (     c7  c6  c5  c4  c3  c2  c1  c0
                                               (01745) (
                                               (01746) (
                                               (01747) 'Truth Table for MASK
                                               (01748) (
                                               (01749) (
                                               (01750) (  NREG:    MASK 7..0:			 FUNCTION
                                               (01751) (  -----    ----------			---------
                                               (01752) (  0000     11111111	 No shift	   * 1
                                               (01753) (  0001     11111110	 Left shift	   * 2
                                               (01754) (  0010     11111100          "            * 4
                                               (01755) (  0011     11111000          "            * 8
                                               (01756) (  0100     11110000          "            * 16
                                               (01757) (  0101     11100000          "            * 32
                                               (01758) (  0110     11000000          "            * 64
                                               (01759) (  0111     10000000          "            * 128
                                               (01760) (  1000     00000000	 Right shift	   / 256
                                               (01761) (  1001     00000001          "            / 128
                                               (01762) (  1010     00000011          "            / 64
                                               (01763) (  1011     00000111          "            / 32
                                               (01764) (  1100     00001111          "            / 16
                                               (01765) (  1101     00011111          "            / 8
                                               (01766) (  1110     00111111          "            / 4
                                               (01767) (  1111     01111111          "            / 2
                                               (01768) (
                                               (01769) (
                                               (01770) ( NOTE!!!   NREG is LOADED from Y-bus.........
                                               (01771) (
                                               (01772) (
                                               (01773) 'D and Y bus bit test
                                               (01774) ( D and Y bus bit test		   define by condition select if Y or D.
                                               (01775) ( ====================
                                               (01776) (
                                               (01777) TESTBIT:    'TESTBIT'
                                               (01778) TESTBIT0:   MBMOP:=0 ;	   (Bit 0 in both Y and D busses are selected
                                               (01779) TESTBIT1:   MBMOP:=1 ;          (Bit 1            ""
                                               (01780) TESTBIT2:   MBMOP:=2 ;          (Bit 2            ""
                                               (01781) TESTBIT3:   MBMOP:=3 ;          (Bit 3            ""
                                               (01782) TESTBIT4:   MBMOP:=4 ;          (Bit 4            ""
                                               (01783) TESTBIT5:   MBMOP:=5 ;          (Bit 5            ""
                                               (01784) TESTBIT6:   MBMOP:=6 ;          (Bit 6            ""
                                               (01785) TESTBIT7:   MBMOP:=7 ;          (Bit 7            ""
                                               (01786) TESTBITLABEL: 'MBMOP:=@'	   (!!! Label must be in the range 0-7 !!!
                                               (01787) (
                                               (01788) 'ALU-FUNCTIONS
                                               (01789) (
                                               (01790) (
                                               (01791) (	   ALU FUNCTION CONTROL
                                               (01792) (	  =====================
                                               (01793) (
                                               (01794) (-------------------------------------------------------------------------------
                                               (01795) (
                                               (01796) (  ALU FUNCTION WITHOUT SOURCE OPERANDS:  ZERO, MINUS1
                                               (01797) (
                                               (01798) ZERO:	  ALUF:=4 ALUS:=5 CIN:=0;	    (Y = 00, CARRYOUT = 0
                                               (01799) (SIMZERO:  A:=0, B:=0, BA, ALUF:=6, CIN:=0;  (Y = 00, CARRYOUT = 0, FOR SIMULATION
                                               (01800) MINUS1:   A:=0, B:=0, BA, ALUF:=1, CIN:=0;  (Y = FF, CARRYOUT = 0
                                               (01801)                                             (NOTE: SEE ALSO "FF TO .."
                                               (01802) (
                                               (01803) (---------
                                               (01804) ( ALU FUNCTIONS WITH ONE OPERAND: PASS, TEST, INVERT, NEG, INCR, DECR,
                                               (01805) (								 ADDCARRY
                                               (01806) (
                                               (01807) ( N O T E !!
                                               (01808) ( FUNCTIONS MARKED '(**' ARE COMMENTED OUT TO SAVE SPACE AT ASSEMBLY
                                               (01809) ( TIME, IF NEEDED THROW AWAY COMMENT DELIMITER AND HOPEFULLY IF
                                               (01810) ( THERE IS SPACE, YOU MAY USE IT.
                                               (01811) (
                                               (01812) (
                                               (01813) YTEST:	  'YTEST'		  (Write 'YTEST & PASS' or 'Y&PASS'!
                                               (01814) YTEST&:	  'Y&'
                                               (01815) Y&PASS:	  ALUF:=3;		  (Pass operand unchanged, Z,N,P flags taken
                                               (01816) (                                 (from the Y bus, C,V zero, H undefined. This
                                               (01817) (				  (is true for both fast flags and loaded flags.
                                               (01818) (
                                               (01819) PASS:	  ALUF:=6;	  	  (Pass operand unchanged, Z,N,P flags taken
                                               (01820) (                                 (from passed value, C,V,H flags undefined. This
                                               (01821) (				  (is true for both fast flags and loaded flags.
                                               (01822) (
                                               (01823) TEST:	  ALUF:=0, CIN:=0;	  (Pass operand unchanged, Z,N,P flags taken
                                               (01824) (                                 (from passed value, C,V,H flags zero. This
                                               (01825) (				  (is true for both fast flags and loaded flags.
                                               (01826) (
                                               (01827) INVERT:       ALUF:=7;                (ONE'S COMPLEMENT
                                               (01828) INCR:	      ALUF:=0  CIN:=1;	    (ADD ONE
                                               (01829) ADDREGCARRY:  ALUF:=0,	CIN:=3;  (ADD REGISTERED CARRY IN
                                               (01830) ADDFCARRY:    ALUF:=0, CIN:=3;			 (ADD FAST CARRY IN
                                               (01831) 
                                               (01832) NEG:      'NEG'                   (TWO'S COMPLEMENT
                                               (01833) NEGQ:	  ALUF:=2 CIN:=1 ALUS:=5; (-Q
                                               (01834) NEGB:	  ALUF:=2 CIN:=1 ALUS:=4; (-B
                                               (01835) NEGA:	  ALUF:=2 CIN:=1 ALUS:=3; (-A
                                               (01836) NEGD:	  ALUF:=1 CIN:=1 ALUS:=0; (-D
                                               (01837) (
                                               (01838) NEGBORROW:'NEGBW'                 (NEG WITH CIN SPECIFIED SEPARATELY
                                               (01839) (
                                               (01840) NEGBWA: ALUF:=2 ALUS:=3;	  (-A-1+CARRYIN
                                               (01841) NEGBWB: ALUF:=2 ALUS:=4;	  (-B-1+CARRYIN
                                               (01842) NEGBWD: ALUF:=1 ALUS:=0;	  (-D-1+CARRYIN
                                               (01843) (
                                               (01844) DECR:     'DECR'                  (SUBTRACT ONE
                                               (01845) DECRQ:	  ALUF:=1 CIN:=0 ALUS:=5; (Q-1
                                               (01846) DECRB:	  ALUF:=1 CIN:=0 ALUS:=4; (B-1
                                               (01847) DECRA:	  ALUF:=1 CIN:=0 ALUS:=3; (A-1
                                               (01848) DECRD:	  ALUF:=2 CIN:=0 ALUS:=0; (D-1
                                               (01849) 
                                               (01850) (
                                               (01851) (-------------------------------------------------------------------------------
                                               (01852) (LOGIC ALU FUNCTIONS WITH TWO OPERANDS:  AND, 1ANDNOT2, OR, XOR, XNOR
                                               (01853) (
                                               (01854) AND:	ALUF:=4;
                                               (01855) OR:	  ALUF:=3;
                                               (01856) XOR:	ALUF:=6;	(EXCLUSIVE OR
                                               (01857) XNOR: ALUF:=7;      (    "      " , INVERTED
                                               (01858) (
                                               (01859) 1ANDNOT2: '1N2'		(1st operand and not 2nd operand
                                               (01860) 1N2QA:	  ALUF:=5 QA;	(Q and not A
                                               (01861) 1N2BA:	  ALUF:=5 BA;	(B and not A
                                               (01862) 1N2AD:	  ALUF:=5 AD;	(A and not D
                                               (01863) 1N2QD:	  ALUF:=5 QD;	(Q and not D
                                               (01864) (
                                               (01865) (-------------------------------------------------------------------------------
                                               (01866) (ARITHMETIC ALU FUNCTIONS WITH TWO OPERANDS:
                                               (01867) (
                                               (01868) ADD:	  ALUF:=0  CIN:=0;	    (ADD WITH CIN = 0
                                               (01869) SUB:      'SUB'                     (SUB WITH CIN = 1
                                               (01870) SUBBORROW:'SUBBW'                   (SUB WITH CIN SPECIFIED SEPARATELY
                                               (01871) SUBQA:	  1MINUS2 QA;		      (Q-A
                                               (01872) SUBAQ:	  2MINUS1 QA;		      (A-Q
                                               (01873) SUBBA:	  1MINUS2 BA;		      (B-A
                                               (01874) SUBAB:	  2MINUS1 BA;		      (A-B
                                               (01875) SUBAD:	  1MINUS2 AD;		      (A-D
                                               (01876) SUBDA:	  2MINUS1 AD;		      (D-A
                                               (01877) SUBQD:	  1MINUS2 QD;		      (Q-D
                                               (01878) SUBDQ:	  2MINUS1 QD;		      (D-Q
                                               (01879) 1MINUS2:  ALUF:=1 CIN:=1;	    (USED ABOVE
                                               (01880) 2MINUS1:  ALUF:=2 CIN:=1;           (  "   "
                                               (01881) (
                                               (01882) SUBBWQA:    ALUF:=1 QA; 		(Q-A-1+CARRYIN
                                               (01883) SUBBWAQ:    ALUF:=2 QA; 		(A-Q-1+CARRYIN
                                               (01884) SUBBWBA:    ALUF:=1 BA; 		(B-A-1+CARRYIN
                                               (01885) SUBBWAB:    ALUF:=2 BA; 		(A-B-1+CARRYIN
                                               (01886) SUBBWAD:    ALUF:=1 AD; 		(A-D-1+CARRYIN
                                               (01887) SUBBWDA:    ALUF:=2 AD; 		(D-A-1+CARRYIN
                                               (01888) SUBBWQD:    ALUF:=1 QD; 		(Q-D-1+CARRYIN
                                               (01889) SUBBWDQ:    ALUF:=2 QD; 		(D-Q-1+CARRYIN
                                               (01890) SUBBWQ:     ALUF:=1 Q;			(Q-1+CARRYIN
                                               (01891) SUBBWB:     ALUF:=1 B;			(B-1+CARRYIN
                                               (01892) SUBBWA:     ALUF:=1 A;			(A-1+CARRYIN
                                               (01893) SUBBWD:     ALUF:=2 D;			(D-1+CARRYIN
                                               (01894) 
                                               (01895) 'ALU-OPERANDS
                                               (01896) (
                                               (01897) (	  ALU SOURCE OPERAND CONTROL
                                               (01898) (	  ==========================
                                               (01899) (
                                               (01900) (-------------------------------------------------------------------------------
                                               (01901) (OPERANDS FOR THE SINGLE OPERAND FUNCTIONS:
                                               (01902) (
                                               (01903) Q:	  ALUS:=5;
                                               (01904) B:	  ALUS:=4;
                                               (01905) A:	  ALUS:=3;
                                               (01906) D:	  ALUS:=0;
                                               (01907) (
                                               (01908) (OPERANDS FOR THE TWO-OPERAND FUNCTIONS:
                                               (01909) (
                                               (01910) QA:	  ALUS := 7;
                                               (01911) AQ:	  ALUS := 7;
                                               (01912) BA:	  ALUS := 6;
                                               (01913) AB:	  ALUS := 6;
                                               (01914) AD:	  ALUS := 2;
                                               (01915) DA:	  ALUS := 2;
                                               (01916) QD:	  ALUS := 1;
                                               (01917) DQ:	  ALUS := 1;
                                               (01918) (
                                               (01919) (A AND B SOURCES
                                               (01920) (
                                               (01921) ASOURCE:   'A_SRC_HIGH:=0 A:=@'
                                               (01922) BSOURCE:   'B_SRC_HIGH:=0 B:=@'
                                               (01923) ASOURCEU:  'A_SRC_HIGH:=1 A:=@' 
                                               (01924) BSOURCEU:  'B_SRC_HIGH:=1 B:=@' 
                                               (01925) 
                                               (01926) 'CARRY
                                               (01927) (
                                               (01928) (	  CARRY INPUT SELECTOR
                                               (01929) (	  ====================
                                               (01930) (
                                               (01931) (-------------------------------------------------------------------------------
                                               (01932) (NOTE: CARRY-IN IS ALREADY SPECIFIED IN THE DEFINITIONS OF THE
                                               (01933) (NORMAL ADD AND SUB FUNCTIONS ABOVE
                                               (01934) (
                                               (01935) CARRYIN:    'CARRYIN'
                                               (01936) CARRYIN=:   'CYIN='
                                               (01937) CYIN=0:     CIN:=0;	   (CARRYIN = 0
                                               (01938) CYIN=1:     CIN:=1;	   (CARRYIN = 1
                                               (01939) CYIN=C:     CIN:=2;	   (CARRYIN = C
                                               (01940) CYIN=FC:    CIN:=3;	   (CARRYIN = FC
                                               (01941) CYIN=PCCY:  CIN:=0;	   (CARRYIN = PCCY NOTE! CAN ONLY BE USED TOGETHER
                                               (01942) (                          (               WITH: "ADDCARRY" and "BADDR=E(PCH)"
                                               (01943) 'DESTINATION
                                               (01944) (
                                               (01945) (	  ALU INTERNAL DESTINATION CONTROL
                                               (01946) (	  ================================
                                               (01947) (
                                               (01948) (-------------------------------------------------------------------------------
                                               (01949) (
                                               (01950) BDEST:   'B_SRC_HIGH:=0 B:=@'  (NOTE: NOT NEEDED WHEN BSOURCE SPECIFIED)
                                               (01951) BDESTU:   'B_SRC_HIGH:=1 B:=@'  (NOTE: NOT NEEDED WHEN BSOURCE SPECIFIED)
                                               (01952) 
                                               (01953) 
                                               (01954) TO:       RAM BDEST;
                                               (01955) TOU:      RAM BDESTU;
                                               (01956) RESULT:   'RESULT'
                                               (01957) RESULTTO: RAM BDEST;
                                               (01958) RESULTTOU: RAM BDESTU;
                                               (01959) (			      TO Y    TO RAM(B)   TO Q
                                               (01960) QREG:	   ALUD := 1;	      (	F	   -	    F
                                               (01961) RAM:	   ALUD := 3;	      (	F	   F	    -
                                               (01962) RAMATOY:   ALUD := 2;	    (  RAM(A)	   F	    -
                                               (01963) RAMRIGHT:  ALUD := 5;	    (	F	  F/2	    -
                                               (01964) RAMQRIGHT: ALUD := 4;	    (	F	  F/2	    Q/2
                                               (01965) RAMLEFT:   ALUD := 7;	    (	F	  2F	    -
                                               (01966) RAMQLEFT:  ALUD := 6;	    (	F	  2F	    2Q
                                               (01967) 'SHIFTS
                                               (01968) (
                                               (01969) (	  SHIFT INPUT SELECTORS
                                               (01970) (	  =====================
                                               (01971) (
                                               (01972) (-------------------------------------------------------------------------------
                                               (01973) (EXAMPLES: "RAMLEFT WITH SERIAL INPUT = 0"
                                               (01974) (          "RAMQRIGHT, ARITHMETIC"
                                               (01975) (-------------------------------------------------------------------------------
                                               (01976) ( MNEMONIC	       FUNCTION WHEN RIGHTSHIFT    FUNCTION WHEN LEFTSHIFT
                                               (01977) ( --------	       ------------------------    -----------------------
                                               (01978) (			   ,---,       ,---,	     ,---,	 ,---,
                                               (01979) ( SERIAL INPUT = 0	0->! R !    0->! Q !	     ! R !<-0	 ! Q !<-0
                                               (01980) (                          '---'       '---'         '---'       '---'
                                               (01981) (			   ,---,       ,---,	     ,---,	 ,---,
                                               (01982) ( SERIAL INPUT = LINK	L->! R !------>! Q !	   .-! R !<-L	 ! Q !<-.
                                               (01983) (                          '---'       '---'       ! '---'       '---'  !
                                               (01984) (                                                  '--------------------'
                                               (01985) (			   ,---,       ,---,	     ,---,	 ,---,
                                               (01986) ( SERIAL INPUT = C	C->! R !------>! Q !	   .-! R !<-C	 ! Q !<-.
                                               (01987) (                          '---'       '---'       ! '---'       '---'  !
                                               (01988) (                                                  '--------------------'
                                               (01989) (			   ,---,       ,---,	     ,---,	 ,---,
                                               (01990) ( ROTDOUBLE		.->! R !------>! Q !-.	   .-! R !<------! Q !<-.
                                               (01991) (                       !  '---'       '---' !     ! '---'       '---'  !
                                               (01992) (                       '--------------------'     '--------------------'
                                               (01993) (			   ,---,       ,---,	     ,---,	 ,---,
                                               (01994) ( ROTATE		.->! R !-.  .->! Q !-.	   .-! R !<-.  .-! Q !<-.
                                               (01995) (                       !  '---' !  !  '---' !     ! '---'  !  ! '---'  !
                                               (01996) (                       '--------'  '--------'     '--------'  '--------'
                                               (01997) ( ARITHMETIC		   ,---,       ,---,	     .---.	 .---.
                                               (01998) (  OR			.->! R !------>! Q !	     ! R !<------! Q !<-0
                                               (01999) ( ARIDOUBLE             '--'---'       '---'         '---'       '---'
                                               (02000) (			   ,---,       ,---,	     ,---,	 ,---,
                                               (02001) ( SERIAL INPUT = 1	1->! R !    1->! Q !	     ! R !<-1	 ! Q !<-1
                                               (02002) (                          '---'       '---'         '---'       '---'
                                               (02003) (			   ,---,       ,---,	     ,---,	 ,---,	____
                                               (02004) (SHIFTMUL or SHIFDIV   AC->! R !------>! Q !	     ! R !<------! Q !<-LINK
                                               (02005) ( (left)     (right)       '---'       '---'         '---'       '---'
                                               (02006) (
                                               (02007) 'SHIFTS
                                               (02008) (
                                               (02009) SERIAL:    'SER'
                                               (02010) SERINPUT:  'SINPUT'
                                               (02011) SINPUT=:   'SINP='
                                               (02012) SINP=0:    SHIN/PA:=0;
                                               (02013) SINP=LINK: SHIN/PA:=1;
                                               (02014) SINP=C:    SHIN/PA:=2;
                                               (02015) ROTDOUBLE: SHIN/PA:=3;
                                               (02016) ROTATE:    SHIN/PA:=4;
                                               (02017) ARITHMETIC:SHIN/PA:=5;
                                               (02018) ARIDOUBLE: SHIN/PA:=5;
                                               (02019) SINP=1:    SHIN/PA:=6;
                                               (02020) SHIFTMUL:  SHIN/PA:=7;
                                               (02021) SHIFTDIV:  SHIN/PA:=7;
                                               (02022) 'OPERATIONS
                                               (02023) (
                                               (02024) (	  SIMPLE OPERATIONS ON INTERNAL REGISTERS
                                               (02025) (	  =======================================
                                               (02026) (
                                               (02027) (-------------------------------------------------------------------------------
                                               (02028) (THE FOLLOWING DEFINITIONS COMBINE ALU FUNCTION, OPERAND, AND
                                               (02029) (DESTINATION SPECIFICATIONS, IN ORDER TO CREATE MORE EASILY READABLE
                                               (02030) (SOURCE STATEMENTS WHEN LOADING, INCREMENTING, OR CLEARING
                                               (02031) (INTERNAL REGISTERS.
                                               (02032) (
                                               (02033) ( N O T E !!
                                               (02034) ( OPERATIONS MARKED '(**' ARE COMMENTED OUT TO SAVE SPACE AT ASSEMBLY
                                               (02035) ( TIME, IF NEEDED THROUGH AWAY COMMENT DELIMITER AND HOPEFULLY IF
                                               (02036) ( THERE IS SPACE, YOU MAY USE IT.
                                               (02037) (-------------------------------------------------------------------------------
                                               (02038) (
                                               (02039) LOAD:     'LOAD'
                                               (02040) INCREMENT:'IN'
                                               (02041) DECREMENT:'DE'
                                               (02042) CLEAR:    'CLR'
                                               (02043) (
                                               (02044) LOADQ:	  QREG;
                                               (02045) INQ:	  INCR Q QREG;
                                               (02046) DEQ:	  DECRQ QREG;
                                               (02047) (
                                               (02048) (-------------------------------------------------------------------------------
                                               (02049) (
                                               (02050) FF:       'FF'
                                               (02051) FFTO:     'FFTO'
                                               (02052) 'CONDITIONS
                                               (02053) (
                                               (02054) (	  CONDITION FLIPFLOPS
                                               (02055) (	  ===================
                                               (02056) (-------------------------------------------------------+-----------------------
                                               (02057) (    (FF/PB)						!       Flags:
                                               (02058) (-------------------------------------------------------------------------------
                                               (02059) (FF/PB	Mnemonic	Description			! V ! N ! L ! Z ! P ! C
                                               (02060) (-------------------------------------------------------+---+---+---+---+---+---
                                               (02061) (			D-bus bits when loaded from D	! 5 ! 4 ! 3 ! 2 ! 1 ! 0
                                               (02062) (-------------------------------------------------------+---+---+---+---+---+---
                                               (02063) (1	LCZNVFD		LOAD CZNV FROM D		! L ! L ! = ! L ! = ! L
                                               (02064) (2	LOADPCCY	LOAD PCCY			! = ! = ! = ! = ! L ! =
                                               (02065) (3	RESPCCY		RESET PCCY			! = ! = ! = ! = ! 0 ! =
                                               (02066) (4	LLFD		LOAD LINK FROM D		! = ! = ! L ! = ! = ! =
                                               (02067) (5	LLFSHIFT	LOAD LINK FROM SHIFT		! = ! = ! L^! = ! = ! =
                                               (02068) (6	SETC		SET C				! = ! = ! = ! = ! = ! 1
                                               (02069) (7	LCFSHIFT	LOAD C FROM SHIFT		! = ! = ! = ! = ! = ! L^
                                               (02070) (8	LCZARI		LOAD CZ ARI			! = ! = ! = ! L ! = ! L
                                               (02071) (9	LCNVARI		LOAD CNV ARI			! L ! L ! = ! = ! = ! L
                                               (02072) (A	LCZNVARI	LOAD CZNV ARI			! L ! L ! = ! L ! = ! L
                                               (02073) (B	LCZNVARI16	LOAD CZNV ARI16			! L ! L ! = ! L*! = ! L
                                               (02074) (C	LZNLOG		LOAD ZN LOG			! = ! L ! = ! L ! = ! =
                                               (02075) (D	LZNVLOG		LOAD ZNV LOG			! 0 ! L ! = ! L ! = ! =
                                               (02076) (E	LCZNVLOG	LOAD CZNV LOG			! 0 ! L ! = ! L ! = ! 0
                                               (02077) (F	LZNLOG16	LOAD ZN LOG16			! = ! L ! = ! L*! = ! =
                                               (02078) (-------------------------------------------------------------------------------
                                               (02079) (    L     : LINK
                                               (02080) (    N	   : NEG ( sign )
                                               (02081) (    V	   : Overflow ( bit 7 xor 6 )
                                               (02082) (    Z	   : ZERO
                                               (02083) (    C	   : CARRY
                                               (02084) (    P	   : PCCY
                                               (02085) (    L	   : Flag Loaded
                                               (02086) (    L*    : Flag Loaded (Set if true and true before
                                               (02087) (    L^    : Flag loaded (If ALUD=2,3,6 or 7, loaded from ALU out msb, else lsb
                                               (02088) (    =	   : Not Affected
                                               (02089) (    1	   : Set to True
                                               (02090) (    0	   : Set to False
                                               (02091) 'CONDITION FLAGS cont.
                                               (02092) (-------------------------------------------------------------------------------
                                               (02093) (
                                               (02094) LOADPCCY:   FF/PB:=2;	 (LOAD PCCY  (PROGR CTR CARRY FF)
                                               (02095) RESPCCY:    FF/PB:=3;	 (RESET PCCY
                                               (02096) LOADC:      'LC'
                                               (02097) LOADCZ:     'LCZ'
                                               (02098) LOADCNV:    'LCNV'
                                               (02099) LOADCZNV:   'LCZNV'
                                               (02100) LOADZN:     'LZN'
                                               (02101) LOADZNV:    'LZNV'
                                               (02102) LOADLINK:   'LLINK'
                                               (02103) LCFROM:     'LCF'
                                               (02104) LCZNVFROM:  'LCZNVF'
                                               (02105) LLINKFROM:  'LLF'
                                               (02106) LZNVLOG:    FF/PB:=D;	 (LOAD ZNV LOG
                                               (02107) LCZNVFD:    FF/PB:=1;	 (LOAD CZNV FROM D
                                               (02108) LCZNVARI:   FF/PB:=A;	 (LOAD CZNV ARI	   Z:= FZ	 C:=FC
                                               (02109) LCZNVARI16: FF/PB:=B;	 (LOAD CZNV ARI16  Z:= Z AND FZ, C:=FC
                                               (02110) LCZNVLOG:   FF/PB:=E;	 (LOAD CZNV LOG	   Z:= FZ,	 C:=0
                                               (02111) LZNLOG16:   FF/PB:=F;	 (LOAD ZN LOG16    Z:= Z AND FZ
                                               (02112) LCFSHIFT:   FF/PB:=7;	 (LOAD C FROM SHIFT
                                               (02113) LCNVARI:    FF/PB:=9;	 (LOAD CNV ARI
                                               (02114) SETC:	    FF/PB:=6;	 (SET C
                                               (02115) LLFSHIFT:   FF/PB:=5;	 (LOAD LINK FROM SHIFT
                                               (02116) LLFD:	    FF/PB:=4;	 (LOAD LINK FROM D
                                               (02117) LCZARI:     FF/PB:=8;	 (LOAD CZ ARI
                                               (02118) LZNLOG:     FF/PB:=C;	 (LOAD ZN LOG
                                               (02119) (
                                               (02120) (DEFAULT    FF/PB:=0;	 (NO CHANGE
                                               (02121) (
                                               (02122) 'PULSES
                                               (02123) (
                                               (02124) (	  PULSES
                                               (02125) (	  ======
                                               (02126) (
                                               (02127) (-------------------------------------------------------------------------------
                                               (02128) (FIVE INDEPENDENT GROUPS OF ACTIONS - MOSTLY PULSES, GENERATED AT END
                                               (02129) (OF MICROINSTRUCTION CYCLE. ONE ACTION FROM EACH GROUP MAY BE SELECTED.
                                               (02130) (
                                               (02131) (COMMON ABBREVIATIONS:
                                               (02132) SET:        'SET'
                                               (02133) RESET:      'RES'
                                               (02134) WRITE:      'WRIT'
                                               (02135) (NOTE THAT THE SOURCE WORDS "LOAD ", "INCREMENT ", AND "DECREMENT "
                                               (02136) (ARE ABBREVIATED TO "LOAD", "IN", AND "DE", RESPECTIVELY,
                                               (02137) (BY EARLIER DEFINITIONS
                                               (02138) (
                                               (02139) 'PULSES FIRST GROUP
                                               (02140) (-------------------------------------------------------------------------------
                                               (02141) (FIRST GROUP:	  SHIN/PA
                                               (02142) (
                                               (02143) (RESTRICTION ON FIRST GROUP: WHEN USING ALU DESTINATIONS RAMRIGHT,
                                               (02144) (RAMQRIGHT, RAMLEFT, OR RAMQLEFT, THE PULSES IN THE FIRST GROUP
                                               (02145) ((SHIN/PA) CANNOT BE GENERATED.
                                               (02146) (
                                               (02147) LOADNREG:   SHIN/PA:=1;  (Load NREG from Y-bus bit: 3..0
                                               (02148) RESSPECIAL: SHIN/PA:=2;  (RESET FF SPECIAL
                                               (02149) SETSPECIAL: SHIN/PA:=3;  (SET FF SPECIAL
                                               (02150) (
                                               (02151) LOADIR:     SHIN/PA:=8;  (LOAD INSTRUCTION REGISTER	  (FROM D)
                                               (02152) CUIRQ:	    SHIN/PA:=9;   (USED BELOW
                                               (02153) CALL:       'CALL'
                                               (02154) CALLSP:     SHIN/PA:=A;  (SET CALL TO SP
                                               (02155) ACKSPREQ:   SHIN/PA:=B;  (ACKNOWLEDGE SP REQUEST, at T2 in current uI.
                                               (02156) (ex:			 ACK SPREQ			(Ack of old SPREQ at T2
                                               (02157) (			 DSOURCE SP, PASS D TO W1	(Next SPREQ to w1
                                               (02158) (				   UNC GO TO WHEN SPREQ;( On this new SPREQ
                                               (02159) (
                                               (02160) SELECT:     'SELECT'
                                               (02161) SELECTBLK0: SHIN/PA:=C;  (SELECT MICROPGM BLOCK 0  (First  4k word
                                               (02162) SELECTBLK1: SHIN/PA:=D;  (SELECT MICROPGM BLOCK 1  (Second 4k word
                                               (02163) SELECTBLK2: SHIN/PA:=E;  (SELECT MICROPGM BLOCK 2  (Third  4k word
                                               (02164) SELECTBLK3: SHIN/PA:=F;  (SELECT MICROPGM BLOCK 3  (Fourth 4k word
                                               (02165) (
                                               (02166) (LOADB:	    SHIN/PA:=4;  (LOAD BLOCK REGISTER		  (FROM D)
                                               (02167) LOADLATCH:  'LL'
                                               (02168) LOADLAREG:  'LL'
                                               (02169) LLFROM:     'LLFR'
                                               (02170) LLFRG:	    SHIN/PA:=5; 		  (LOAD LATCH FROM G
                                               (02171) LLFRGR:     SHIN/PA:=5 GASS:=0;		  (LOAD LATCH FROM G(R)
                                               (02172) LLFRSB:     SHIN/PA:=5 GASS:=1;		  (LOAD LATCH FROM STRING BUFFER
                                               (02173) LLFRMSTACK: SHIN/PA:=5 GASS:=2;		  (LOAD LATCH FROM MSTACK
                                               (02174) LLFRPSTACK: SHIN/PA:=5 GASS:=3;		  (LOAD LATCH FROM PSTACK
                                               (02175) LLFRD:	    SHIN/PA:=6; 		  (LOAD LATCH FROM D
                                               (02176) LLFRY:	    SHIN/PA:=7;		  	  (Load Latch from Y
                                               (02177) (LLFRLSTACK: SHIN/PA:=5 GASS:=1;		  (LOAD LATCH FROM LSTACK, assigned to STRING BUFFER!!!
                                               (02178) LLFRLSTACK: SHIN/PA:=5 GASS:=3; 	  (LOAD LATCH FROM LSTACK, assigned to PSTACK!!!
                                               (02179) LLFRRSTACK: SHIN/PA:=5 GASS:=2;		  (LOAD LATCH FROM RSTACK, assigned to MSTACK!!!
                                               (02180) (
                                               (02181) (-------------------------------------------------------------------------------
                                               (02182) (
                                               (02183) (FURTHER RESTRICTIONS ON FOLLOWING SUBGROUP:
                                               (02184) (CANNOT SIMULTANEOUSLY SPECIFY AN "A" OPERAND
                                               (02185) (SHOULD NOT SIMULTANEOUSLY DO "ENDDECODE" OR "STOPDECODE"
                                               (02186) (
                                               (02187) ACK:        'ACK'
                                               (02188) RESFWI:     CUIRQ A:=0;  (RESET FIRMWARE INTERRUPT
                                               (02189) SETFWI:     CUIRQ A:=1;  (SET FIRMWARE INTERRUPT
                                               (02190) RESTRACE:   CUIRQ A:=2;  (Reset TRACE FF detected at ENDDECODE
                                               (02191) SETTRACE:   CUIRQ A:=3;  (Set TRACE FF detected at ENDDECODE
                                               (02192) ACKCLKREQ:  CUIRQ A:=4;  (ACKNOWLEDGE 1200 HZ CLOCK REQUEST
                                               (02193) SLEEP:      CUIRQ A:=5;  (Enter stop mode (power-down). See CCFF for wake-up.
                                               (02194) RESINVPS:   CUIRQ A:=6;  (Cancel inverting of bit 7
                                               (02195) SETINVPS:   CUIRQ A:=7;  (Inv. addr bit 7 to PSTACK, only to MEM.
                                               (02196) LOADCRB0:   CUIRQ A:=10;  (Load configuration register 0 from D
                                               (02197) LOADCRB1:   CUIRQ A:=11;  (Load configuration register 1 from D
                                               (02198) LOADCRB2:   CUIRQ A:=12;  (Load configuration register 2 from D
                                               (02199) LOADCRB3:   CUIRQ A:=13;  (Load configuration register 3 from D
                                               (02200) LOADCRB4:   CUIRQ A:=14;  (Load configuration register 4 from D
                                               (02201) LOADCRB5:   CUIRQ A:=15;  (Load configuration register 5 from D
                                               (02202) LOADCRB6:   CUIRQ A:=16;  (Load configuration register 6 from D
                                               (02203) LOADCRB7:   CUIRQ A:=17;  (Load configuration register 7 from D
                                               (02204) LOADCRB8:   CUIRQ A:=18;  (Load configuration register 8 from D
                                               (02205) LOADCRB9:   CUIRQ A:=19;  (Load configuration register 9 from D
                                               (02206) LOADCRBA:   CUIRQ A:=1A;  (Load configuration register 9 from D
                                               (02207) LOADCRBB:   CUIRQ A:=1B;  (Load configuration register 9 from D
                                               (02208) LOADCRBC:   CUIRQ A:=1C;  (Load configuration register 9 from D
                                               (02209) LOADCRBD:   CUIRQ A:=1D;  (Load configuration register 9 from D
                                               (02210) LOADCRBE:   CUIRQ A:=1E;  (Load configuration register 9 from D
                                               (02211) LOADCRBF:   CUIRQ A:=1F;  (Load configuration register 9 from D
                                               (02212) LOADRTC:    CUIRQ A:=1F;  (Load RTC control register
                                               (02213) (
                                               (02214) (CRB bit assignments
                                               (02215) (
                                               (02216) 'PULSES SECOND GROUP
                                               (02217) (-------------------------------------------------------------------------------
                                               (02218) (SECOND GROUP:	  FF/PB
                                               (02219) (
                                               (02220) (NOTE: CONDITION FLIPFLOP CTRL, DESCRIBED EARLIER, IS INCLUDED IN
                                               (02221) (THIS GROUP
                                               (02222) (
                                               (02223) 'PULSES THIRD GROUP
                                               (02224) (-------------------------------------------------------------------------------
                                               (02225) (THIRD GROUP:	  PC
                                               (02226) (
                                               (02227) LOADADP:    'LOADADP'
                                               (02228) LOADADPA:   PC:=C;	  (LOAD ADDR REG PAGE AUX. PART (FROM Y)
                                               (02229) LOADADPI:   PC:=D;	  (LOAD ADDR REG PAGE INST. PART (FROM Y)
                                               (02230) LOADADPD:   PC:=E;	  (LOAD ADDR REG PAGE DATA. PART (FROM Y)
                                               (02231) LOADADPP:   PC:=F;	  (LOAD ADDR REG PAGE PCODE. PART (FROM Y)
                                               (02232) (
                                               (02233) LOADADH:    'LOADADH'
                                               (02234) LOADADHA:   PC:=8;	  (LOAD ADDR REG HIGH PART (FROM Y),AND SELECT ADPA
                                               (02235) LOADADHI:   PC:=9;	  (LOAD ADDR REG HIGH PART (FROM Y),AND SELECT ADPI
                                               (02236) LOADADHD:   PC:=A;	  (LOAD ADDR REG HIGH PART (FROM Y),AND SELECT ADPD
                                               (02237) LOADADHP:   PC:=B;	  (LOAD ADDR REG HIGH PART (FROM Y),AND SELECT ADPP
                                               (02238) (
                                               (02239) LOADADL:    'LADL'
                                               (02240) LADLFROM:   'LADLFROM'
                                               (02241) LADLFROMY:  PC:=4;	  (LOAD ADDRESS REGISTER LOW PART FROM Y
                                               (02242) LADLFROMD:  PC:=5;	  (LOAD ADDRESS REGISTER LOW PART FROM D
                                               (02243) (
                                               (02244) DEADL:      PC:=6;	  (Step ADL -1 (or +1, if MA1 is set)
                                               (02245) INADL:      PC:=7;	  (Step ADL +1 (or -1, if MA1 is set)
                                               (02246) (
                                               (02247) STEP:       'STEP'
                                               (02248) STEPADL:    PC:=7;	  (Step ADL (+1 or -1, controlled by DIRC
                                               (02249) (
                                               (02250) WRITG:      PC:=3;	    	(WRITE IN GMEM (FROM Y), GASD spec'd separately
                                               (02251) WRITGR:     PC:=3 GASD:=0;	(WRITE IN GENERAL REGISTER R (FROM Y)
                                               (02252) WRITSB:     PC:=3 GASD:=1;	(WRITE IN STRING BUFFER (FROM Y)
                                               (02253) WRITMSTACK: PC:=3 GASD:=2;	(WRITE IN MSTACK (FROM Y)
                                               (02254) WRITPSTACK: PC:=3 GASD:=3;	(WRITE IN PSTACK (FROM Y)
                                               (02255) (WRITLSTACK: PC:=3 GASD:=1;	(WRITE IN LSTACK (FROM Y), assigned to STRING BUFFER!!!
                                               (02256) WRITLSTACK: PC:=3 GASD:=3;	(WRITE IN LSTACK (FROM Y), assigned to PSTACK!!!
                                               (02257) WRITRSTACK: PC:=3 GASD:=2;	(WRITE IN RSTACK (FROM Y), assigned to MSTACK!!!
                                               (02258) (
                                               (02259) ( - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                               (02260) (Direct bus control register (DIRC)
                                               (02261) (
                                               (02262) LOADDIRC:   PC:=2;     (LOAD DIRC FROM D BUS
                                               (02263) (
                                               (02264) ( The DIRC register contains eight flip-flops:
                                               (02265) (
                                               (02266) (   7   6   5   4   3   2   1   0    <--   D-bus data bit
                                               (02267) ( +---+---+---+---+---+---+---+---+
                                               (02268) ( !MA2!MA1!MSL!GSL!ISL!LMP!U_D!ALR!
                                               (02269) ( +---+---+---+---+---+---+---+---+
                                               (02270) (   !   !   !   !   !   !   !   !
                                               (02271) (   !   !   !   !   !   !   !   +-- 0 --> ALLRAS inactive. Normal mode
                                               (02272) (   !   !   !   !   !   !   !       1 --> ALLRAS active. Refresh mode, all CKE active.
                                               (02273) (   !   !   !   !   !   !   !
                                               (02274) (   !   !   !   !   !   !   +-- 0 --> USE_DIRECT inactive, direct bus disabled.
                                               (02275) (   !   !   !   !   !   !       1 --> USE_DIRECT active,   direct bus enabled.
                                               (02276) (   !   !   !   !   !   !
                                               (02277) (   !   !   !   !   !   +-- 0 --> Normal mode.
                                               (02278) (   !   !   !   !   !       1 --> Load MPGM mode.
                                               (02279) (   !   !   !   !   !
                                               (02280) (   !   !   !   !   +-- 0 --> If U_D, IOMEM deselected, else IOMEM single step.
                                               (02281) (   !   !   !   !       1 --> If U_D, IOMEM selected, else IOMEM double step.
                                               (02282) (   !   !   !   !
                                               (02283) (   !   !   !   +-- 0 --> If U_D, GMEM deselected, else GMEM single step.
                                               (02284) (   !   !   !       1 --> If U_D, GMEM selected, else GMEM double step.
                                               (02285) (   !   !   !
                                               (02286) (   !   !   +-- 0 --> If U_D, DRAM deselected, else ADL single step.
                                               (02287) (   !   !       1 --> If U_D, DRAM selected, else ADL double step.
                                               (02288) (   !   !
                                               (02289) (   !   +-- 0 --> ADL steps up. (On "STEP/INCREMENT ADL", down on "DECREMENT ADL")
                                               (02290) (   !       1 --> ADL steps down. (On "STEP/INCREMENT ADL", up on "DECREMENT ADL")
                                               (02291) (   !
                                               (02292) (   +-- 0 --> ADL steps on the "STEP/INCREMENT/DECREMENT ADL" pulses.
                                               (02293) (       1 --> ADL steps on the "STEP/INCREMENT/DECREMENT ADL" pulses and on GMEM write.
                                               (02294) (
                                               (02295) (
                                               (02296) (MA2,MA1,MSL controls the stepping mode of ADL.
                                               (02297) (Ex: SET STEP +1:  ADL increments on every 'STEP ADL'
                                               (02298) (    SET STEP -1:  ADL decrements on every 'STEP ADL'
                                               (02299) (    SET STEP GW+1: ADL increments on every 'STEP ADL' and on any GMEM write.
                                               (02300) (    SET STEP GW-1: ADL decrements on every 'STEP ADL' and on any GMEM write.
                                               (02301) (    SET STEP +2:  ADL increments twice on every 'STEP ADL'
                                               (02302) (    SET STEP -2:  ADL decrements twice on every 'STEP ADL'
                                               (02303) (    SET STEP GW+2: ADL increments twice on every 'STEP ADL' and on any GMEM write.
                                               (02304) (    SET STEP GW-2: ADL decrements twice on every 'STEP ADL' and on any GMEM write.
                                               (02305) (
                                               (02306) 
                                               (02307) SETSTEP:   'SST'
                                               (02308) SST+1:	   PC:=2 MIFORM:=0 DATA1:=00;
                                               (02309) SST-1:	   PC:=2 MIFORM:=0 DATA1:=40;
                                               (02310) SSTGW+1:   PC:=2 MIFORM:=0 DATA1:=80;
                                               (02311) SSTGW-1:   PC:=2 MIFORM:=0 DATA1:=C0;
                                               (02312) SST+2:	   PC:=2 MIFORM:=0 DATA1:=20;
                                               (02313) SST-2:	   PC:=2 MIFORM:=0 DATA1:=60;
                                               (02314) SSTGW+2:   PC:=2 MIFORM:=0 DATA1:=A0;
                                               (02315) SSTGW-2:   PC:=2 MIFORM:=0 DATA1:=E0;
                                               (02316) (
                                               (02317) (
                                               (02318) (U_D,MSL,GSL,ISL control the fast transfers on the direct bus between
                                               (02319) (memory, GMEM, IOMEM and MPGM RAM.
                                               (02320) (Ex: SET FAST TRANSFER FROM MUP TO GMEM:	Transfer from mem (inc) to GMEM
                                               (02321) (    SET FAST TRANSFER FROM MDOWN TO GMEM:	Transfer from mem (dec) to GMEM
                                               (02322) (    SET FAST TRANSFER FROM GMEM TO MUP:	Transfer from GMEM to mem (inc)
                                               (02323) (    SET FAST TRANSFER FROM GMEM TO MDOWN:	Transfer from GMEM to mem (dec)
                                               (02324) (    SET FAST TRANSFER FROM MUP TO IOMEM:	Transfer from mem (inc) to IOMEM
                                               (02325) (    SET FAST TRANSFER FROM MDOWN TO IOMEM:	Transfer from mem (dec) to IOMEM
                                               (02326) (    SET FAST TRANSFER FROM IOMEM TO MUP:	Transfer from IOMEM to mem (inc)
                                               (02327) (    SET FAST TRANSFER FROM IOMEM TO MDOWN:	Transfer from IOMEM to mem (dec)
                                               (02328) (    SET FAST TRANSFER FROM GMEM TO IOMEM:	Transfer from GMEM to IOMEM
                                               (02329) (    SET FAST TRANSFER FROM IOMEM TO GMEM:	Transfer from IOMEM to GMEM
                                               (02330) (    SET FAST TRANSFER FROM MUP TO MPMEM:	Transfer from mem (inc) to MPMEM
                                               (02331) (    SET FAST TRANSFER FROM MDOWN TO MPMEM:	Transfer from mem (dec) to MPMEM
                                               (02332) (    SET FAST TRANSFER FROM GMEM TO MPMEM:	Transfer from GMEM to MPMEM
                                               (02333) (
                                               (02334) 
                                               (02335) SETFAST:   'F'
                                               (02336) FTRANSFER: 'FTRAN'
                                               (02337) FTRANFROM: 'FT'
                                               (02338) FTMUP:     'FTMU'
                                               (02339) FTMDOWN:   'FTMD'
                                               (02340) FTGMEM:    'FTG'
                                               (02341) FTIOMEM:   'FTI'
                                               (02342) FTMUTO:    'FTMU2'
                                               (02343) FTMDTO:    'FTMD2'
                                               (02344) FTGTO:     'FTG2'
                                               (02345) FTITO:     'FTI2'
                                               (02346) FTMU2GMEM: FTMU2G;
                                               (02347) FTMU2IOMEM: FTMU2I;
                                               (02348) FTMU2MPMEM: FTMU2M;
                                               (02349) FTMD2GMEM: FTMD2G;
                                               (02350) FTMD2IOMEM: FTMD2I;
                                               (02351) FTMD2MPMEM: FTMD2M;
                                               (02352) FTG2MUP:   FTG2MU;
                                               (02353) FTG2MDOWN: FTG2MD;
                                               (02354) FTG2IOMEM: FTG2I;
                                               (02355) FTG2MPMEM: FTG2M;
                                               (02356) FTI2MUP:   FTI2MU;
                                               (02357) FTI2MDOWN: FTI2MD;
                                               (02358) FTI2GMEM:  FTI2G;
                                               (02359) FTMU2G:    PC:=2 MIFORM:=0 DATA1:=B2;
                                               (02360) FTMU2I:    PC:=2 MIFORM:=0 DATA1:=2A;
                                               (02361) FTMU2M:    PC:=2 MIFORM:=0 DATA1:=26;
                                               (02362) FTMD2G:    PC:=2 MIFORM:=0 DATA1:=F2;
                                               (02363) FTMD2I:    PC:=2 MIFORM:=0 DATA1:=6A;
                                               (02364) FTMD2M:    PC:=2 MIFORM:=0 DATA1:=66;
                                               (02365) FTG2MU:    PC:=2 MIFORM:=0 DATA1:=12;
                                               (02366) FTG2MD:    PC:=2 MIFORM:=0 DATA1:=52;
                                               (02367) FTG2I:     PC:=2 MIFORM:=0 DATA1:=12;
                                               (02368) FTG2M:     PC:=2 MIFORM:=0 DATA1:=16;
                                               (02369) FTI2MU:    PC:=2 MIFORM:=0 DATA1:=0A;
                                               (02370) FTI2MD:    PC:=2 MIFORM:=0 DATA1:=4A;
                                               (02371) FTI2G:     PC:=2 MIFORM:=0 DATA1:=0A;
                                               (02372) (
                                               (02373) ( - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                               (02374) (DEFAULT	    PC:=0;
                                               (02375) (
                                               (02376) 'PULSES FOURTH GROUP
                                               (02377) (-------------------------------------------------------------------------------
                                               (02378) (FOURTH GROUP	  PD
                                               (02379) (
                                               (02380) LOADOUTPUT: LDOUTPUT;
                                               (02381) LOADDTM:    'LDTM'
                                               (02382) LDTMFROM:   'LDTMFR'
                                               (02383) NEXT: 'NEXT'
                                               (02384) SYNCHRONIZE: SYNC;
                                               (02385) LDTMFRD:    PD:=2;	 (LOAD DATA-TO-MEM REGISTER FROM D
                                               (02386) LDTMFRY:    PD:=3;	 (LOAD DATA-TO-MEM REGISTER FROM Y
                                               (02387) LDTMFRBUS:  PD:=2;	 (LOAD DATA-TO-MEM REGISTER FROM 16-BIT BUS
                                               (02388) LOADIOADDR: PD:=4;	 (LOAD I/O ADDRESS REGISTER
                                               (02389) LDOUTPUT:   PD:=5;	 (LOAD DATA TO OUTPUT
                                               (02390) NEXTINPUT:  PD:=6;       (GET DATA FROM INPUT
                                               (02391) SYNC:       PD:=7;       (SYCHRONIZE TO I/O CLOCK
                                               (02392) (
                                               (02393) (NOTE! "NEXT INPUT" AND "SYNCHRONIZE" WILL ALSO DO "LOAD DTM FROM D"!
                                               (02394) (
                                               (02395) (
                                               (02396) (ONLY WHEN THE LMP BIT IS SET IN MMU CONTROL REGISTER 1:
                                               (02397) (
                                               (02398) LOADMPGM: LOADMP;
                                               (02399) LOADMP:   LDMP;
                                               (02400) LDMP:     PD:=2;	 (LOAD MPGM DATA FROM 16-BIT BUS TO MPLL.
                                               (02401) (
                                               (02402) (NOTE! DATA WILL BE TRANSFERRED TO MPGM RAM ON THE LAST PULSE OF A WORD
                                               (02403) (
                                               (02404) (
                                               (02405) (RESTRICTIONS ON FOLLOWING SUBGROUP:
                                               (02406) (CANNOT SIMULTANEOUSLY SPECIFY AN "A" OPERAND
                                               (02407) (
                                               (02408) LOADPORT:    LDPORT;
                                               (02409) LOADCPORT:   'LDCPORT'
                                               (02410) LOADDPORT:   'LDDPORT'
                                               (02411) LDPORT:     PD:=1;       (Load port register, reg is specified with AADDR
                                               (02412) LDCPORTA:   LDPORT A:=00; (Load configuration register of general port A
                                               (02413) LDCPORTB:   LDPORT A:=01; (Load configuration register of general port B
                                               (02414) LDCPORTC:   LDPORT A:=02; (Load configuration register of general port C
                                               (02415) LDCPORTD:   LDPORT A:=03; (Load configuration register of general port D
                                               (02416) LDCPORTE:   LDPORT A:=04; (Load configuration register of general port E
                                               (02417) LDCPORTF:   LDPORT A:=05; (Load configuration register of general port F
                                               (02418) LDCPORTG:   LDPORT A:=06; (Load configuration register of general port G
                                               (02419) LDCPORTH:   LDPORT A:=07; (Load configuration register of general port H
                                               (02420) LDCPORTI:   LDPORT A:=08; (Load configuration register of general port I
                                               (02421) LDCPORTJ:   LDPORT A:=09; (Load configuration register of general port J
                                               (02422) 
                                               (02423) LDDPORTA:   LDPORT A:=10; (Load data register of general port A
                                               (02424) LDDPORTB:   LDPORT A:=11; (Load data register of general port B
                                               (02425) LDDPORTC:   LDPORT A:=12; (Load data register of general port C
                                               (02426) LDDPORTD:   LDPORT A:=13; (Load data register of general port D
                                               (02427) LDDPORTE:   LDPORT A:=14; (Load data register of general port E
                                               (02428) LDDPORTF:   LDPORT A:=15; (Load data register of general port F
                                               (02429) LDDPORTG:   LDPORT A:=16; (Load data register of general port G
                                               (02430) LDDPORTH:   LDPORT A:=17; (Load data register of general port H
                                               (02431) LDDPORTI:   LDPORT A:=18; (Load data register of general port I
                                               (02432) LDDPORTJ:   LDPORT A:=19; (Load data register of general port J
                                               (02433) (
                                               (02434) LDCPORTK:   LDPORT A:=0A; (Load configuration register of general port K
                                               (02435) LDCPORTL:   LDPORT A:=0B; (Load configuration register of general port L
                                               (02436) LDCPORTM:   LDPORT A:=0C; (Load configuration register of general port M
                                               (02437) LDCPORTN:   LDPORT A:=0D; (Load configuration register of general port N
                                               (02438) LDCPORTO:   LDPORT A:=0E; (Load configuration register of general port O
                                               (02439) LDCPORTP:   LDPORT A:=0F; (Load configuration register of general port P
                                               (02440) LDDPORTK:   LDPORT A:=1A; (Load data register of general port K
                                               (02441) LDDPORTL:   LDPORT A:=1B; (Load data register of general port L
                                               (02442) LDDPORTM:   LDPORT A:=1C; (Load data register of general port M
                                               (02443) LDDPORTN:   LDPORT A:=1D; (Load data register of general port N
                                               (02444) LDDPORTO:   LDPORT A:=1E; (Load data register of general port O
                                               (02445) LDDPORTP:   LDPORT A:=1F; (Load data register of general port P
                                               (02446) (
                                               (02447) (DEFAULT    PD:=0;
                                               (02448) (-------------------------------------------------------------------------------
                                               (02449) (
                                               (02450) 'GMEM COUNTER CONTROL
                                               (02451) (-------------------------------------------------------------------------------
                                               (02452) (EXAMPLES:
                                               (02453) (
                                               (02454) (	INCREMENT SBCTR;
                                               (02455) (	---------------------------------
                                               (02456) (	INCREMENT MSCTR, DECREMENT PSCTR;
                                               (02457) (	---------------------------------
                                               (02458) (       PUSH PSCTR;
                                               (02459) (	---------------------------------
                                               (02460) (	GSOURCE MSTACK, GDEST PSTACK
                                               (02461) (	POP DSTCTR & DECREMENT SRCCTR;
                                               (02462) (	---------------------------------
                                               (02463) (	DSOURCE SB, PASS D, WRITE PSCTR
                                               (02464) (	PUSH SRCCTR & LOAD DSTCTR;
                                               (02465) (	---------------------------------
                                               (02466) (
                                               (02467) (-------------------------------------------------------------------------------
                                               (02468) (SOURCE COUNTER CONTROL
                                               (02469) (
                                               (02470) INSRCCTR:    GACS:=1;   (Increment source counter
                                               (02471) DESRCCTR:    GACS:=2;   (Decrement source counter
                                               (02472) LOADSRCCTR:  GACS:=3;   (Load source counter
                                               (02473) PUSHSRCCTR:  GAPP:=1 GACS:=0; (Push and load source counter
                                               (02474) POPSRCCTR:   GAPP:=1 GACS:=1; (Pop source counter
                                               (02475) (
                                               (02476) (-------------------------------------------------------------------------------
                                               (02477) (DESTINATION COUNTER CONTROL
                                               (02478) (
                                               (02479) INDSTCTR:    GACD:=1;   (Increment destination counter
                                               (02480) DEDSTCTR:    GACD:=2;   (Decrement destination counter
                                               (02481) LOADDSTCTR:  GACD:=3;   (Load dest counter
                                               (02482) PUSHDSTCTR:  GAPP:=1 GACS:=2; (Push and load destination counter
                                               (02483) POPDSTCTR:   GAPP:=1 GACS:=3; (Pop destination counter
                                               (02484) (
                                               (02485) (-------------------------------------------------------------------------------
                                               (02486) (
                                               (02487) (
                                               (02488) &INCREMENT: '&IN'	(&: '&' (defined elsewhere)
                                               (02489) &LOAD:      '&LD'	(&: '&' (defined elsewhere)
                                               (02490) &POP:       '&PP'
                                               (02491) (
                                               (02492) &INSRCCTR:  GACD:=1;
                                               (02493) &INDSTCTR:  GACD:=1;
                                               (02494) &DESRCCTR:  GACD:=2;	(&DECREMENT: '&DE' (defined elsewhere)
                                               (02495) &DEDSTCTR:  GACD:=2;	(&DECREMENT: '&DE' (defined elsewhere)
                                               (02496) &LDSRCCTR:  GACD:=3;
                                               (02497) &LDDSTCTR:  GACD:=3;
                                               (02498) &PPSRCCTR:  GACD:=3;
                                               (02499) &PPDSTCTR:  GACD:=3;
                                               (02500) (
                                               (02501) (-------------------------------------------------------------------------------
                                               (02502) (R COUNTER CONTROL
                                               (02503) (
                                               (02504) LOADR:	    LOADSRCCTR GASS:=0;   (LOAD R COUNTER	    (FROM D)
                                               (02505) INR:	    INSRCCTR GASS:=0;	   (INCREMENT R COUNTER
                                               (02506) DER:	    DESRCCTR GASS:=0;	   (DECREMENT R COUNTER
                                               (02507) LOADBR:	    LOADSRCCTR GASS:=0;   (LOAD BR COUNTER	    (FROM D)
                                               (02508) INBR:	    INSRCCTR GASS:=0;	   (INCREMENT BR COUNTER
                                               (02509) DEBR:	    DESRCCTR GASS:=0;	   (DECREMENT BR COUNTER
                                               (02510) (
                                               (02511) (-------------------------------------------------------------------------------
                                               (02512) (STRING BUFFER COUNTER CONTROL
                                               (02513) (
                                               (02514) LOADSBCTR:  LOADSRCCTR GASS:=1;	   (LOAD STRING BUFFER CTR  (FROM Y)
                                               (02515) INSBCTR:    INSRCCTR GASS:=1;	   (INCREMENT STRING BUFFER COUNTER
                                               (02516) DESBCTR:    DESRCCTR GASS:=1;	   (DECREMENT STRING BUFFER COUNTER
                                               (02517) PUSHSBCTR:  PUSHSRCCTR GASS:=1;	   (Push and load SBCTR
                                               (02518) POPSBCTR:   POPSRCCTR GASS:=1;	   (Pop SBCTR
                                               (02519) (
                                               (02520) (-------------------------------------------------------------------------------
                                               (02521) (MSTACK COUNTER CONTROL
                                               (02522) (
                                               (02523) LOADMSCTR:  LOADSRCCTR GASS:=2;	   (LOAD MSTACK COUNTER     (FROM Y)
                                               (02524) INMSCTR:    INSRCCTR GASS:=2;	   (INCREMENT MSTACK COUNTER
                                               (02525) DEMSCTR:    DESRCCTR GASS:=2;	   (DECREMENT MSTACK COUNTER
                                               (02526) (
                                               (02527) (-------------------------------------------------------------------------------
                                               (02528) (PSTACK COUNTER CONTROL
                                               (02529) (
                                               (02530) LOADPSCTR:  LOADSRCCTR GASS:=3;	   (LOAD PSTACK COUNTER     (FROM Y)
                                               (02531) INPSCTR:    INSRCCTR GASS:=3;	   (INCREMENT PSTACK COUNTER
                                               (02532) DEPSCTR:    DESRCCTR GASS:=3;	   (DECREMENT PSTACK COUNTER
                                               (02533) PUSHPSCTR:  PUSHSRCCTR GASS:=3;	   (Push and load PSCTR
                                               (02534) POPPSCTR:   POPSRCCTR GASS:=3;	   (Pop PSCTR
                                               (02535) (
                                               (02536) (-------------------------------------------------------------------------------
                                               (02537) ((LSTACK COUNTER CONTROL, assigned to STRING BUFFER COUNTER!!!
                                               (02538) ((
                                               (02539) (LOADLSCTR:  LOADSRCCTR GASS:=1;   (LOAD LSTACK COUNTER     (FROM Y)
                                               (02540) (INLSCTR:    INSRCCTR GASS:=1;	   (INCREMENT LSTACK COUNTER
                                               (02541) (DELSCTR:    DESRCCTR GASS:=1;	   (DECREMENT LSTACK COUNTER
                                               (02542) (PUSHLSCTR:  PUSHSRCCTR GASS:=1;   (Push and load LSCTR
                                               (02543) (POPLSCTR:   POPSRCCTR GASS:=1;	   (Pop LSCTR
                                               (02544) ((
                                               (02545) (-------------------------------------------------------------------------------
                                               (02546) (LSTACK COUNTER CONTROL, assigned to PSTACK COUNTER!!!
                                               (02547) 
                                               (02548) LOADLSCTR:  LOADSRCCTR GASS:=3;   (LOAD LSTACK COUNTER     (FROM Y)
                                               (02549) INLSCTR:    INSRCCTR GASS:=3;	  (INCREMENT LSTACK COUNTER
                                               (02550) DELSCTR:    DESRCCTR GASS:=3;	  (DECREMENT LSTACK COUNTER
                                               (02551) PUSHLSCTR:  PUSHSRCCTR GASS:=3;   (Push and load LSCTR
                                               (02552) POPLSCTR:   POPSRCCTR GASS:=3;	  (Pop LSCTR
                                               (02553) (
                                               (02554) (-------------------------------------------------------------------------------
                                               (02555) (RSTACK COUNTER CONTROL, assigned to MSTACK COUNTER!!!
                                               (02556) LOADRSCTR:  LOADSRCCTR GASS:=2;	   (LOAD RSTACK COUNTER     (FROM Y)
                                               (02557) INRSCTR:    INSRCCTR GASS:=2;	   (INCREMENT RSTACK COUNTER
                                               (02558) DERSCTR:    DESRCCTR GASS:=2;	   (DECREMENT RSTACK COUNTER
                                               (02559) PUSHRSCTR:  PUSHSRCCTR GASS:=2;	   (Push and load RSCTR
                                               (02560) POPRSCTR:   POPSRCCTR GASS:=2;	   (Pop RSCTR
                                               (02561) 
                                               (02562) (
                                               (02563) (SETINVPS:   CUIRQ A:=7;  	   (See PA field definitions
                                               (02564) (RESINVPS:   CUIRQ A:=6;  	   (See PA field definitions
                                               (02565) (
                                               (02566) POP: 'POP'
                                               (02567) PUSHPSTACK: WRITPSTACK, DEDSTCTR;
                                               (02568) POPPSTACK: DSPSTACK, INSRCCTR;
                                               (02569) (
                                               (02570) (-------------------------------------------------------------------------------
                                               (02571) 'LATCH
                                               (02572) (
                                               (02573) (	  LATCH
                                               (02574) (	  =====
                                               (02575) (
                                               (02576) (---------------------------------------------------------------------
                                               (02577) (
                                               (02578) (A LATCH IS PROVIDED, WHICH CAN BE LOADED FROM G (THE REGISTER ADDRESSED
                                               (02579) (BY COUNTER R, OR THE ASTACK ELEMENT ADDRESSED BY THE ASTACK COUNTER),
                                               (02580) (FROM THE D-BUS, OR FROM Y-BUS.
                                               (02581) (
                                               (02582) (THE LATCH IS NO LONGER ACTUALLY A LATCH, BUT A REGISTER. IT IS LOADED AT
                                               (02583) (THE END OF THE MICROINSTRUCTION CYCLE AND A LOADED VALUE CAN THEREFORE
                                               (02584) (NOT BE ACCESSED UNTIL THE NEXT CYCLE.
                                               (02585) (
                                               (02586) (IT IS INTENDED TO BE USED FOR THE FOLLOWING PURPOSES:
                                               (02587) (
                                               (02588) (A)  TEMPORARY STORAGE OF MEMORY DATA
                                               (02589) (
                                               (02590) (IN SOME SITUATIONS IT IS DESIRABLE TO RECEIVE DATA FROM MEMORY, SO
                                               (02591) (THAT NEXT MEMORY CYCLE CAN BE STARTED, ALTHOUGH THE ALU IS OCCUPIED
                                               (02592) (AND THEREFORE CANNOT TAKE CARE OF THE DATA.
                                               (02593) (DATA FROM MEMORY CAN THEN BE STORED IN THE LATCH, UNTIL IT CAN BE
                                               (02594) (PROCESSED BY THE ALU.
                                               (02595) (TO STORE MEMORY DATA IN THE LATCH, WRITE LIKE THIS:
                                               (02596) (	 DSOURCE MEM, LOAD LATCH FROM D
                                               (02597) (
                                               (02598) (B)  WHEN PERFORMING BARREL SHIFT OR MULTIPLYER FUNCTIONS. THE SOURCE IS LATCH
                                               (02599) (
                                               (02600) (EXAMPLE 3: USING MBM LOGIC  (BARRELSHIFTER)
                                               (02601) (NOTE! THAT THE LATCH IS A REGISTER!
                                               (02602) (
                                               (02603) (     PASS W1	   		   (Y-BUS IS OLD W1
                                               (02604) (     LOAD LATCH FROM Y 	   (LOAD LATCH WITH OLD W1
                                               (02605) (     ;
                                               (02606) (  (----------------------------------------
                                               (02607) (     FIRSTSHIFT		   (PERFORM A BARREL SHIFT, SOURCE IS LATCH
                                               (02608) (     DSOURCE MBM		   (D-BUS IS SHIFTED LATCH DATA
                                               (02609) (     PASS D TO W1		   (W1:= SHIFTED W1
                                               (02610) (     ;
                                               (02611) (-------------------------------------------------------------------------------
                                               (02612) 'MEMORY
                                               (02613) (
                                               (02614) (	  MEMORY CONTROL
                                               (02615) (	  ==============
                                               (02616) (
                                               (02617) (-------------------------------------------------------------------------------
                                               (02618) (EACH MICROINSTRUCTION CONSTITUTES AN ELEMENT IN A SEQUENCE WHICH
                                               (02619) (PRODUCES A MEMORY CYCLE OF SOME KIND.
                                               (02620) (THERE ARE FOUR DIFFERENT TYPES OF ELEMENTS, NAMED:
                                               (02621) ( R, RW, C, M.
                                               (02622) '
                                               (02623) (A MICROINSTRUCTION OF TYPE M COMPLETES ANY MEMORY CYCLE.
                                               (02624) (FURTHER ACCESS TO THE MEMORY REQUIRES THE START OF A NEW COMPLETE
                                               (02625) (MEMORY CYCLE, GIVING FULL ADDRESS.
                                               (02626) (
                                               (02627) (FOLLOWING M, ANY NUMBER OF C AND/OR M TYPE MICROINSTRUCTIONS
                                               (02628) (MAY FOLLOW WITHOUT CAUSING A NEW MEMORY CYCLE. CONTENTS OF
                                               (02629) (REGISTERS ADH, ADL, AND DTM IS IRRELEVANT DURING THIS INACTIVE
                                               (02630) (TIME. THEY ARE RELEVANT ONLY AT SPECIFIC POINTS IN THE ACTIVE
                                               (02631) (TIME, AS DESCRIBED BELOW.
                                               (02632) (
                                               (02633) (THERE ARE NO TIME RESTRICTIONS FOR GP2000. HOWEVER, SOME SEQUENCES
                                               (02634) (MAY CAUSE AUTOMATIC EXTENSION OF CYCLES TO COMPLY WITH MEMORY TIMING.
                                               (02635) (
                                               (02636) (FOLLOWING TYPE M (OR INACTIVE C) A COMPLETE MEMORY CYCLE IS STARTED BY
                                               (02637) (A MICROINSTRUCTION OF TYPE R OR RW. THE CONTENTS OF SADP, ADP AND ADH
                                               (02638) (DURING THE EXECUTION OF THIS FIRST MICROINSTRUCTION WILL BE USED FOR
                                               (02639) (PRODUCING THE ROW ADDRESS FOR THE COMPLETE MEMORY CYCLE, CHANGING THEM
                                               (02640) (IN THIS CYCLE OR ANY OF THE FOLLOWING WITHIN THE ACTIVE TIME HAS NO
                                               (02641) (EFFECT.
                                               (02642) (
                                               (02643) (THE ACTIVE TIME, I.E. THE COMPLETE MEMORY CYCLE, CONSISTS OF
                                               (02644) (THIS FIRST MICROINSTRUCTION AND ALL THE FOLLOWING, UP TO AND
                                               (02645) (INCLUDING THE FIRST M-TYPE MICROINSTRUCTION. THIS ACTIVE TIME
                                               (02646) (MAY INCLUDE MANY PAGE-MODE-READ OR PAGE-MODE-WRITE
                                               (02647) (CYCLES.
                                               (02648) (
                                               (02649) (THE CONTENTS OF SADP, ADP OR ADH MAY BE CHANGED AT ANY TIME, ALSO WITHIN THE
                                               (02650) (ACTIVE TIME. THE NEW CONTENTS WILL, HOWEVER, NOT BE USED UNTIL THE
                                               (02651) (START OF THE NEXT COMPLETE CYCLE.
                                               (02652) (
                                               (02653) (WRITING WILL TAKE PLACE DURING A C-TYPE FOLLOWING AN RW-
                                               (02654) (TYPE MICROINSTRUCTION. THE CONTENTS OF DTM DURING THIS C-TYPE
                                               (02655) (MICROINSTRUCTION WILL BE WRITTEN. THE CONTENTS OF ADL AT THIS TIME
                                               (02656) (WILL BE USED AS COLUMN ADDRESS. THEREFORE, THE CONTENTS OF ADL AND
                                               (02657) (DTM REGISTERS MUST BE LOADED IN THE RW-CYCLE OR EARLIER.
                                               (02658) (
                                               (02659) (WHEN READING, THE OUTPUT OF THE DFM REGISTER WILL HOLD THE OLD VALUE
                                               (02660) (DURING TWO CYCLES FOLLOWING R. THE NEW DATA WILL BECOME VALID
                                               (02661) (IN TIME TO BE USED BY THE NEXT MICROINSTRUCTION. IF THIS NEXT
                                               (02662) (MICROINSTRUCTION WAS NOT R, THE DATA IN DFM WILL REMAIN
                                               (02663) (UNCHANGED UP TO AND INCLUDING THE NEXT R AND TWO CYCLES AFTER THAT.
                                               (02664) (THE CONTENTS OF ADL WHEN THE READING TAKES PLACE (IN THE CYCLE FOLLOWING
                                               (02665) (THE R-CYCLE) IS USED AS COLUMN ADDRESS. THEREFORE, THE CONTENTS OF THE ADL
                                               (02666) (REGISTER MUST BE LOADED IN THE R-CYCLE OR EARLIER.
                                               (02667) (
                                               (02668) (-------------------------------------------------------------------------------
                                               (02669) (COMMON BASIC SEQUENCES:
                                               (02670) (-------------------------------------------------------------------------------
                                               (02671) (REFRESH:
                                               (02672) (
                                               (02673) (Refresh is handled by a special R-C-M sequence when ALLRAS is active
                                               (02674) (-------------------------------------------------------------------------------
                                               (02675) (
                                               (02676) (READ:
                                               (02677) (		 READ: R-C-M
                                               (02678) (      PAGE MODE READ: R-C-R-(C-R-..)-C-M
                                               (02679) ( ONE CYCLE READ LOOP: R-R-(R-..)-C-M
                                               (02680) (-------------------------------------------------------------------------------
                                               (02681) (
                                               (02682) (WRITE:
                                               (02683) (		WRITE: RW-C-M
                                               (02684) (     PAGE MODE WRITE: RW-C-RW-(C-RW-..)-C-M
                                               (02685) (ONE CYCLE WRITE LOOP: RW-RW-(RW-..)-C-M
                                               (02686) (-------------------------------------------------------------------------------
                                               (02687) (
                                               (02688) (NOTE THAT PAGE MODE READ AND WRITE CAN BE COMBINED
                                               (02689) '
                                               (02690) (
                                               (02691) C:	  MEMCP := 0;
                                               (02692) M:	  MEMCP := 1;
                                               (02693) R:	  MEMCP := 2;
                                               (02694) RW:	  MEMCP := 3;
                                               (02695) (
                                               (02696) $:	  MEMCP := 0;
                                               (02697) $C:	  MEMCP := 0;
                                               (02698) $M:	  MEMCP := 1;
                                               (02699) $R:	  MEMCP := 2;
                                               (02700) $RW:	  MEMCP := 3;
                                               (02701) (
                                               (02702) (-------------------------------------------------------------------------------
                                               (02703) '
                                               (02704) (THE FOLLOWING DEFINITIONS WILL ALLOW TIMING CONTROL SPECIFICATIONS TO REMAIN
                                               (02705) (IN OLD GP1000 CODE WITHOUT HAVING ANY EFFECT.
                                               (02706) (
                                               (02707) (2:  C;
                                               (02708) (3:  C;
                                               (02709) (R2: R;
                                               (02710) (R3: R;
                                               (02711) (RW2: RW;
                                               (02712) (RW3: RW;
                                               (02713) (C2: C;
                                               (02714) (C3: C;
                                               (02715) (M2: M;
                                               (02716) (M3: M;
                                               (02717) 
                                               (02718) (C4: C;
                                               (02719) (C5: C;
                                               (02720) (C6: C;
                                               (02721) (C7: C;
                                               (02722) (R4: R;
                                               (02723) (R5: R;
                                               (02724) (R6: R;
                                               (02725) (R7: R;
                                               (02726) (RW4: RW;
                                               (02727) (RW5: RW;
                                               (02728) (RW6: RW;
                                               (02729) (RW7: RW;
                                               (02730) (M4: M;
                                               (02731) (M5: M;
                                               (02732) (M6: M;
                                               (02733) (M7: M;
                                               (02734) (4: ''
                                               (02735) (5: ''
                                               (02736) (6: ''
                                               (02737) (7: ''
                                               (02738) 
                                               (02739) (-------------------------------------------------------------------------------
                                               (02740) (-------------------------------------------------------------------------------
                                               (02741) (-------------------------------------------------------------------------------
                                               (02742) (MORE OBSOLETE DEFINITIONS
                                               (02743) (-------------------------------------------------------------------------------
                                               (02744) (Preselect GAS:
                                               (02745) PRESELECT: 'PRESELECT'
                                               (02746) PRESELECTGR:     ''
                                               (02747) PRESELECTSB: 	 ''
                                               (02748) PRESELECTMSTACK: ''
                                               (02749) PRESELECTPSTACK: ''
                                               (02750) PRESELECTRSTACK: ''
                                               (02751) PRESELECTLSTACK: ''
                                               (02752) (-------------------------------------------------------------------------------
                                               (02753) (---------    E N D    O F    D E F I N I T I O N S   --------------------------
                                               (02754) (-------------------------------------------------------------------------------
                                               (02755) 
FILE: ..\mpgm\Definitions/Definitions_VE_20.mas
                                               (00001) WR_NON_ACT:             REG_WRITE := 0;
                                               (00002) WR_RE_BASE_ADDR_L:     REG_WRITE := 1;  ( // write left starting address of receive engine, still in use for 2.0
                                               (00003) WR_RE_BASE_ADDR_R:     REG_WRITE := 2;  ( // write right starting address of recieve engine, still in use for 2.0
                                               (00004) WR_RE_LC:               REG_WRITE := 3;  ( // write receive engine's loop counter
                                               (00005) WR_DFY_ADDR_A:          REG_WRITE := 4;  ( // push back address from DFY, A mode
                                               (00006) WR_DFY_ADDR_B:          REG_WRITE := 5;  ( // push back address from DFY, B mode
                                               (00007) WR_VE_BASE_ADDR_L:     REG_WRITE := 6;  ( // vector engine's left starting address, still in use for 2.0
                                               (00008) WR_VE_BASE_ADDR_R:     REG_WRITE := 7;  ( // vector engine's right starting address, still in use for 2.0
                                               (00009) WR_VE_LC:               REG_WRITE := 8;  ( // vector engine's loop counter
                                               (00010) WR_VE_OFFSET_L:         REG_WRITE := 9;  ( // left offset
                                               (00011) WR_VE_OFFSET_R:         REG_WRITE := A;  ( // right offset
                                               (00012) WR_VE_DEPTH_L:          REG_WRITE := B;  ( // left depth
                                               (00013) WR_VE_JUMP_L:           REG_WRITE := C;  ( // left jump
                                               (00014) WR_DFY_REG_SING:        REG_WRITE := D;  ( // write individual 8bit registers using the destination field.
                                               (00015) WR_DFY_FROM_MAC_ALL:    REG_WRITE := E;  ( // write all outputs from the macs to DFY.
                                               (00016) WR_DTM_REG_SING:        REG_WRITE := F;  ( // write single byte to DTM. Write in top byte and it is shifted down. Y->3->2->1->0.
                                               (00017) WR_VE_OUTER_LC:         REG_WRITE := 10; ( // write the outer loopcounter.
                                               (00018) WR_VE_LOOP_CFG:         REG_WRITE := 11; ( // write the configuration for auto restart of loop.
                                               (00019) WR_RING_END:            REG_WRITE := 12; ( // write the end address of ring mode operations. This address is non inclusive!, still in use for 2.0
                                               (00020) (( WR_RING_START:          REG_WRITE := 13; ( // write the ring start and also sets the current ringAddress., Redudant
                                               (00021) WR_ZP_DATA:             REG_WRITE := 14; ( //
                                               (00022) WR_ZP_WEIGHT:           REG_WRITE := 15; ( //
                                               (00023) WR_SCALE_FACTOR:        REG_WRITE := 16; ( //
                                               (00024) WR_POST_ENABLE:         REG_WRITE := 17; ( //
                                               (00025) (( WR_BIAS_DATA_END:       REG_WRITE := 18; ( //    Redundant
                                               (00026) WR_BIAS_DATA_BASE:      REG_WRITE := 19; ( // This should also write the current bias idx. , still in use for 2.0
                                               (00027) 
                                               (00028) WR_AU_PB_B_STEP_0:      REG_WRITE := 1A;
                                               (00029) WR_AU_PB_B_STEP_1:      REG_WRITE := 1B;
                                               (00030) WR_AU_PB_B_STEP_2:      REG_WRITE := 1C;
                                               (00031) WR_AU_PB_B_CMP_0:       REG_WRITE := 1D;    
                                               (00032) WR_AU_PB_B_CMP_1:       REG_WRITE := 1E;
                                               (00033) WR_AU_PB_B_CMP_2:       REG_WRITE := 1F;
                                               (00034) 
                                               (00035) WR_AU_LEFT_STEP_0:      REG_WRITE := 20;  
                                               (00036) WR_AU_LEFT_STEP_1:      REG_WRITE := 21;
                                               (00037) WR_AU_LEFT_STEP_2:      REG_WRITE := 22;
                                               (00038) WR_AU_LEFT_STEP_3:      REG_WRITE := 23;
                                               (00039) WR_AU_LEFT_CMP_0:       REG_WRITE := 24;
                                               (00040) WR_AU_LEFT_CMP_1:       REG_WRITE := 25;
                                               (00041) WR_AU_LEFT_CMP_2:       REG_WRITE := 26;
                                               (00042) WR_AU_LEFT_CMP_3:       REG_WRITE := 27;
                                               (00043) 
                                               (00044) WR_AU_RIGHT_STEP_0:      REG_WRITE := 28;
                                               (00045) WR_AU_RIGHT_STEP_1:      REG_WRITE := 29;
                                               (00046) WR_AU_RIGHT_STEP_2:      REG_WRITE := 2A;
                                               (00047) WR_AU_RIGHT_STEP_3:      REG_WRITE := 2B;
                                               (00048) WR_AU_RIGHT_CMP_0:       REG_WRITE := 2C;
                                               (00049) WR_AU_RIGHT_CMP_1:       REG_WRITE := 2D;
                                               (00050) WR_AU_RIGHT_CMP_2:       REG_WRITE := 2E;
                                               (00051) WR_AU_RIGHT_CMP_3:       REG_WRITE := 2F;
                                               (00052) 
                                               (00053) WR_AU_BIAS_STEP_0:      REG_WRITE := 30;
                                               (00054) WR_AU_BIAS_STEP_1:      REG_WRITE := 31;
                                               (00055) WR_AU_BIAS_STEP_2:      REG_WRITE := 32;
                                               (00056) WR_AU_BIAS_STEP_3:      REG_WRITE := 33;
                                               (00057) WR_AU_BIAS_CMP_0:       REG_WRITE := 34;
                                               (00058) WR_AU_BIAS_CMP_1:       REG_WRITE := 35;
                                               (00059) WR_AU_BIAS_CMP_2:       REG_WRITE := 36;
                                               (00060) WR_AU_BIAS_CMP_3:       REG_WRITE := 37;
                                               (00061) 
                                               (00062) WR_AU_PB_A_STEP_0:      REG_WRITE := 38;
                                               (00063) WR_AU_PB_A_STEP_1:      REG_WRITE := 39;
                                               (00064) WR_AU_PB_A_STEP_2:      REG_WRITE := 3A;
                                               (00065) WR_AU_PB_A_STEP_3:      REG_WRITE := 3B;
                                               (00066) WR_AU_PB_A_CMP_0:       REG_WRITE := 3C;    
                                               (00067) WR_AU_PB_A_CMP_1:       REG_WRITE := 3D;
                                               (00068) WR_AU_PB_A_CMP_2:       REG_WRITE := 3E;
                                               (00069) WR_AU_PB_A_CMP_3:       REG_WRITE := 3F;
                                               (00070) 
                                               (00071) 
                                               (00072) WR_REG_1B:              REG_WRITE := 1B; (( //
                                               (00073) WR_REG_1C:              REG_WRITE := 1C; (( //
                                               (00074) WR_REG_1D:              REG_WRITE := 1D; (( //
                                               (00075) WR_REG_1E:              REG_WRITE := 1E; (( //
                                               (00076) 
                                               (00077)            (( More registers needs to be added for alternative addressing mode..
                                               (00078) 
                                               (00079) ( WR_MAC_SWITCH:          REG_WRITE := 1F; ( // write the multiplier control register
                                               (00080) 
                                               (00081) (VE_RELOAD_L:            ADDR_VE_RELOAD := 1, MODE_A := 1, MODE_B := 0; (( MODE_C := 0, MODE_D := 0;
                                               (00082) VE_RELOAD_R:            COUNTER_RESET := 1, MODE_A := 0, MODE_B := 1; (( MODE_C := 0, MODE_D := 0;
                                               (00083) (VE_RELOAD_BOTH:         ADDR_VE_RELOAD := 1, MODE_A := 1, MODE_B := 1; (( MODE_C := 0, MODE_D := 0;
                                               (00084) 
                                               (00085) VE_RELOAD_LC:           COUNTER_RESET := 1; (( Added to allow for seperate loading of loop counter without affecting addresses..
                                               (00086) 
                                               (00087) (VE_RINGMODE:            MODE_C :=1;
                                               (00088) 
                                               (00089) 
                                               (00090) VE_CLEAR_ACC:            CLR_ACC :=1;
                                               (00091) VE_START:                CONV_COMP := 1, RE_MODE_SEL :=0, ENGINE_START := 1;
                                               (00092) VE_START_BYPASS:         CONV_COMP := 1, RE_MODE_SEL :=0, BYPASS := 1;
                                               (00093) 
                                               (00094) (RE_PUSHBACK_RINGMODE:   RE_DFY_SRC := 1, ADDR_RE_RELOAD := 0, MODE_A := 0, MODE_B := 0, MODE_C := 1, MODE_D := 0, RCV_ST := 1;
                                               (00095) 
                                               (00096) (RE_PUSHBACK_INIT_A:     RE_DFY_SRC := 1, ADDR_RE_RELOAD := 1, MODE_A := 1, MODE_B := 0, RCV_ST := 0;
                                               (00097) (RE_PUSHBACK_INIT_B:     RE_DFY_SRC := 1, ADDR_RE_RELOAD := 1, MODE_A := 0, MODE_B := 1, RCV_ST := 0;
                                               (00098) 
                                               (00099) (RE_PUSHBACK_INIT_ST_A:  RE_DFY_SRC := 1, ADDR_RE_RELOAD := 1, MODE_A := 1, MODE_B := 0, RCV_ST := 1;
                                               (00100) (RE_PUSHBACK_INIT_ST_B:  RE_DFY_SRC := 1, ADDR_RE_RELOAD := 1, MODE_A := 0, MODE_B := 1, RCV_ST := 1;
                                               (00101) 
                                               (00102) (RE_PUSHBACK_CONT_A:     RE_DFY_SRC := 1, ADDR_RE_RELOAD := 0, MODE_A := 1, MODE_B := 0, RCV_ST := 1;
                                               (00103) (RE_PUSHBACK_CONT_B:     RE_DFY_SRC := 1, ADDR_RE_RELOAD := 0, MODE_A := 0, MODE_B := 1, RCV_ST := 1;
                                               (00104) 
                                               (00105) (RE_RECEIVE_RING_MODE:   RE_DFY_SRC := 0, ADDR_RE_RELOAD := 1, MODE_A := 0, MODE_B := 0, MODE_C := 1, MODE_D := 0, RCV_ST := 1;
                                               (00106) 
                                               (00107) (RE_RECEIVE_INIT_LEFT:   RE_DFY_SRC := 0, ADDR_RE_RELOAD := 1, MODE_A := 1, MODE_B := 0, RCV_ST := 0;
                                               (00108) (RE_RECEIVE_INIT_RIGHT:  RE_DFY_SRC := 0, ADDR_RE_RELOAD := 1, MODE_A := 0, MODE_B := 1, RCV_ST := 0;
                                               (00109) 
                                               (00110) RE_RECEIVE_INIT_ST_LEFT:    RE_DFY_SRC := 0, RE_MODE_SEL := 1, MODE_A := 1, MODE_B := 0, ENGINE_START := 1;
                                               (00111) RE_RECEIVE_INIT_ST_RIGHT:   RE_DFY_SRC := 0, RE_MODE_SEL := 1, MODE_A := 0, MODE_B := 1, ENGINE_START := 1;
                                               (00112) RE_RECEIVE_INIT_ST_BIAS:    RE_DFY_SRC := 0, RE_MODE_SEL := 1, MODE_A := 1, MODE_B := 1, ENGINE_START := 1;
                                               (00113) 
                                               (00114) (RE_RECEIVE_CONT_LEFT:   RE_DFY_SRC := 0, ADDR_RE_RELOAD := 0, MODE_A := 1, MODE_B := 0, RCV_ST := 1;
                                               (00115) (RE_RECEIVE_CONT_RIGHT:  RE_DFY_SRC := 0, ADDR_RE_RELOAD := 0, MODE_A := 0, MODE_B := 1, RCV_ST := 1;
                                               (00116) 
                                               (00117) WR_DTM_0:               DEST_BYTE := 0, LOAD DTM FROM Y;
                                               (00118) WR_DTM_1:               DEST_BYTE := 1, LOAD DTM FROM Y;
                                               (00119) WR_DTM_2:               DEST_BYTE := 2, LOAD DTM FROM Y;
                                               (00120) WR_DTM_3:               DEST_BYTE := 3, LOAD DTM FROM Y;
                                               (00121) 
                                               (00122) ((   This can be used for debug break and other debugging as desired.
                                               (00123) ((   Just add codes here. Remove this for production code.
                                               (00124) (
                                               (00125) DEBUG_NOP:              PE_READY := 0;
                                               (00126) ((DEBUG_HALT:             MCLM :=1;
                                               (00127) (
                                               (00128) ((( Dont use any of the below since bits are now reserved.
                                               (00129) (DEBUG_CC_ON:            MCLM :=0;
                                               (00130) (DEBUG_CC_OFF:           MCLM :=0;
                                               (00131) (DEBUG_RE_ON:            MCLM :=4;
                                               (00132) (DEBUG_RE_OFF:           MCLM :=5;
                                               (00133) (DEBUG_VE_ON:            MCLM :=6;
                                               (00134) (DEBUG_VE_OFF:           MCLM :=7;
                                               (00135) (DEBUG_FIFO_ON:          MCLM :=8;
                                               (00136) (DEBUG_FIFO_OFF:         MCLM :=9;
                                               (00137) (DUMP_WORK_REGS:         MCLM :=A;
                                               (00138) (DEBUG_FLAGS_ON:         MCLM :=B;
                                               (00139) (DEBUG_FLAGS_OFF:        MCLM :=C;
                                               (00140) (DEBUG_DSOURCE:          MCLM :=D;
                                               (00141) (DEBUG_PUSHBACK_ON:      MCLM :=E;
                                               (00142) (DEBUG_PUSHBACK_OFF:     MCLM :=F;
                                               (00143) (DEBUG_GMEM_ON:          MCLM :=10;
                                               (00144) (DEBUG_GMEM_OFF:         MCLM :=11;
                                               (00145) (DEBUG_DY_ON:            MCLM :=12;
                                               (00146) (DEBUG_DY_OFF:           MCLM :=13;
                                               (00147) (DEBUG_DTM_ON:           MCLM :=14;
                                               (00148) (DEBUG_DTM_OFF:          MCLM :=15;
                                               (00149) (
                                               (00150) (
                                               (00151) (DEBUG_PW1_DATA:         MCLM :=16;
                                               (00152) (DEBUG_SHOW_CLK_E_ON:    MCLM :=17;
                                               (00153) (DEBUG_SHOW_CLK_E_OFF:   MCLM :=18;
                                               (00154) 
                                               (00155) (( Allow for diffrent section of statistics.
                                               (00156) (DEBUG_CHOOSE_STAT_0:    MCLM := 19; (( Default value..
                                               (00157) (DEBUG_CHOOSE_STAT_1:    MCLM := 1A;
                                               (00158) (DEBUG_CHOOSE_STAT_2:    MCLM := 1B;
                                               (00159) (DEBUG_CHOOSE_STAT_3:    MCLM := 1C;
                                               (00160) (DEBUG_CHOOSE_STAT_4:    MCLM := 1D;
                                               (00161) (DEBUG_CHOOSE_STAT_5:    MCLM := 1E;
                                               (00162) (DEBUG_CHOOSE_STAT_6:    MCLM := 1F;
                                               (00163) (DEBUG_CHOOSE_STAT_7:    MCLM := 20;
                                               (00164) 
                                               (00165) 
                                               (00166) (CONVOLUTION_DONE_RETURN: MCLM :=FF;
                                               (00167) (Convolution_Done_Return: MCLM :=FF;
                                               (00168) PE_RDY:                  PE_READY := 1;
                                               (00169) 
                                               (00170) 
                                               (00171) 
                                               (00172) ( IF:        'IF'
                                               (00173) ( IFNOT:     'FN'
                                               (00174) ( IFZERO:    COND:=00 CPOL:=0;      (ZERO FLIPFLOP
                                               (00175) ( FNZERO:    COND:=00 CPOL:=1;
                                               (00176) ( IFCARRY:   COND:=01 CPOL:=0;      (CARRY FLIPFLOP
                                               (00177) ( FNCARRY:   COND:=01 CPOL:=1;
                                               (00178) 
                                               (00179) ( COND_VE_FREE    = 0x20;
                                               (00180) ( COND_RE_FREE    = 0x21;
                                               (00181) ( COND_DFM_DATA   = 0x22;             ( Data available = 1
                                               (00182) ( COND_FIFO_FULL  = 0x23;
                                               (00183) ( COND_CONT       = 0x24;             ( Same as resume..
                                               (00184) ( COND_FIFO_EMPTY = 0x25;
                                               (00185) 
                                               (00186) (( Note that C5 selects upper 32.
                                               (00187) 
                                               (00188) ( CPOL toggle/inverse the bit.
                                               (00189) IFVE_FREE:      C5:=1 COND:=0 CPOL:=0;  ( 32  0x20
                                               (00190) IFVE_INUSE:     C5:=1 COND:=0 CPOL:=1;  ( 32
                                               (00191) 
                                               (00192) IFRE_FREE:      C5:=1 COND:=1 CPOL:=0;  ( 33  0x21
                                               (00193) IFRE_INUSE:     C5:=1 COND:=1 CPOL:=1;  ( 33
                                               (00194) 
                                               (00195) IFDFM_DATA:     C5:=1 COND:=2 CPOL:=0;  ( 34  0x22
                                               (00196) FNDFM_DATA:     C5:=1 COND:=2 CPOL:=1;  ( 34
                                               (00197) 
                                               (00198) IFFIFO_FULL:      C5:=1 COND:=3 CPOL:=0;  ( 35  0x23
                                               (00199) RESUME:         C5:=1 COND:=4 CPOL:=1;  ( 36    0x24    
                                               (00200) 
                                               (00201) IFFIFO_EMPTY:     C5:=1 COND:=5 CPOL:=0;  ( 36   0x25
                                               (00202) FNFIFO_EMPTY:     C5:=1 COND:=5 CPOL:=1;  ( 36   0x25
                                               (00203) 
                                               (00204) USING_WORK_REG_A_HIGH: A_SRC_HIGH:=1;
                                               (00205) USING_WORK_REG_B_HIGH: B_SRC_HIGH:=1;
                                               (00206) USING_DEST_REG_B_HIGH: B_SRC_HIGH:=1;
FILE: ..\mpgm\Tmpgm\Sequence_Test.mas
                                               (00007) 
                                               (00008) 
                                               (00009) 
                                               (00010) *PROGRAM*                   (// END of definitions, START of PROGRAM.
FILE: ..\mpgm\Definitions/AluRegsVe.mas
                                               (00001) ( File: AluRegs.mas
                                               (00002) (
                                               (00003) ( Copyright (C) 2006  Imsys AB.
                                               (00004) ( All rights reserved.
                                               (00005) (
                                               (00006) ( 06-02-06  PA	  Created for GP3000
                                               (00007) ( 06-09-13  PA    Register name changed from TBFLGS to SFR
                                               (00008) (
                                               (00009) (===============================================================================
                                               (00010) (
                                               (00011) (	REGISTER NAMES
                                               (00012) (
                                               (00013) (===============================================================================
                                               (00014) 
                                               (00015) (ADDR   NAME
                                               (00016)  #4:    W_T2_DATA_STORAGE_LOW:
                                               (00017)  #4:    W_DATA_OUT_ROW_BASE_LOW:
                                               (00018)  #5:    W_T2_DATA_STORAGE_HIGH:
                                               (00019)  #5:    W_DATA_OUT_ROW_BASE_HIGH:
                                               (00020)  #6:    W_DATA_OUT_BASE_LOW:
                                               (00021)  #7:    W_DATA_OUT_BASE_HIGH:
                                               (00022)  #8:    W_PW2_LOOPS:
                                               (00023)  #8:    W_MINIMUS_LOOPS:
                                               (00024)  #9:    W_PW2_KERNELS:    ( Same as the number of kernels?
                                               (00025)  #A:    W_DW1_SRAM_KERNELS:
                                               (00026)  #B:    W_PW1_SRAM_KERNELS:
                                               (00027)  #C:    W_MAJOR_LOOPS:
                                               (00028)  #D:    W_MINOR_LOOPS:
                                               (00029)  #E:    W_ADDR_DATA:
                                               (00030)  #F:    W_INNER_COL:
                                               (00031)  #10:   W_INNER_ROW:
                                               (00032)  #10:   W_INNER_COL_ROW:
                                               (00033)  #11:   W_KERNEL_BASE_LOW:
                                               (00034)  #11:   W_KERNEL_1_BASE_LOW:
                                               (00035)  #12:   W_KERNEL_BASE_HIGH:
                                               (00036)  #12:   W_KERNEL_1_BASE_HIGH:
                                               (00037)  #13:   W_KERNEL_2_BASE_LOW:
                                               (00038)  #14:   W_KERNEL_2_BASE_HIGH:
                                               (00039)  #15:   W_KERNEL_3_BASE_LOW:
                                               (00040)  #15:   W_T2_INNER_OFF:
                                               (00041)  #15:   W_DATA_IN_CURRENT_LOW:
                                               (00042)  #16:   W_DATA_IN_CURRENT_HIGH:
                                               (00043)  #16:   W_KERNEL_3_BASE_HIGH:
                                               (00044)  #17:   W_DATA_IN_CURRENT_BASE_LOW:
                                               (00045)  #18:   W_DATA_IN_CURRENT_BASE_HIGH:
                                               (00046)  #19:   W_ROW_SIZE_LOW:
                                               (00047)  #1A:   W_ROW_SIZE_HIGH:
                                               (00048)  #1B:   W_REQ_SHORT_WORDS:
                                               (00049)  #1C:   W_REQ_CM_ADDR_LOW:
                                               (00050)  #1D:   W_REQ_CM_ADDR_HIGH:
                                               (00051)  #1E:   W_CONV_COL:
                                               (00052)  #1F:   W_CONV_ROW:
                                               (00053) 
                                               (00054) 
                                               (00055) (( Another copy that includes the reg_index
                                               (00056)  #4:    W04_T2_DATA_STORAGE_LOW:
                                               (00057)  #4:    W04_REQ_LONG_WORDS:
                                               (00058)  #4:    W04_DATA_OUT_ROW_BASE_LOW:
                                               (00059)  #5:    W05_T2_DATA_STORAGE_HIGH:
                                               (00060)  #5:    W05_DATA_OUT_ROW_BASE_HIGH:
                                               (00061)  #6:    W06_DATA_OUT_BASE_LOW:
                                               (00062)  #7:    W07_DATA_OUT_BASE_HIGH:
                                               (00063)  #8:    W08_PW2_LOOPS:
                                               (00064)  #8:    W08_MINIMUS_LOOPS:
                                               (00065)  #9:    W09_PW2_KERNELS:    ( Same as the number of kernels?
                                               (00066)  #A:    W0A_DW1_SRAM_KERNELS:
                                               (00067)  #B:    W0B_PW1_SRAM_KERNELS:
                                               (00068)  #C:    W0C_MAJOR_LOOPS:
                                               (00069)  #D:    W0D_MINOR_LOOPS:
                                               (00070)  #E:    W0E_ADDR_DATA:
                                               (00071)  #F:    W0F_INNER_COL:
                                               (00072)  #10:   W10_INNER_ROW:
                                               (00073)  #10:   W10_INNER_COL_ROW:
                                               (00074)  #11:   W11_KERNEL_BASE_LOW:
                                               (00075)  #11:   W11_KERNEL_1_BASE_LOW:
                                               (00076)  #12:   W12_KERNEL_BASE_HIGH:
                                               (00077)  #12:   W12_KERNEL_1_BASE_HIGH:
                                               (00078)  #13:   W13_KERNEL_2_BASE_LOW:
                                               (00079)  #14:   W14_KERNEL_2_BASE_HIGH:
                                               (00080)  #15:   W15_KERNEL_3_BASE_LOW:
                                               (00081)  #15:   W15_T2_INNER_OFF:
                                               (00082)  #15:   W15_DATA_IN_CURRENT_LOW:
                                               (00083)  #16:   W16_DATA_IN_CURRENT_HIGH:
                                               (00084)  #16:   W16_KERNEL_3_BASE_HIGH:
                                               (00085)  #17:   W17_DATA_IN_CURRENT_BASE_LOW:
                                               (00086)  #18:   W18_DATA_IN_CURRENT_BASE_HIGH:
                                               (00087)  #19:   W19_ROW_SIZE_LOW:
                                               (00088)  #1A:   W1A_ROW_SIZE_HIGH:
                                               (00089)  #1B:   W1B_REQ_SHORT_WORDS:
                                               (00090)  #1C:   W1C_REQ_CM_ADDR_LOW:
                                               (00091)  #1D:   W1D_REQ_CM_ADDR_HIGH:
                                               (00092)  #1E:   W1E_CONV_COL:
                                               (00093)  #1F:   W1F_CONV_ROW:
                                               (00094) 
                                               (00095) (( Another copy that includes the reg_index
                                               (00096) #0:    W00:
                                               (00097) #1:    W01:
                                               (00098) #2:    W02:
                                               (00099) #3:    W03:
                                               (00100) #4:    W04:
                                               (00101) #5:    W05:
                                               (00102) #6:    W06:
                                               (00103) #7:    W07:
                                               (00104) #8:    W08:
                                               (00105) #9:    W09:
                                               (00106) #A:    W0A:
                                               (00107) #B:    W0B:
                                               (00108) #C:    W0C:
                                               (00109) #D:    W0D:
                                               (00110) #E:    W0E:
                                               (00111) #F:    W0F:
                                               (00112) #10:   W10:
                                               (00113) #11:   W11:
                                               (00114) #12:   W12:
                                               (00115) #13:   W13:
                                               (00116) #14:   W14:
                                               (00117) #15:   W15:
                                               (00118) #16:   W16:
                                               (00119) #17:   W17:
                                               (00120) #18:   W18:
                                               (00121) #19:   W19:
                                               (00122) #1A:   W1A:
                                               (00123) #1B:   W1B:
                                               (00124) #1C:   W1C:
                                               (00125) #1D:   W1D:
                                               (00126) #1E:   W1E:
                                               (00127) #1F:   W1F:
                                               (00128) 
                                               (00129) #0:    W20:
                                               (00130) #1:    W21:
                                               (00131) #2:    W22:
                                               (00132) #3:    W23:
                                               (00133) #4:    W24:
                                               (00134) #5:    W25:
                                               (00135) #6:    W26:
                                               (00136) #7:    W27:
                                               (00137) #8:    W28:
                                               (00138) #9:    W29:
                                               (00139) #A:    W2A:
                                               (00140) #B:    W2B:
                                               (00141) #C:    W2C:
                                               (00142) #D:    W2D:
                                               (00143) #E:    W2E:
                                               (00144) #F:    W2F:
                                               (00145) #10:   W30:
                                               (00146) #11:   W31:
                                               (00147) #12:   W32:
                                               (00148) #13:   W33:
                                               (00149) #14:   W34:
                                               (00150) #15:   W35:
                                               (00151) #16:   W36:
                                               (00152) #17:   W37:
                                               (00153) #18:   W38:
                                               (00154) #19:   W39:
                                               (00155) #1A:   W3A:
                                               (00156) #1B:   W3B:
                                               (00157) #1C:   W3C:
                                               (00158) #1D:   W3D:
                                               (00159) #1E:   W3E:
                                               (00160) #1F:   W3F:
                                               (00161) 
                                               (00162)  
FILE: ..\mpgm\Tmpgm\Sequence_Test.mas
                                               (00012) 
                                               (00013) #0000:
                                               (00014) 
00: 0000 0000 0000 0002 204B 0504 8A80 4042/00 (00015) DSOURCE CONSTANT 20, PASS D TO W00;
                                               (00016) 
                                               (00017) LABEL:
                                               (00018) 
01: 0000 0000 0000 1002 0001 2504 0004 0012/00 (00019)     ASOURCE W00, DECR A, TO W00;
02: 0000 0000 0000 4068 2062 2002 0BA0 8040/00 (00020)     GOTO LABEL IF NOT FZ;
                                               (00021) 
03: 0000 0000 0000 0002 004B 1504 8AC0 0042/00 (00022)     DSOURCE CONSTANT 50, PASS D TO W00;
                                               (00023) 
                                               (00024) LABEL_LOOP_16:
                                               (00025)     ( A-D
04: 0000 0000 0000 9068 0028 1406 0030 0010/00 (00026)     DSOURCE CONSTANT 10, ASOURCE W00, SUBAD;
05: 0000 0000 0000 4068 0262 2022 8BA0 A040/00 (00027)     GOTO LABEL_LOOP_8 IF FN;
                                               (00028) 
                                               (00029)     ( Else do all this code here!
                                               (00030) 
06: 0000 0000 0000 9002 0001 1420 0010 8012/00 (00031)     DSOURCE CONSTANT 10, ASOURCE W00, SUBAD TO W00, UNC GOTO LABEL_LOOP_16;
                                               (00032) 
                                               (00033) 
                                               (00034) LABEL_LOOP_8:
07: 0000 0000 0000 9002 0001 0404 0010 0092/00 (00035)     DSOURCE CONSTANT 8, ASOURCE W00, SUBAD TO W00;
08: 0000 0000 0000 4068 0262 2002 8AA0 A050/00 (00036)     GOTO LABEL_DONE IF FN;
                                               (00037) 
                                               (00038)     ( Else do all this code here!
                                               (00039) 
09: 0000 0000 0000 9002 0001 0420 8110 A092/00 (00040)     DSOURCE CONSTANT 8, ASOURCE W00, SUBAD TO W00, UNC GOTO LABEL_LOOP_8;
                                               (00041) 
                                               (00042) 
                                               (00043) LABEL_DONE:
                                               (00044) 
                                               (00045) READY:
0A: 8000 0000 0000 0068 0062 2402 8AA0 A050/00 (00046)     PE_RDY, 
                                               (00047)     UNC GOTO READY;
                                               (00048) 
                                               (00049) 
100: 8000 0000 0000 0068 0062 2406 0AA0 0040/00 (00050) #FFFF: PE_RDY; ( DEBUG_NOP;
                                               (00051) *END*
